{
    "ACT_DOTA_INTRO":{"body":"ACT_DOTA_INTRO","description":"","prefix":"ACT_DOTA_INTRO"},
"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON":{"body":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON","description":"","prefix":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON"},
"CDOTA_Modifier_Lua_IsPurgable":{"body":"IsPurgable()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier can be purged., return bool","prefix":"IsPurgable"},
"DOTA_HEROPICK_STATE_NONE":{"body":"DOTA_HEROPICK_STATE_NONE","description":"","prefix":"DOTA_HEROPICK_STATE_NONE"},
"MODIFIER_EVENT_ON_ATTACK_FAIL":{"body":"MODIFIER_EVENT_ON_ATTACK_FAIL","description":"Value[119]modifierfunction->OnAttackFail","prefix":"MODIFIER_EVENT_ON_ATTACK_FAIL"},
"CDOTA_BaseNPC_Hero_GetStrengthGain":{"body":"GetStrengthGain()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetStrengthGain"},
"DAMAGE_TYPE_PHYSICAL":{"body":"DAMAGE_TYPE_PHYSICAL","description":"","prefix":"DAMAGE_TYPE_PHYSICAL"},
"DOTA_HEROPICK_STATE_CD_SELECT8":{"body":"DOTA_HEROPICK_STATE_CD_SELECT8","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT8"},
"CDOTA_Item_Lua_OnUpgrade":{"body":"OnUpgrade()","description":"CDOTA_Item_Lua:\nAbility gained a level., return void","prefix":"OnUpgrade"},
"CDOTABaseAbility_CreateVisibilityNode":{"body":"CreateVisibilityNode(${vLocation}, ${fRadius}, ${fDuration})","description":"CDOTABaseAbility:\n, return void","prefix":"CreateVisibilityNode"},
"CDOTATutorial_GetTimeFrozen":{"body":"GetTimeFrozen()","description":"CDOTATutorial:\nIs our time frozen?, return bool","prefix":"GetTimeFrozen"},
"SendToConsole":{"body":"SendToConsole(${string_1})","description":"Send a string to the console as a client command, return void","prefix":"SendToConsole"},
"CreateItemOnPositionForLaunch":{"body":"CreateItemOnPositionForLaunch(${Vector_1}, ${handle_2})","description":"Create a physical item at a given location, can start in air (but doesn't clear a space), return handle","prefix":"CreateItemOnPositionForLaunch"},
"ACT_DOTA_LIFESTEALER_EJECT":{"body":"ACT_DOTA_LIFESTEALER_EJECT","description":"","prefix":"ACT_DOTA_LIFESTEALER_EJECT"},
"CDOTA_Item_Lua_IsHiddenAbilityCastable":{"body":"IsHiddenAbilityCastable()","description":"CDOTA_Item_Lua:\nReturns true if this ability can be used when not on the action panel., return bool","prefix":"IsHiddenAbilityCastable"},
"CDOTAPlayer_SetMusicStatus":{"body":"SetMusicStatus(${nMusicStatus}, ${flIntensity})","description":"CDOTAPlayer:\n(nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off., return void","prefix":"SetMusicStatus"},
"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_RUNE_TARGET"},
"CDOTA_BaseNPC_Building_GetInvulnCount":{"body":"GetInvulnCount()","description":"CDOTA_BaseNPC_Building:\nGet the invulnerability count for a building., return int","prefix":"GetInvulnCount"},
"ACT_DOTA_ROQUELAIRE_LAND_IDLE":{"body":"ACT_DOTA_ROQUELAIRE_LAND_IDLE","description":"","prefix":"ACT_DOTA_ROQUELAIRE_LAND_IDLE"},
"ListenToGameEvent":{"body":"ListenToGameEvent(${string_1}, ${handle_2}, ${handle_3})","description":"Register as a listener for a game event from script., return int","prefix":"ListenToGameEvent"},
"DOTA_STASH_SLOT_1":{"body":"DOTA_STASH_SLOT_1","description":"","prefix":"DOTA_STASH_SLOT_1"},
"CDOTA_PlayerResource_GetEventRanks":{"body":"GetEventRanks(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return <unknown>","prefix":"GetEventRanks"},
"CDOTAGamerules_GetCustomGameDifficulty":{"body":"GetCustomGameDifficulty()","description":"CDOTAGamerules:\nReturns the difficulty level of the custom game mode, return int","prefix":"GetCustomGameDifficulty"},
"ACT_DOTA_SLARK_POUNCE":{"body":"ACT_DOTA_SLARK_POUNCE","description":"","prefix":"ACT_DOTA_SLARK_POUNCE"},
"CDOTABaseAbility_IsCooldownReady":{"body":"IsCooldownReady()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsCooldownReady"},
"ACT_DOTA_SWIM":{"body":"ACT_DOTA_SWIM","description":"","prefix":"ACT_DOTA_SWIM"},
"CBaseEntity_SetAngles":{"body":"SetAngles(${fPitch}, ${fYaw}, ${fRoll})","description":"CBaseEntity:\nSet entity pitch, yaw, roll., return void","prefix":"SetAngles"},
"CBaseEntity_OverrideFriction":{"body":"OverrideFriction(${duration}, ${friction})","description":"CBaseEntity:\nTakes duration, value for a temporary override., return void","prefix":"OverrideFriction"},
"CDOTABaseAbility_GetLevelSpecialValueFor":{"body":"GetLevelSpecialValueFor(${szName}, ${nLevel})","description":"CDOTABaseAbility:\n, return table","prefix":"GetLevelSpecialValueFor"},
"CDOTA_BaseNPC_IsDisarmed":{"body":"IsDisarmed()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsDisarmed"},
"ABILITY_CAN_BE_UPGRADED":{"body":"ABILITY_CAN_BE_UPGRADED","description":"","prefix":"ABILITY_CAN_BE_UPGRADED"},
"DOTA_ATTRIBUTE_STRENGTH":{"body":"DOTA_ATTRIBUTE_STRENGTH","description":"","prefix":"DOTA_ATTRIBUTE_STRENGTH"},
"CDOTABaseGameMode_GetTowerBackdoorProtectionEnabled":{"body":"GetTowerBackdoorProtectionEnabled()","description":"CDOTABaseGameMode:\nEnables/Disables tower backdoor protection., return bool","prefix":"GetTowerBackdoorProtectionEnabled"},
"DOTA_HUD_VISIBILITY_ACTION_MINIMAP":{"body":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP","description":"","prefix":"DOTA_HUD_VISIBILITY_ACTION_MINIMAP"},
"CDOTA_Item_Lua_SpeakTrigger":{"body":"SpeakTrigger()","description":"CDOTA_Item_Lua:\nReturn the type of speech used., return int","prefix":"SpeakTrigger"},
"DebugDrawText":{"body":"DebugDrawText(${Vector_1}, ${string_2}, ${bool_3}, ${float_4})","description":"Draw text in 3d (origin, text, bViewCheck, duration), return void","prefix":"DebugDrawText"},
"CDOTA_Ability_Animation_TailSpin_SetPlaybackRate":{"body":"SetPlaybackRate(${flRate})","description":"CDOTA_Ability_Animation_TailSpin:\nOverride playbackrate, return void","prefix":"SetPlaybackRate"},
"CDOTA_BaseNPC_RespawnUnit":{"body":"RespawnUnit()","description":"CDOTA_BaseNPC:\nRespawns the target unit if it can be respawned., return void","prefix":"RespawnUnit"},
"CBaseAnimating_GetAttachmentAngles":{"body":"GetAttachmentAngles(${iAttachment})","description":"CBaseAnimating:\nGet the attachement id's angles as a p,y,r vector., return Vector","prefix":"GetAttachmentAngles"},
"CDOTA_BaseNPC_Hero_RespawnHero":{"body":"RespawnHero(${bBuyBack}, ${bIsActuallyBeingSpawnedForTheFirstTime}, ${bRespawnPenalty})","description":"CDOTA_BaseNPC_Hero:\nRespawn this hero., return void","prefix":"RespawnHero"},
"GlobalSys_CommandLineCheck":{"body":"CommandLineCheck(${string_1})","description":"GlobalSys:\nCommandLineCheck(name) : returns true if the command line param was used, otherwise false., return table","prefix":"CommandLineCheck"},
"DOTA_LOADOUT_TYPE_WEAPON2":{"body":"DOTA_LOADOUT_TYPE_WEAPON2","description":"","prefix":"DOTA_LOADOUT_TYPE_WEAPON2"},
"CDOTATutorial_SetOrModifyPlayerGold":{"body":"SetOrModifyPlayerGold(${int_1}, ${bool_2})","description":"CDOTATutorial:\nSet gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify, return void","prefix":"SetOrModifyPlayerGold"},
"CDOTA_BaseNPC_SetStolenScepter":{"body":"SetStolenScepter(${bStolenScepter})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetStolenScepter"},
"CreateEffect":{"body":"CreateEffect(${handle_1})","description":"Pass table - Inputs: entity, effect, return bool","prefix":"CreateEffect"},
"CBaseTrigger_Enable":{"body":"Enable()","description":"CBaseTrigger:\nEnable the trigger, return void","prefix":"Enable"},
"RotationDelta":{"body":"RotationDelta(${QAngle_1}, ${QAngle_2})","description":"Find the delta between two QAngles., return QAngle","prefix":"RotationDelta"},
"DOTA_UNIT_TARGET_BUILDING":{"body":"DOTA_UNIT_TARGET_BUILDING","description":"","prefix":"DOTA_UNIT_TARGET_BUILDING"},
"CDOTA_BaseNPC_HasFlyingVision":{"body":"HasFlyingVision()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasFlyingVision"},
"CBaseEntity_NextMovePeer":{"body":"NextMovePeer()","description":"CBaseEntity:\n, return handle","prefix":"NextMovePeer"},
"CDOTABaseGameMode_GetFixedRespawnTime":{"body":"GetFixedRespawnTime()","description":"CDOTABaseGameMode:\nGets the fixed respawn time., return float","prefix":"GetFixedRespawnTime"},
"ACT_DOTA_CAST_GHOST_WALK":{"body":"ACT_DOTA_CAST_GHOST_WALK","description":"","prefix":"ACT_DOTA_CAST_GHOST_WALK"},
"CEntities_CreateByClassname":{"body":"CreateByClassname(${string_1})","description":"CEntities:\nCreates an entity by classname, return handle","prefix":"CreateByClassname"},
"MODIFIER_PROPERTY_MODEL_SCALE":{"body":"MODIFIER_PROPERTY_MODEL_SCALE","description":"Value[150]modifierfunction->GetModifierModelScale","prefix":"MODIFIER_PROPERTY_MODEL_SCALE"},
"CDOTA_BaseNPC_Hero_GetGold":{"body":"GetGold()","description":"CDOTA_BaseNPC_Hero:\nReturns gold amount for the player owning this hero, return int","prefix":"GetGold"},
"CDOTA_BaseNPC_CastAbilityImmediately":{"body":"CastAbilityImmediately(${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability immediately., return void","prefix":"CastAbilityImmediately"},
"cvar_getf":{"body":"cvar_getf(${string_1})","description":"Gets the value of the given cvar, as a float., return float","prefix":"cvar_getf"},
"CDOTA_PlayerResource_GetLastHitStreak":{"body":"GetLastHitStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLastHitStreak"},
"CDOTA_BaseNPC_Hero_IncrementDenies":{"body":"IncrementDenies()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementDenies"},
"DOTA_LOADOUT_TYPE_BACK":{"body":"DOTA_LOADOUT_TYPE_BACK","description":"","prefix":"DOTA_LOADOUT_TYPE_BACK"},
"CDOTA_BaseNPC_Hero_SetBotDifficulty":{"body":"SetBotDifficulty(${nDifficulty})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBotDifficulty"},
"DOTA_LOADOUT_TYPE_ARMS":{"body":"DOTA_LOADOUT_TYPE_ARMS","description":"","prefix":"DOTA_LOADOUT_TYPE_ARMS"},
"DOTA_LOADOUT_TYPE_ABILITY4":{"body":"DOTA_LOADOUT_TYPE_ABILITY4","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY4"},
"CDOTABaseAbility_ToggleAbility":{"body":"ToggleAbility()","description":"CDOTABaseAbility:\n, return void","prefix":"ToggleAbility"},
"CDOTABaseAbility_GetCooldown":{"body":"GetCooldown(${iLevel})","description":"CDOTABaseAbility:\nGet the cooldown duration for this ability at a given level, not the amount of cooldown actually left., return float","prefix":"GetCooldown"},
"DOTA_GAMERULES_STATE_INIT":{"body":"DOTA_GAMERULES_STATE_INIT","description":"","prefix":"DOTA_GAMERULES_STATE_INIT"},
"CDOTA_Buff_GetElapsedTime":{"body":"GetElapsedTime()","description":"CDOTA_Buff:\n, return float","prefix":"GetElapsedTime"},
"ACT_DOTA_GREEVIL_CAST":{"body":"ACT_DOTA_GREEVIL_CAST","description":"","prefix":"ACT_DOTA_GREEVIL_CAST"},
"SpawnEntityFromTableSynchronous":{"body":"SpawnEntityFromTableSynchronous(${string_1}, ${handle_2})","description":"Synchronously spawns a single entity from a table, return handle","prefix":"SpawnEntityFromTableSynchronous"},
"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE","description":"Value[102]modifierfunction->GetAbsoluteNoDamagePure","prefix":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PURE"},
"GetItemCost":{"body":"GetItemCost(${string_1})","description":"Get the cost of an item by name., return int","prefix":"GetItemCost"},
"CDOTA_Ability_Animation_Attack_SetPlaybackRate":{"body":"SetPlaybackRate(${flRate})","description":"CDOTA_Ability_Animation_Attack:\nOverride playbackrate, return void","prefix":"SetPlaybackRate"},
"CDOTA_PlayerResource_SetHasRepicked":{"body":"SetHasRepicked(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetHasRepicked"},
"CDOTA_BaseNPC_Hero_SetBuybackCooldownTime":{"body":"SetBuybackCooldownTime(${flTime})","description":"CDOTA_BaseNPC_Hero:\nSets the buyback cooldown time., return void","prefix":"SetBuybackCooldownTime"},
"MODIFIER_STATE_SILENCED":{"body":"MODIFIER_STATE_SILENCED","description":"","prefix":"MODIFIER_STATE_SILENCED"},
"DOTA_MINIMAP_EVENT_TEAMMATE_DIED":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED","description":"","prefix":"DOTA_MINIMAP_EVENT_TEAMMATE_DIED"},
"CDOTABaseAbility_GetBackswingTime":{"body":"GetBackswingTime()","description":"CDOTABaseAbility:\n, return float","prefix":"GetBackswingTime"},
"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE","description":"Value[107]modifierfunction->GetModifierTurnRate_Percentage","prefix":"MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE"},
"Convars_SetInt":{"body":"SetInt(${string_1}, ${int_2})","description":"Convars:\nSetInt(name, val) : sets the value of the convar to the int., return void","prefix":"SetInt"},
"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED":{"body":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"},
"PATTACH_INVALID":{"body":"PATTACH_INVALID","description":"","prefix":"PATTACH_INVALID"},
"CBaseCombatCharacter_ShootPosition":{"body":"ShootPosition(${nHand})","description":"CBaseCombatCharacter:\nReturns the shoot position eyes (or hand in VR)., return Vector","prefix":"ShootPosition"},
"CDOTA_CustomUIManager_DynamicHud_Create":{"body":"DynamicHud_Create(${int_1}, ${string_2}, ${string_3}, ${handle_4})","description":"CDOTA_CustomUIManager:\nCreate a new custom UI HUD element for the specified player(s). ( int PlayerID /*-1 means everyone*/, string ElementID /* should be unique */, string LayoutFileName, table DialogVariables /* can be nil */ ), return void","prefix":"DynamicHud_Create"},
"DOTA_ModifyXP_Unspecified":{"body":"DOTA_ModifyXP_Unspecified","description":"","prefix":"DOTA_ModifyXP_Unspecified"},
"DOTA_TEAM_COUNT":{"body":"DOTA_TEAM_COUNT","description":"","prefix":"DOTA_TEAM_COUNT"},
"ACT_DOTA_RUN":{"body":"ACT_DOTA_RUN","description":"","prefix":"ACT_DOTA_RUN"},
"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE","description":"Value[33]modifierfunction->GetModifierBaseDamageOutgoing_PercentageUnique","prefix":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE_UNIQUE"},
"PauseGame":{"body":"PauseGame(${bool_1})","description":"Pause or unpause the game., return void","prefix":"PauseGame"},
"CBaseCombatCharacter_GetWeaponCount":{"body":"GetWeaponCount()","description":"CBaseCombatCharacter:\nGetWeaponCount() : Gets the number of weapons currently equipped, return int","prefix":"GetWeaponCount"},
"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS","description":"Value[43]modifierfunction->GetModifierPhysicalArmorBonus","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS"},
"DOTA_LOADOUT_TYPE_BELT":{"body":"DOTA_LOADOUT_TYPE_BELT","description":"","prefix":"DOTA_LOADOUT_TYPE_BELT"},
"DOTA_TEAM_CUSTOM_7":{"body":"DOTA_TEAM_CUSTOM_7","description":"","prefix":"DOTA_TEAM_CUSTOM_7"},
"ACT_DOTA_RELAX_END":{"body":"ACT_DOTA_RELAX_END","description":"","prefix":"ACT_DOTA_RELAX_END"},
"ACT_DOTA_CAST_LIFE_BREAK_START":{"body":"ACT_DOTA_CAST_LIFE_BREAK_START","description":"","prefix":"ACT_DOTA_CAST_LIFE_BREAK_START"},
"CDOTABaseAbility_OnToggle":{"body":"OnToggle()","description":"CDOTABaseAbility:\n, return void","prefix":"OnToggle"},
"CDOTA_Buff_SetStackCount":{"body":"SetStackCount(${iCount})","description":"CDOTA_Buff:\n, return void","prefix":"SetStackCount"},
"ACT_DOTA_RELAX_START":{"body":"ACT_DOTA_RELAX_START","description":"","prefix":"ACT_DOTA_RELAX_START"},
"DOTA_HEROPICK_STATE_CM_SELECT9":{"body":"DOTA_HEROPICK_STATE_CM_SELECT9","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT9"},
"DAMAGE_TYPE_MAGICAL":{"body":"DAMAGE_TYPE_MAGICAL","description":"","prefix":"DAMAGE_TYPE_MAGICAL"},
"CInfoData_QueryColor":{"body":"QueryColor(${tok}, ${vDefault})","description":"CInfoData:\nQuery color data for this key, return Vector","prefix":"QueryColor"},
"DOTA_ABILITY_BEHAVIOR_TOGGLE":{"body":"DOTA_ABILITY_BEHAVIOR_TOGGLE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_TOGGLE"},
"CDOTA_Item_Lua_OnStolen":{"body":"OnStolen(${hSourceAbility})","description":"CDOTA_Item_Lua:\n( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal., return void","prefix":"OnStolen"},
"CDOTA_PlayerResource_SetBuybackGoldLimitTime":{"body":"SetBuybackGoldLimitTime(${nPlayerID}, ${flBuybackCooldown})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetBuybackGoldLimitTime"},
"LUA_MODIFIER_MOTION_BOTH":{"body":"LUA_MODIFIER_MOTION_BOTH","description":"","prefix":"LUA_MODIFIER_MOTION_BOTH"},
"StartSoundEventUnreliable":{"body":"StartSoundEventUnreliable(${string_1}, ${handle_2})","description":"Start a sound event with optional delivery, return void","prefix":"StartSoundEventUnreliable"},
"RandomInt":{"body":"RandomInt(${int_1}, ${int_2})","description":"Get a random int within a range, return int","prefix":"RandomInt"},
"DOTA_HEROPICK_STATE_CM_BAN9":{"body":"DOTA_HEROPICK_STATE_CM_BAN9","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN9"},
"CDOTA_Item_SetStacksWithOtherOwners":{"body":"SetStacksWithOtherOwners(${bStacksWithOtherOwners})","description":"CDOTA_Item:\n, return void","prefix":"SetStacksWithOtherOwners"},
"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2","description":"Value[14]modifierfunction->GetModifierMoveSpeedBonus_Percentage_Unique_2","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE_2"},
"CDOTABaseAbility_ResetToggleOnRespawn":{"body":"ResetToggleOnRespawn()","description":"CDOTABaseAbility:\n, return bool","prefix":"ResetToggleOnRespawn"},
"CBasePlayer_IsVRControllerButtonPressed":{"body":"IsVRControllerButtonPressed(${nButton})","description":"CBasePlayer:\nReturns true if the controller button is pressed., return bool","prefix":"IsVRControllerButtonPressed"},
"DOTA_ModifyGold_SelectionPenalty":{"body":"DOTA_ModifyGold_SelectionPenalty","description":"","prefix":"DOTA_ModifyGold_SelectionPenalty"},
"CBaseEntity_GetRootMoveParent":{"body":"GetRootMoveParent()","description":"CBaseEntity:\nIf in hierarchy, walks up the hierarchy to find the root parent., return handle","prefix":"GetRootMoveParent"},
"DOTA_STASH_SLOT_2":{"body":"DOTA_STASH_SLOT_2","description":"","prefix":"DOTA_STASH_SLOT_2"},
"MODIFIER_STATE_DISARMED":{"body":"MODIFIER_STATE_DISARMED","description":"","prefix":"MODIFIER_STATE_DISARMED"},
"CDOTA_BaseNPC_PlayVCD":{"body":"PlayVCD(${pVCD})","description":"CDOTA_BaseNPC:\nPlay a VCD on the NPC., return void","prefix":"PlayVCD"},
"CDOTA_PlayerResource_ClearLastHitStreak":{"body":"ClearLastHitStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearLastHitStreak"},
"MODIFIER_ATTRIBUTE_MULTIPLE":{"body":"MODIFIER_ATTRIBUTE_MULTIPLE","description":"","prefix":"MODIFIER_ATTRIBUTE_MULTIPLE"},
"CDOTABaseAbility_SpeakAbilityConcept":{"body":"SpeakAbilityConcept(${iConcept})","description":"CDOTABaseAbility:\n, return void","prefix":"SpeakAbilityConcept"},
"MODIFIER_PROPERTY_INVISIBILITY_LEVEL":{"body":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL","description":"Value[8]modifierfunction->GetModifierInvisibilityLevel","prefix":"MODIFIER_PROPERTY_INVISIBILITY_LEVEL"},
"MODIFIER_PROPERTY_REINCARNATION":{"body":"MODIFIER_PROPERTY_REINCARNATION","description":"Value[71]modifierfunction->ReincarnateTime","prefix":"MODIFIER_PROPERTY_REINCARNATION"},
"CDOTA_Item_SetCurrentCharges":{"body":"SetCurrentCharges(${iCharges})","description":"CDOTA_Item:\nSet the number of charges on this item, return void","prefix":"SetCurrentCharges"},
"ACT_DOTA_THIRST":{"body":"ACT_DOTA_THIRST","description":"","prefix":"ACT_DOTA_THIRST"},
"MODIFIER_STATE_NOT_ON_MINIMAP":{"body":"MODIFIER_STATE_NOT_ON_MINIMAP","description":"","prefix":"MODIFIER_STATE_NOT_ON_MINIMAP"},
"DOTA_ModifyGold_PurchaseConsumable":{"body":"DOTA_ModifyGold_PurchaseConsumable","description":"","prefix":"DOTA_ModifyGold_PurchaseConsumable"},
"ACT_DOTA_CHILLING_TOUCH":{"body":"ACT_DOTA_CHILLING_TOUCH","description":"","prefix":"ACT_DOTA_CHILLING_TOUCH"},
"DOTA_MINIMAP_EVENT_RADAR":{"body":"DOTA_MINIMAP_EVENT_RADAR","description":"","prefix":"DOTA_MINIMAP_EVENT_RADAR"},
"CDOTATutorial_SetTutorialConvar":{"body":"SetTutorialConvar(${string_1}, ${string_2})","description":"CDOTATutorial:\nSet a tutorial convar, return void","prefix":"SetTutorialConvar"},
"MODIFIER_EVENT_ON_ATTACK_START":{"body":"MODIFIER_EVENT_ON_ATTACK_START","description":"Value[116]modifierfunction->OnAttackStart","prefix":"MODIFIER_EVENT_ON_ATTACK_START"},
"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT","description":"Value[21]modifierfunction->GetModifierAttackSpeedBonus_Constant","prefix":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT"},
"CBaseEntity_Kill":{"body":"Kill()","description":"CBaseEntity:\n, return void","prefix":"Kill"},
"ACT_DOTA_IDLE_RARE":{"body":"ACT_DOTA_IDLE_RARE","description":"","prefix":"ACT_DOTA_IDLE_RARE"},
"CDOTA_Modifier_Lua_Vertical_Motion_SetMotionPriority":{"body":"SetMotionPriority(${nMotionPriority})","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nSet the priority, return void","prefix":"SetMotionPriority"},
"DOTA_LOADOUT_TYPE_BODY_HEAD":{"body":"DOTA_LOADOUT_TYPE_BODY_HEAD","description":"","prefix":"DOTA_LOADOUT_TYPE_BODY_HEAD"},
"GetGoldFrostyPointsForRound":{"body":"GetGoldFrostyPointsForRound(${int_1}, ${int_2}, ${int_3})","description":", return int","prefix":"GetGoldFrostyPointsForRound"},
"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR":{"body":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR","description":"","prefix":"DOTA_DAMAGE_FLAG_IGNORES_MAGIC_ARMOR"},
"CDOTA_BaseNPC_GetPercentageBasedManaRegen":{"body":"GetPercentageBasedManaRegen()","description":"CDOTA_BaseNPC:\nThis Mana regen is derived from % bonuses (from items like Void Stone)., return float","prefix":"GetPercentageBasedManaRegen"},
"CDOTA_BaseNPC_Hold":{"body":"Hold()","description":"CDOTA_BaseNPC:\nHold position., return void","prefix":"Hold"},
"ACT_DOTA_GESTURE_ACCENT":{"body":"ACT_DOTA_GESTURE_ACCENT","description":"","prefix":"ACT_DOTA_GESTURE_ACCENT"},
"DOTA_RUNE_INVALID":{"body":"DOTA_RUNE_INVALID","description":"","prefix":"DOTA_RUNE_INVALID"},
"CDotaQuest_RemoveSubquest":{"body":"RemoveSubquest(${hSubquest})","description":"CDotaQuest:\nRemove a subquest from this quest, return void","prefix":"RemoveSubquest"},
"MODIFIER_STATE_BLIND":{"body":"MODIFIER_STATE_BLIND","description":"","prefix":"MODIFIER_STATE_BLIND"},
"DOTA_ModifyGold_CheatCommand":{"body":"DOTA_ModifyGold_CheatCommand","description":"","prefix":"DOTA_ModifyGold_CheatCommand"},
"GetTeamHeroKills":{"body":"GetTeamHeroKills(${int_1})","description":"( int teamID ), return int","prefix":"GetTeamHeroKills"},
"ACT_DOTA_STARTLE":{"body":"ACT_DOTA_STARTLE","description":"","prefix":"ACT_DOTA_STARTLE"},
"DOTA_SPEECH_SPECTATOR":{"body":"DOTA_SPEECH_SPECTATOR","description":"","prefix":"DOTA_SPEECH_SPECTATOR"},
"EmitSoundOnClient":{"body":"EmitSoundOnClient(${string_1}, ${handle_2})","description":"Play named sound only on the client for the passed in player, return void","prefix":"EmitSoundOnClient"},
"CDOTABaseGameMode_ClearExecuteOrderFilter":{"body":"ClearExecuteOrderFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls when a unit picks up an item., return void","prefix":"ClearExecuteOrderFilter"},
"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE":{"body":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE","description":"","prefix":"SUBQUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},
"CBaseAnimating_GetAttachmentOrigin":{"body":"GetAttachmentOrigin(${iAttachment})","description":"CBaseAnimating:\nGet the attachement id's origin vector., return Vector","prefix":"GetAttachmentOrigin"},
"CDOTA_Item_Lua_IsRefreshable":{"body":"IsRefreshable()","description":"CDOTA_Item_Lua:\nReturns true if this ability is refreshed by Refresher Orb., return bool","prefix":"IsRefreshable"},
"ProjectileManager_CreateLinearProjectile":{"body":"CreateLinearProjectile(${handle_1})","description":"ProjectileManager:\nCreates a linear projectile and returns the projectile ID, return int","prefix":"CreateLinearProjectile"},
"CEntityInstance_RemoveSelf":{"body":"RemoveSelf()","description":"CEntityInstance:\nDelete this entity, return void","prefix":"RemoveSelf"},
"CDOTA_BaseNPC_Hero_GetCurrentXP":{"body":"GetCurrentXP()","description":"CDOTA_BaseNPC_Hero:\nReturns the amount of XP , return int","prefix":"GetCurrentXP"},
"DOTA_LOADOUT_TYPE_HEAD":{"body":"DOTA_LOADOUT_TYPE_HEAD","description":"","prefix":"DOTA_LOADOUT_TYPE_HEAD"},
"MODIFIER_STATE_DOMINATED":{"body":"MODIFIER_STATE_DOMINATED","description":"","prefix":"MODIFIER_STATE_DOMINATED"},
"ACT_DOTA_CAST_DRAGONBREATH":{"body":"ACT_DOTA_CAST_DRAGONBREATH","description":"","prefix":"ACT_DOTA_CAST_DRAGONBREATH"},
"CDOTA_Ability_Lua_GetCustomCastErrorTarget":{"body":"GetCustomCastErrorTarget(${hTarget})","description":"CDOTA_Ability_Lua:\n(HSCRIPT hTarget) Return the error string of a failed command on a target., return string","prefix":"GetCustomCastErrorTarget"},
"CreateItem":{"body":"CreateItem(${string_1}, ${handle_2}, ${handle_3})","description":"Create a DOTA item, return handle","prefix":"CreateItem"},
"CDOTABaseGameMode_GetCustomHeroMaxLevel":{"body":"GetCustomHeroMaxLevel()","description":"CDOTABaseGameMode:\nAllows definition of the max level heroes can achieve (default is 25)., return int","prefix":"GetCustomHeroMaxLevel"},
"CDOTA_BaseNPC_Hero_GetBaseDamageMin":{"body":"GetBaseDamageMin()","description":"CDOTA_BaseNPC_Hero:\nHero damage is also affected by attributes., return int","prefix":"GetBaseDamageMin"},
"CDOTA_Item_Lua_OnAbilityPhaseStart":{"body":"OnAbilityPhaseStart()","description":"CDOTA_Item_Lua:\nCast time begins (return true for successful cast)., return bool","prefix":"OnAbilityPhaseStart"},
"ACT_DOTA_WEAVERBUG_ATTACH":{"body":"ACT_DOTA_WEAVERBUG_ATTACH","description":"","prefix":"ACT_DOTA_WEAVERBUG_ATTACH"},
"CDOTA_BaseNPC_NoTeamSelect":{"body":"NoTeamSelect()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoTeamSelect"},
"SpawnEntityListFromTableAsynchronous":{"body":"SpawnEntityListFromTableAsynchronous(${handle_1}, ${handle_2})","description":"Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete, return int","prefix":"SpawnEntityListFromTableAsynchronous"},
"CBaseEntity_IsAlive":{"body":"IsAlive()","description":"CBaseEntity:\nIs this entity alive?, return bool","prefix":"IsAlive"},
"ACT_DOTA_FLEE":{"body":"ACT_DOTA_FLEE","description":"","prefix":"ACT_DOTA_FLEE"},
"ACT_DOTA_BELLYACHE_END":{"body":"ACT_DOTA_BELLYACHE_END","description":"","prefix":"ACT_DOTA_BELLYACHE_END"},
"ACT_DOTA_CAST_REFRACTION":{"body":"ACT_DOTA_CAST_REFRACTION","description":"","prefix":"ACT_DOTA_CAST_REFRACTION"},
"DOTA_SPEECH_USER_TEAM":{"body":"DOTA_SPEECH_USER_TEAM","description":"","prefix":"DOTA_SPEECH_USER_TEAM"},
"SendFrostyPointsMessageToGC":{"body":"SendFrostyPointsMessageToGC(${handle_1})","description":", return void","prefix":"SendFrostyPointsMessageToGC"},
"CInfoData_QueryString":{"body":"QueryString(${tok}, ${pDefault})","description":"CInfoData:\nQuery string data for this key, return string","prefix":"QueryString"},
"GetWorldMaxY":{"body":"GetWorldMaxY()","description":"Gets the world's maximum Y position., return float","prefix":"GetWorldMaxY"},
"CDOTA_BaseNPC_Hero_IncrementLastHitMultikill":{"body":"IncrementLastHitMultikill()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementLastHitMultikill"},
"CDOTABaseAbility_GetSharedCooldownName":{"body":"GetSharedCooldownName()","description":"CDOTABaseAbility:\n, return string","prefix":"GetSharedCooldownName"},
"Convars_SetFloat":{"body":"SetFloat(${string_1}, ${float_2})","description":"Convars:\nSetFloat(name, val) : sets the value of the convar to the float., return void","prefix":"SetFloat"},
"DOTA_LOADOUT_TYPE_BLINK_EFFECT":{"body":"DOTA_LOADOUT_TYPE_BLINK_EFFECT","description":"","prefix":"DOTA_LOADOUT_TYPE_BLINK_EFFECT"},
"ACT_DOTA_MK_STRIKE":{"body":"ACT_DOTA_MK_STRIKE","description":"","prefix":"ACT_DOTA_MK_STRIKE"},
"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT":{"body":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT","description":"Value[39]modifierfunction->GetModifierNegativeEvasion_Constant","prefix":"MODIFIER_PROPERTY_NEGATIVE_EVASION_CONSTANT"},
"CDOTABaseGameMode_GetAlwaysShowPlayerInventory":{"body":"GetAlwaysShowPlayerInventory()","description":"CDOTABaseGameMode:\nShow the player hero's inventory in the HUD, regardless of what unit is selected., return bool","prefix":"GetAlwaysShowPlayerInventory"},
"ACT_DOTA_TELEPORT_END_REACT":{"body":"ACT_DOTA_TELEPORT_END_REACT","description":"","prefix":"ACT_DOTA_TELEPORT_END_REACT"},
"CDOTA_Item_GetPurchaser":{"body":"GetPurchaser()","description":"CDOTA_Item:\nGet the purchaser for this item., return handle","prefix":"GetPurchaser"},
"CDOTA_PlayerResource_SetOverrideSelectionEntity":{"body":"SetOverrideSelectionEntity(${nPlayerID}, ${hEntity})","description":"CDOTA_PlayerResource:\nSet the forced selection entity for a player., return void","prefix":"SetOverrideSelectionEntity"},
"DOTA_ITEM_SLOT_3":{"body":"DOTA_ITEM_SLOT_3","description":"","prefix":"DOTA_ITEM_SLOT_3"},
"CDOTA_BaseNPC_Hero_AddExperience":{"body":"AddExperience(${flXP}, ${nReason}, ${bApplyBotDifficultyScaling}, ${bIncrementTotal})","description":"CDOTA_BaseNPC_Hero:\nParams: Float XP, Bool applyBotDifficultyScaling, return bool","prefix":"AddExperience"},
"FireGameEvent":{"body":"FireGameEvent(${string_1}, ${handle_2})","description":"Fire a game event., return void","prefix":"FireGameEvent"},
"CBaseEntity_HasAttribute":{"body":"HasAttribute(${pName})","description":"CBaseEntity:\nSee if an entity has a particular attribute., return bool","prefix":"HasAttribute"},
"CDOTABaseGameMode_SetExecuteOrderFilter":{"body":"SetExecuteOrderFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetExecuteOrderFilter"},
"CDOTA_PlayerResource_SetCustomPlayerColor":{"body":"SetCustomPlayerColor(${iPlayerID}, ${r}, ${g}, ${b})","description":"CDOTA_PlayerResource:\nSet custom color for player (minimap, scoreboard, etc), return void","prefix":"SetCustomPlayerColor"},
"CEntities_FindByClassnameNearest":{"body":"FindByClassnameNearest(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by class name nearest to a point., return handle","prefix":"FindByClassnameNearest"},
"DOTA_TEAM_CUSTOM_6":{"body":"DOTA_TEAM_CUSTOM_6","description":"","prefix":"DOTA_TEAM_CUSTOM_6"},
"CDOTA_PlayerResource_IncrementDeaths":{"body":"IncrementDeaths(${iPlayerID}, ${iKillerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementDeaths"},
"CDOTA_BaseNPC_GetAttackAnimationPoint":{"body":"GetAttackAnimationPoint()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetAttackAnimationPoint"},
"DOTA_HUD_VISIBILITY_ACTION_PANEL":{"body":"DOTA_HUD_VISIBILITY_ACTION_PANEL","description":"","prefix":"DOTA_HUD_VISIBILITY_ACTION_PANEL"},
"CDOTA_PlayerResource_SetCustomBuybackCost":{"body":"SetCustomBuybackCost(${iPlayerID}, ${iGoldCost})","description":"CDOTA_PlayerResource:\nSet the buyback cost for this player., return void","prefix":"SetCustomBuybackCost"},
"ExecuteOrderFromTable":{"body":"ExecuteOrderFromTable(${handle_1})","description":"Issue an order from a script table, return void","prefix":"ExecuteOrderFromTable"},
"CEnvProjectedTexture_SetVolumetrics":{"body":"SetVolumetrics(${bOn}, ${flIntensity}, ${flNoise}, ${nPlanes}, ${flPlaneOffset})","description":"CEnvProjectedTexture:\nTurn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset, return void","prefix":"SetVolumetrics"},
"DOTA_TEAM_CUSTOM_1":{"body":"DOTA_TEAM_CUSTOM_1","description":"","prefix":"DOTA_TEAM_CUSTOM_1"},
"PATTACH_ABSORIGIN_FOLLOW":{"body":"PATTACH_ABSORIGIN_FOLLOW","description":"","prefix":"PATTACH_ABSORIGIN_FOLLOW"},
"MODIFIER_STATE_LOW_ATTACK_PRIORITY":{"body":"MODIFIER_STATE_LOW_ATTACK_PRIORITY","description":"","prefix":"MODIFIER_STATE_LOW_ATTACK_PRIORITY"},
"PrecacheUnitFromTableSync":{"body":"PrecacheUnitFromTableSync(${handle_1}, ${handle_2})","description":"Precaches a DOTA unit from a table of entity key values., return void","prefix":"PrecacheUnitFromTableSync"},
"CDOTA_BaseNPC_Hero_ModifyStrength":{"body":"ModifyStrength(${flNewStrength})","description":"CDOTA_BaseNPC_Hero:\nAdds passed value to base attribute value, then calls CalculateStatBonus., return void","prefix":"ModifyStrength"},
"CDOTABaseAbility_GetChannelledManaCostPerSecond":{"body":"GetChannelledManaCostPerSecond(${iLevel})","description":"CDOTABaseAbility:\n, return int","prefix":"GetChannelledManaCostPerSecond"},
"CDOTA_BaseNPC_IsSummoned":{"body":"IsSummoned()","description":"CDOTA_BaseNPC:\nIs this unit summoned?, return bool","prefix":"IsSummoned"},
"CDOTA_Ability_Lua_GetGoldCost":{"body":"GetGoldCost(${iLevel})","description":"CDOTA_Ability_Lua:\nReturn gold cost at the given level (-1 is current)., return int","prefix":"GetGoldCost"},
"CDOTA_BaseNPC_IsCreep":{"body":"IsCreep()","description":"CDOTA_BaseNPC:\nIs this unit a creep?, return bool","prefix":"IsCreep"},
"CDOTATutorial_StartTutorialMode":{"body":"StartTutorialMode()","description":"CDOTATutorial:\nInitialize Tutorial Mode, return void","prefix":"StartTutorialMode"},
"CDOTA_BaseNPC_IsOutOfGame":{"body":"IsOutOfGame()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsOutOfGame"},
"CBaseEntity_GetOrigin":{"body":"GetOrigin()","description":"CBaseEntity:\n, return Vector","prefix":"GetOrigin"},
"MODIFIER_EVENT_ON_ABILITY_EXECUTED":{"body":"MODIFIER_EVENT_ON_ABILITY_EXECUTED","description":"Value[125]modifierfunction->OnAbilityExecuted","prefix":"MODIFIER_EVENT_ON_ABILITY_EXECUTED"},
"DOTA_UNIT_TARGET_NONE":{"body":"DOTA_UNIT_TARGET_NONE","description":"","prefix":"DOTA_UNIT_TARGET_NONE"},
"CDOTATutorial_AddQuest":{"body":"AddQuest(${string_1}, ${int_2}, ${string_3}, ${string_4})","description":"CDOTATutorial:\nAdd a quest to the quest log, return void","prefix":"AddQuest"},
"DOTA_HEROPICK_STATE_CD_SELECT6":{"body":"DOTA_HEROPICK_STATE_CD_SELECT6","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT6"},
"CDOTA_Ability_Lua_GetConceptRecipientType":{"body":"GetConceptRecipientType()","description":"CDOTA_Ability_Lua:\nReturn who hears speech when this spell is cast., return int","prefix":"GetConceptRecipientType"},
"GlobalSys_CommandLineFloat":{"body":"CommandLineFloat(${string_1}, ${float_2})","description":"GlobalSys:\nCommandLineFloat(name) : returns the command line param as a float., return table","prefix":"CommandLineFloat"},
"DOTA_HEROPICK_STATE_CM_BAN8":{"body":"DOTA_HEROPICK_STATE_CM_BAN8","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN8"},
"CDOTA_Item_IsRecipeGenerated":{"body":"IsRecipeGenerated()","description":"CDOTA_Item:\n, return bool","prefix":"IsRecipeGenerated"},
"ACT_DOTA_CHANNEL_END_ABILITY_1":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_1","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_1"},
"DOTA_LOADOUT_TYPE_TEAM_SHOWCASE":{"body":"DOTA_LOADOUT_TYPE_TEAM_SHOWCASE","description":"","prefix":"DOTA_LOADOUT_TYPE_TEAM_SHOWCASE"},
"CDOTA_BaseNPC_ForcePlayActivityOnce":{"body":"ForcePlayActivityOnce(${nActivity})","description":"CDOTA_BaseNPC:\nPlay an activity once, and then go back to idle., return void","prefix":"ForcePlayActivityOnce"},
"CDOTAGamerules_GetGameSessionConfigValue":{"body":"GetGameSessionConfigValue(${string_1}, ${string_2})","description":"CDOTAGamerules:\nGet a string value from the game session config (map options), return string","prefix":"GetGameSessionConfigValue"},
"CDOTA_BaseNPC_SetCustomHealthLabel":{"body":"SetCustomHealthLabel(${pLabel}, ${r}, ${g}, ${b})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCustomHealthLabel"},
"CEnvProjectedTexture_SetLinearAttenuation":{"body":"SetLinearAttenuation(${flAtten})","description":"CEnvProjectedTexture:\nSet light linear attenuation value, return void","prefix":"SetLinearAttenuation"},
"ACT_DOTA_IDLE_SLEEPING":{"body":"ACT_DOTA_IDLE_SLEEPING","description":"","prefix":"ACT_DOTA_IDLE_SLEEPING"},
"CDOTA_BaseNPC_MoveToNPC":{"body":"MoveToNPC(${hNPC})","description":"CDOTA_BaseNPC:\nMove to follow a unit., return void","prefix":"MoveToNPC"},
"ACT_DOTA_LIFESTEALER_RAGE":{"body":"ACT_DOTA_LIFESTEALER_RAGE","description":"","prefix":"ACT_DOTA_LIFESTEALER_RAGE"},
"ACT_DOTA_ALCHEMIST_CONCOCTION":{"body":"ACT_DOTA_ALCHEMIST_CONCOCTION","description":"","prefix":"ACT_DOTA_ALCHEMIST_CONCOCTION"},
"UF_FAIL_CONSIDERED_HERO":{"body":"UF_FAIL_CONSIDERED_HERO","description":"","prefix":"UF_FAIL_CONSIDERED_HERO"},
"LUA_MODIFIER_MOTION_VERTICAL":{"body":"LUA_MODIFIER_MOTION_VERTICAL","description":"","prefix":"LUA_MODIFIER_MOTION_VERTICAL"},
"CDOTABaseGameMode_SetAnnouncerDisabled":{"body":"SetAnnouncerDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nMutes the in-game announcer., return void","prefix":"SetAnnouncerDisabled"},
"CDOTA_Unit_Courier_UpgradeToFlyingCourier":{"body":"UpgradeToFlyingCourier()","description":"CDOTA_Unit_Courier:\nUpgrade to a flying courier, return bool","prefix":"UpgradeToFlyingCourier"},
"CDOTA_Item_Lua_OnProjectileThink":{"body":"OnProjectileThink(${vLocation})","description":"CDOTA_Item_Lua:\n(Vector vLocation) Projectile is actively moving., return void","prefix":"OnProjectileThink"},
"CDOTAGamerules_GetPlayerCustomGameAccountRecord":{"body":"GetPlayerCustomGameAccountRecord(${int_1})","description":"CDOTAGamerules:\n(Preview/Unreleased) Gets the player's custom game account record, as it looked at the start of this session, return table","prefix":"GetPlayerCustomGameAccountRecord"},
"ACT_DOTA_BELLYACHE_LOOP":{"body":"ACT_DOTA_BELLYACHE_LOOP","description":"","prefix":"ACT_DOTA_BELLYACHE_LOOP"},
"DOTA_UNIT_TARGET_FLAG_INVULNERABLE":{"body":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_INVULNERABLE"},
"PATTACH_CUSTOMORIGIN_FOLLOW":{"body":"PATTACH_CUSTOMORIGIN_FOLLOW","description":"","prefix":"PATTACH_CUSTOMORIGIN_FOLLOW"},
"CDOTA_BaseNPC_Hero_IncrementAssists":{"body":"IncrementAssists(${iKillerID})","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementAssists"},
"IsClient":{"body":"IsClient()","description":"Returns true if this is lua running from the client.dll., return bool","prefix":"IsClient"},
"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY","description":"Value[23]modifierfunction->GetModifierAttackSpeedBonus_Constant_Secondary","prefix":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_SECONDARY"},
"CDOTAGamerules_SendCustomMessage":{"body":"SendCustomMessage(${string_1}, ${int_2}, ${int_3})","description":"CDOTAGamerules:\nSends a message on behalf of a player., return void","prefix":"SendCustomMessage"},
"CEntities_FindAllByClassname":{"body":"FindAllByClassname(${string_1})","description":"CEntities:\nFinds all entities by class name. Returns an array containing all the found entities., return table","prefix":"FindAllByClassname"},
"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS":{"body":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS","description":"Value[65]modifierfunction->GetModifierBonusStats_Intellect","prefix":"MODIFIER_PROPERTY_STATS_INTELLECT_BONUS"},
"ACT_DOTA_CENTAUR_STAMPEDE":{"body":"ACT_DOTA_CENTAUR_STAMPEDE","description":"","prefix":"ACT_DOTA_CENTAUR_STAMPEDE"},
"CDOTA_PlayerResource_GetCustomBuybackCost":{"body":"GetCustomBuybackCost(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetCustomBuybackCost"},
"CBaseEntity_GetBaseVelocity":{"body":"GetBaseVelocity()","description":"CBaseEntity:\nGet Base? velocity., return Vector","prefix":"GetBaseVelocity"},
"CDOTA_PlayerResource_GetSelectedHeroID":{"body":"GetSelectedHeroID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetSelectedHeroID"},
"CDOTA_BaseNPC_AddItemByName":{"body":"AddItemByName(${pszItemName})","description":"CDOTA_BaseNPC:\nAdd an item to this unit's inventory., return handle","prefix":"AddItemByName"},
"CDOTA_PlayerResource_IsValidPlayerID":{"body":"IsValidPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidPlayerID"},
"CDOTA_BaseNPC_AddAbility":{"body":"AddAbility(${pszAbilityName})","description":"CDOTA_BaseNPC:\nAdd an ability to this unit by name., return handle","prefix":"AddAbility"},
"CDOTA_Modifier_Lua_OnIntervalThink":{"body":"OnIntervalThink()","description":"CDOTA_Modifier_Lua:\nRuns when the think interval occurs., return void","prefix":"OnIntervalThink"},
"CDOTA_Modifier_Lua_GetStatusEffectName":{"body":"GetStatusEffectName()","description":"CDOTA_Modifier_Lua:\nReturn the name of the status effect particle system that is created while this modifier is active., return string","prefix":"GetStatusEffectName"},
"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING","description":"","prefix":"DOTA_MINIMAP_EVENT_ENEMY_TELEPORTING"},
"CDOTA_BaseNPC_IsBarracks":{"body":"IsBarracks()","description":"CDOTA_BaseNPC:\nIs this unit a Barracks?, return bool","prefix":"IsBarracks"},
"CDOTA_PlayerResource_IncrementLastHitMultikill":{"body":"IncrementLastHitMultikill(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementLastHitMultikill"},
"CDOTA_BaseNPC_GetLastIdleChangeTime":{"body":"GetLastIdleChangeTime()","description":"CDOTA_BaseNPC:\nGet the last game time that this unit switched to/from idle state., return float","prefix":"GetLastIdleChangeTime"},
"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP","description":"","prefix":"ACT_DOTA_RATTLETRAP_HOOKSHOT_LOOP"},
"CDOTA_BaseNPC_IsInvisible":{"body":"IsInvisible()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsInvisible"},
"CDOTA_BaseNPC_IsBlockDisabled":{"body":"IsBlockDisabled()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsBlockDisabled"},
"CDOTA_Item_LaunchLoot":{"body":"LaunchLoot(${bAutoUse}, ${flHeight}, ${flDuration}, ${vEndPoint})","description":"CDOTA_Item:\n, return void","prefix":"LaunchLoot"},
"CDOTA_PlayerResource_GetBroadcasterChannelSlot":{"body":"GetBroadcasterChannelSlot(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetBroadcasterChannelSlot"},
"CDOTA_PlayerResource_GetTimeOfLastConsumablePurchase":{"body":"GetTimeOfLastConsumablePurchase(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetTimeOfLastConsumablePurchase"},
"CBodyComponent_AddVelocity":{"body":"AddVelocity(${Vector_1}, ${Vector_2})","description":"CBodyComponent:\nAdd linear and angular velocity to the physics object, return void","prefix":"AddVelocity"},
"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_LOWEST"},
"CDOTA_BaseNPC_Hero_SetTimeUntilRespawn":{"body":"SetTimeUntilRespawn(${time})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetTimeUntilRespawn"},
"CDOTABaseAbility_ProcsMagicStick":{"body":"ProcsMagicStick()","description":"CDOTABaseAbility:\n, return bool","prefix":"ProcsMagicStick"},
"ACT_DOTA_MINI_TAUNT":{"body":"ACT_DOTA_MINI_TAUNT","description":"","prefix":"ACT_DOTA_MINI_TAUNT"},
"CDOTA_BaseNPC_SetCursorPosition":{"body":"SetCursorPosition(${vLocation})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCursorPosition"},
"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE","description":"Value[29]modifierfunction->GetModifierTotalDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE"},
"CDOTA_Item_RequiresCharges":{"body":"RequiresCharges()","description":"CDOTA_Item:\n, return bool","prefix":"RequiresCharges"},
"CDOTA_PlayerResource_GetClaimedMisses":{"body":"GetClaimedMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetClaimedMisses"},
"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_PROTECT"},
"CDOTA_BaseNPC_InterruptMotionControllers":{"body":"InterruptMotionControllers(${bFindClearSpace})","description":"CDOTA_BaseNPC:\n, return void","prefix":"InterruptMotionControllers"},
"PlayerInstanceFromIndex":{"body":"PlayerInstanceFromIndex(${int_1})","description":"Get a script instance of a player by index., return handle","prefix":"PlayerInstanceFromIndex"},
"CDebugOverlayScriptHelper_PushAndClearDebugOverlayScope":{"body":"PushAndClearDebugOverlayScope(${utlstringtoken_1})","description":"CDebugOverlayScriptHelper:\nPushes an identifier used to group overlays. Deletes all existing overlays using this overlay id., return void","prefix":"PushAndClearDebugOverlayScope"},
"CDOTABaseAbility_MarkAbilityButtonDirty":{"body":"MarkAbilityButtonDirty()","description":"CDOTABaseAbility:\nMark the ability button for this ability as needing a refresh., return void","prefix":"MarkAbilityButtonDirty"},
"CDOTABaseAbility_IsHiddenWhenStolen":{"body":"IsHiddenWhenStolen()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsHiddenWhenStolen"},
"DOTA_MAX_TEAM_PLAYERS":{"body":"DOTA_MAX_TEAM_PLAYERS","description":"Value[24]DOTALimits_t->Max number of non-spectator players supported.","prefix":"DOTA_MAX_TEAM_PLAYERS"},
"ACT_DOTA_WAIT_IDLE":{"body":"ACT_DOTA_WAIT_IDLE","description":"","prefix":"ACT_DOTA_WAIT_IDLE"},
"CDOTAGamerules_MakeTeamLose":{"body":"MakeTeamLose(${int_1})","description":"CDOTAGamerules:\nMakes ths specified team lose, return void","prefix":"MakeTeamLose"},
"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK":{"body":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK","description":"","prefix":"DOTA_DAMAGE_FLAG_BYPASSES_BLOCK"},
"CDOTA_BaseNPC_SetAcquisitionRange":{"body":"SetAcquisitionRange(${nRange})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetAcquisitionRange"},
"QUEST_TEXT_REPLACE_VALUE_REWARD":{"body":"QUEST_TEXT_REPLACE_VALUE_REWARD","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_REWARD"},
"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK","description":"","prefix":"DOTA_MINIMAP_EVENT_BASE_UNDER_ATTACK"},
"PATTACH_MAIN_VIEW":{"body":"PATTACH_MAIN_VIEW","description":"","prefix":"PATTACH_MAIN_VIEW"},
"CBaseEntity_IsPlayer":{"body":"IsPlayer()","description":"CBaseEntity:\nIs this entity a player?, return bool","prefix":"IsPlayer"},
"DOTA_TEAM_CUSTOM_MIN":{"body":"DOTA_TEAM_CUSTOM_MIN","description":"","prefix":"DOTA_TEAM_CUSTOM_MIN"},
"ACT_DOTA_STATIC_STORM":{"body":"ACT_DOTA_STATIC_STORM","description":"","prefix":"ACT_DOTA_STATIC_STORM"},
"ACT_DOTA_GREET":{"body":"ACT_DOTA_GREET","description":"","prefix":"ACT_DOTA_GREET"},
"DOTA_ModifyGold_AbilityCost":{"body":"DOTA_ModifyGold_AbilityCost","description":"","prefix":"DOTA_ModifyGold_AbilityCost"},
"CDOTA_BaseNPC_Hero_GetKills":{"body":"GetKills()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return int","prefix":"GetKills"},
"DOTA_LOADOUT_TYPE_WEATHER":{"body":"DOTA_LOADOUT_TYPE_WEATHER","description":"","prefix":"DOTA_LOADOUT_TYPE_WEATHER"},
"MODIFIER_PROPERTY_SUPER_ILLUSION":{"body":"MODIFIER_PROPERTY_SUPER_ILLUSION","description":"Value[105]modifierfunction->GetModifierSuperIllusion","prefix":"MODIFIER_PROPERTY_SUPER_ILLUSION"},
"MODIFIER_PROPERTY_FIXED_NIGHT_VISION":{"body":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION","description":"Value[98]modifierfunction->GetFixedNightVision","prefix":"MODIFIER_PROPERTY_FIXED_NIGHT_VISION"},
"CDOTA_BaseNPC_SetAttacking":{"body":"SetAttacking(${hAttackTarget})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetAttacking"},
"ACT_DOTA_RATTLETRAP_BATTERYASSAULT":{"body":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT","description":"","prefix":"ACT_DOTA_RATTLETRAP_BATTERYASSAULT"},
"ACT_DOTA_ES_STONE_CALLER":{"body":"ACT_DOTA_ES_STONE_CALLER","description":"","prefix":"ACT_DOTA_ES_STONE_CALLER"},
"CDOTA_PlayerResource_GetTeamPlayerCount":{"body":"GetTeamPlayerCount()","description":"CDOTA_PlayerResource:\nPlayers on a valid team (radiant, dire, or custom*) who haven't abandoned the game, return int","prefix":"GetTeamPlayerCount"},
"CDOTAGamerules_SetRuneSpawnTime":{"body":"SetRuneSpawnTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time between rune spawns., return void","prefix":"SetRuneSpawnTime"},
"CDOTA_Buff_Destroy":{"body":"Destroy()","description":"CDOTA_Buff:\nRun all associated destroy functions, then remove the modifier., return void","prefix":"Destroy"},
"DOTA_ModifyGold_Building":{"body":"DOTA_ModifyGold_Building","description":"","prefix":"DOTA_ModifyGold_Building"},
"CDOTABaseAbility_IsOwnersGoldEnoughForUpgrade":{"body":"IsOwnersGoldEnoughForUpgrade()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsOwnersGoldEnoughForUpgrade"},
"CDebugOverlayScriptHelper_RemoveAllInScope":{"body":"RemoveAllInScope(${utlstringtoken_1})","description":"CDebugOverlayScriptHelper:\nRemoves all overlays marked with a specific identifier, regardless of their lifetime., return void","prefix":"RemoveAllInScope"},
"DOTA_MINIMAP_EVENT_HINT_LOCATION":{"body":"DOTA_MINIMAP_EVENT_HINT_LOCATION","description":"","prefix":"DOTA_MINIMAP_EVENT_HINT_LOCATION"},
"CDOTA_BaseNPC_Hero_HasOwnerAbandoned":{"body":"HasOwnerAbandoned()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"HasOwnerAbandoned"},
"CDOTAGamerules_GetCustomGameTeamMaxPlayers":{"body":"GetCustomGameTeamMaxPlayers(${int_1})","description":"CDOTAGamerules:\nGet whether a team is selectable during game setup, return int","prefix":"GetCustomGameTeamMaxPlayers"},
"CDOTA_Modifier_Lua_OnDestroy":{"body":"OnDestroy()","description":"CDOTA_Modifier_Lua:\nRuns when the modifier is destroyed., return void","prefix":"OnDestroy"},
"DOTA_LOADOUT_TYPE_COUNT":{"body":"DOTA_LOADOUT_TYPE_COUNT","description":"","prefix":"DOTA_LOADOUT_TYPE_COUNT"},
"ACT_DOTA_SLEEPING_END":{"body":"ACT_DOTA_SLEEPING_END","description":"","prefix":"ACT_DOTA_SLEEPING_END"},
"CDOTA_Item_Lua_CastFilterResultLocation":{"body":"CastFilterResultLocation(${vLocation})","description":"CDOTA_Item_Lua:\n(Vector vLocation) Determine whether an issued command on a location is valid., return int","prefix":"CastFilterResultLocation"},
"ShowMessage":{"body":"ShowMessage(${string_1})","description":"Print a hud message on all clients, return void","prefix":"ShowMessage"},
"CreateItemOnPositionSync":{"body":"CreateItemOnPositionSync(${Vector_1}, ${handle_2})","description":"Create a physical item at a given location, return handle","prefix":"CreateItemOnPositionSync"},
"CSceneEntity_Cancel":{"body":"Cancel()","description":"CSceneEntity:\nCancel scene playback, return void","prefix":"Cancel"},
"FireEntityIOInputVec":{"body":"FireEntityIOInputVec(${ehandle_1}, ${string_2}, ${Vector_3})","description":"Fire Entity's Action Input with passed Vector - you own the memory, return void","prefix":"FireEntityIOInputVec"},
"ACT_DOTA_ATTACK":{"body":"ACT_DOTA_ATTACK","description":"","prefix":"ACT_DOTA_ATTACK"},
"DOTA_ATTRIBUTE_INVALID":{"body":"DOTA_ATTRIBUTE_INVALID","description":"","prefix":"DOTA_ATTRIBUTE_INVALID"},
"DOTA_LOADOUT_TYPE_LOADING_SCREEN":{"body":"DOTA_LOADOUT_TYPE_LOADING_SCREEN","description":"","prefix":"DOTA_LOADOUT_TYPE_LOADING_SCREEN"},
"DOTA_UNIT_CAP_NO_ATTACK":{"body":"DOTA_UNIT_CAP_NO_ATTACK","description":"","prefix":"DOTA_UNIT_CAP_NO_ATTACK"},
"CDOTA_PlayerResource_HasSelectedHero":{"body":"HasSelectedHero(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HasSelectedHero"},
"CDOTA_Item_Physical_SetContainedItem":{"body":"SetContainedItem(${hItem})","description":"CDOTA_Item_Physical:\nSet the contained item., return void","prefix":"SetContainedItem"},
"MODIFIER_PROPERTY_IS_ILLUSION":{"body":"MODIFIER_PROPERTY_IS_ILLUSION","description":"Value[103]modifierfunction->GetIsIllusion","prefix":"MODIFIER_PROPERTY_IS_ILLUSION"},
"CDOTA_BaseNPC_SetBaseDamageMax":{"body":"SetBaseDamageMax(${nMax})","description":"CDOTA_BaseNPC:\nSets the maximum base damage., return void","prefix":"SetBaseDamageMax"},
"ACT_DOTA_ITEM_LOOK":{"body":"ACT_DOTA_ITEM_LOOK","description":"","prefix":"ACT_DOTA_ITEM_LOOK"},
"CDOTAGamerules_GetDroppedItem":{"body":"GetDroppedItem(${int_1})","description":"CDOTAGamerules:\nGets the Xth dropped item, return handle","prefix":"GetDroppedItem"},
"DOTA_DEFAULT_MAX_TEAM_PLAYERS":{"body":"DOTA_DEFAULT_MAX_TEAM_PLAYERS","description":"Value[10]DOTALimits_t->Default number of non-spectator players supported.","prefix":"DOTA_DEFAULT_MAX_TEAM_PLAYERS"},
"UF_FAIL_COURIER":{"body":"UF_FAIL_COURIER","description":"","prefix":"UF_FAIL_COURIER"},
"CDOTABaseAbility_GetCaster":{"body":"GetCaster()","description":"CDOTABaseAbility:\n, return handle","prefix":"GetCaster"},
"CDOTA_BaseNPC_Hero_SetRespawnPosition":{"body":"SetRespawnPosition(${vOrigin})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetRespawnPosition"},
"CDOTA_PlayerResource_GetKillsDoneToHero":{"body":"GetKillsDoneToHero(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetKillsDoneToHero"},
"DOTA_INVENTORY_ALLOW_STASH":{"body":"DOTA_INVENTORY_ALLOW_STASH","description":"","prefix":"DOTA_INVENTORY_ALLOW_STASH"},
"CDOTA_BaseNPC_Hero_PerformTaunt":{"body":"PerformTaunt()","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"PerformTaunt"},
"DOTA_PLAYER_LOADOUT_START":{"body":"DOTA_PLAYER_LOADOUT_START","description":"","prefix":"DOTA_PLAYER_LOADOUT_START"},
"ACT_DOTA_INTRO_LOOP":{"body":"ACT_DOTA_INTRO_LOOP","description":"","prefix":"ACT_DOTA_INTRO_LOOP"},
"CDOTA_BaseNPC_Hero_GetStrength":{"body":"GetStrength()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetStrength"},
"CDOTA_Item_IsDisassemblable":{"body":"IsDisassemblable()","description":"CDOTA_Item:\n, return bool","prefix":"IsDisassemblable"},
"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS":{"body":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS","description":"Value[152]modifierfunction->GetActivityTranslationModifiers","prefix":"MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS"},
"CDOTA_Ability_Nian_Dive_SetPlaybackRate":{"body":"SetPlaybackRate(${flRate})","description":"CDOTA_Ability_Nian_Dive:\nOverride playbackrate, return void","prefix":"SetPlaybackRate"},
"MODIFIER_STATE_INVISIBLE":{"body":"MODIFIER_STATE_INVISIBLE","description":"","prefix":"MODIFIER_STATE_INVISIBLE"},
"ACT_DOTA_KILLTAUNT":{"body":"ACT_DOTA_KILLTAUNT","description":"","prefix":"ACT_DOTA_KILLTAUNT"},
"CDOTA_BaseNPC_GetBaseMaxHealth":{"body":"GetBaseMaxHealth()","description":"CDOTA_BaseNPC:\nGets the base max health value., return float","prefix":"GetBaseMaxHealth"},
"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS":{"body":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS","description":"Value[70]modifierfunction->GetModifierProjectileSpeedBonus","prefix":"MODIFIER_PROPERTY_PROJECTILE_SPEED_BONUS"},
"CDOTA_BaseNPC_SetMana":{"body":"SetMana(${flMana})","description":"CDOTA_BaseNPC:\nSet the mana on this unit., return void","prefix":"SetMana"},
"UF_FAIL_CUSTOM":{"body":"UF_FAIL_CUSTOM","description":"","prefix":"UF_FAIL_CUSTOM"},
"DOTA_ITEM_SLOT_1":{"body":"DOTA_ITEM_SLOT_1","description":"","prefix":"DOTA_ITEM_SLOT_1"},
"CDOTA_BaseNPC_Hero_SetPrimaryAttribute":{"body":"SetPrimaryAttribute(${nPrimaryAttribute})","description":"CDOTA_BaseNPC_Hero:\nSet this hero's primary attribute value., return void","prefix":"SetPrimaryAttribute"},
"UF_FAIL_DOMINATED":{"body":"UF_FAIL_DOMINATED","description":"","prefix":"UF_FAIL_DOMINATED"},
"CDOTA_BaseNPC_Hero_GetAgility":{"body":"GetAgility()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetAgility"},
"CDOTA_Modifier_Lua_Motion_Both_ApplyVerticalMotionController":{"body":"ApplyVerticalMotionController()","description":"CDOTA_Modifier_Lua_Motion_Both:\nStarts the vertical motion controller effects for this buff.  Returns true if successful., return bool","prefix":"ApplyVerticalMotionController"},
"CDOTA_Item_Lua_OnInventoryContentsChanged":{"body":"OnInventoryContentsChanged()","description":"CDOTA_Item_Lua:\nCaster inventory changed., return void","prefix":"OnInventoryContentsChanged"},
"GetGroundHeight":{"body":"GetGroundHeight(${Vector_1}, ${handle_2})","description":", return float","prefix":"GetGroundHeight"},
"GridNav_IsNearbyTree":{"body":"IsNearbyTree(${Vector_1}, ${float_2}, ${bool_3})","description":"GridNav:\n(position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point, return bool","prefix":"IsNearbyTree"},
"CBaseEntity_SetConstraint":{"body":"SetConstraint(${vPos})","description":"CBaseEntity:\nSet the position of the constraint., return void","prefix":"SetConstraint"},
"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT":{"body":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT","description":"Value[26]modifierfunction->GetModifierAttackPointConstant","prefix":"MODIFIER_PROPERTY_ATTACK_POINT_CONSTANT"},
"CDOTA_Item_GetShareability":{"body":"GetShareability()","description":"CDOTA_Item:\n, return int","prefix":"GetShareability"},
"CDOTA_BaseNPC_Hero_ClearLastHitMultikill":{"body":"ClearLastHitMultikill()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"ClearLastHitMultikill"},
"CDOTA_BaseNPC_GetTotalPurchasedUpgradeGoldCost":{"body":"GetTotalPurchasedUpgradeGoldCost()","description":"CDOTA_BaseNPC:\nGet how much gold has been spent on ability upgrades., return int","prefix":"GetTotalPurchasedUpgradeGoldCost"},
"CDOTA_PlayerResource_SetCustomBuybackCooldown":{"body":"SetCustomBuybackCooldown(${iPlayerID}, ${flCooldownTime})","description":"CDOTA_PlayerResource:\nSet the buyback cooldown for this player., return void","prefix":"SetCustomBuybackCooldown"},
"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY":{"body":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY","description":"","prefix":"DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY"},
"ACT_DOTA_AREA_DENY":{"body":"ACT_DOTA_AREA_DENY","description":"","prefix":"ACT_DOTA_AREA_DENY"},
"CBaseFlex_GetCurrentScene":{"body":"GetCurrentScene()","description":"CBaseFlex:\nReturns the instance of the oldest active scene entity (if any)., return handle","prefix":"GetCurrentScene"},
"CBaseEntity_GetUpVector":{"body":"GetUpVector()","description":"CBaseEntity:\nGet the up vector of the entity., return Vector","prefix":"GetUpVector"},
"MODIFIER_STATE_FROZEN":{"body":"MODIFIER_STATE_FROZEN","description":"","prefix":"MODIFIER_STATE_FROZEN"},
"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR":{"body":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR","description":"","prefix":"DOTA_DAMAGE_FLAG_IGNORES_PHYSICAL_ARMOR"},
"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT":{"body":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT","description":"","prefix":"DOTA_DAMAGE_FLAG_NO_DIRECTOR_EVENT"},
"CDotaQuest_GetSubquestByName":{"body":"GetSubquestByName(${pszName})","description":"CDotaQuest:\nFinds a subquest from this quest by name, return handle","prefix":"GetSubquestByName"},
"CDOTA_Ability_Lua_OnInventoryContentsChanged":{"body":"OnInventoryContentsChanged()","description":"CDOTA_Ability_Lua:\nCaster inventory changed., return void","prefix":"OnInventoryContentsChanged"},
"CDOTABaseAbility_RefCountsModifiers":{"body":"RefCountsModifiers()","description":"CDOTABaseAbility:\n, return bool","prefix":"RefCountsModifiers"},
"DOTA_HEROPICK_STATE_CM_BAN6":{"body":"DOTA_HEROPICK_STATE_CM_BAN6","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN6"},
"DOTA_HUD_VISIBILITY_INVENTORY_PANEL":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_PANEL"},
"DOTA_HEROPICK_STATE_CM_SELECT7":{"body":"DOTA_HEROPICK_STATE_CM_SELECT7","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT7"},
"MODIFIER_PROPERTY_AVOID_DAMAGE":{"body":"MODIFIER_PROPERTY_AVOID_DAMAGE","description":"Value[40]modifierfunction->GetModifierAvoidDamage","prefix":"MODIFIER_PROPERTY_AVOID_DAMAGE"},
"CMarkupVolumeTagged_HasTag":{"body":"HasTag(${pszTagName})","description":"CMarkupVolumeTagged:\nDoes this volume have the given tag., return bool","prefix":"HasTag"},
"MODIFIER_FUNCTION_INVALID":{"body":"MODIFIER_FUNCTION_INVALID","description":"","prefix":"MODIFIER_FUNCTION_INVALID"},
"CBaseAnimating_SetPoseParameter":{"body":"SetPoseParameter(${szName}, ${fValue})","description":"CBaseAnimating:\nSet the specified pose parameter to the specified value., return float","prefix":"SetPoseParameter"},
"CDOTA_BaseNPC_MoveToPositionAggressive":{"body":"MoveToPositionAggressive(${vDest})","description":"CDOTA_BaseNPC:\nIssue an Attack-Move-To command., return void","prefix":"MoveToPositionAggressive"},
"MODIFIER_STATE_NIGHTMARED":{"body":"MODIFIER_STATE_NIGHTMARED","description":"","prefix":"MODIFIER_STATE_NIGHTMARED"},
"CDOTAGamerules_DidMatchSignoutTimeOut":{"body":"DidMatchSignoutTimeOut()","description":"CDOTAGamerules:\ntrue when we have waited some time after end of the game and not received signout, return bool","prefix":"DidMatchSignoutTimeOut"},
"DOTA_LOADOUT_TYPE_ACTION_ITEM":{"body":"DOTA_LOADOUT_TYPE_ACTION_ITEM","description":"","prefix":"DOTA_LOADOUT_TYPE_ACTION_ITEM"},
"CDOTABaseAbility_IsSharedWithTeammates":{"body":"IsSharedWithTeammates()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsSharedWithTeammates"},
"CDOTA_BaseNPC_Hero_IncrementKills":{"body":"IncrementKills(${iVictimID})","description":"CDOTA_BaseNPC_Hero:\nPassed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource., return void","prefix":"IncrementKills"},
"DOTA_HEROPICK_STATE_CD_SELECT3":{"body":"DOTA_HEROPICK_STATE_CD_SELECT3","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT3"},
"DOTA_ModifyGold_RoshanKill":{"body":"DOTA_ModifyGold_RoshanKill","description":"","prefix":"DOTA_ModifyGold_RoshanKill"},
"CEntityInstance_GetClassname":{"body":"GetClassname()","description":"CEntityInstance:\n, return string","prefix":"GetClassname"},
"CDOTA_BaseNPC_Hero_GetGoldBounty":{"body":"GetGoldBounty()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetGoldBounty"},
"CDOTA_BaseNPC_GetLevel":{"body":"GetLevel()","description":"CDOTA_BaseNPC:\nReturns the level of this unit., return int","prefix":"GetLevel"},
"CCustomGameEventManager_RegisterListener":{"body":"RegisterListener(${string_1}, ${handle_2})","description":"CCustomGameEventManager:\n( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later., return int","prefix":"RegisterListener"},
"CDOTA_Buff_ForceRefresh":{"body":"ForceRefresh()","description":"CDOTA_Buff:\nRun all associated refresh functions on this modifier as if it was re-applied., return void","prefix":"ForceRefresh"},
"CDOTA_Modifier_Lua_GetAuraSearchFlags":{"body":"GetAuraSearchFlags()","description":"CDOTA_Modifier_Lua:\nReturn the unit flags this aura respects when placing buffs., return int","prefix":"GetAuraSearchFlags"},
"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_MELEE_ONLY"},
"CDOTA_PlayerResource_IncrementLastHitStreak":{"body":"IncrementLastHitStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementLastHitStreak"},
"DOTA_TEAM_CUSTOM_3":{"body":"DOTA_TEAM_CUSTOM_3","description":"","prefix":"DOTA_TEAM_CUSTOM_3"},
"ACT_DOTA_ECHO_SLAM":{"body":"ACT_DOTA_ECHO_SLAM","description":"","prefix":"ACT_DOTA_ECHO_SLAM"},
"Say":{"body":"Say(${handle_1}, ${string_2}, ${bool_3})","description":"Have Entity say string, and teamOnly or not, return void","prefix":"Say"},
"CDOTA_Item_Lua_OnChannelThink":{"body":"OnChannelThink(${flInterval})","description":"CDOTA_Item_Lua:\n(float flInterval) Channeling is taking place., return void","prefix":"OnChannelThink"},
"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT","description":"Value[10]modifierfunction->GetModifierMoveSpeedBonus_Constant","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT"},
"DOTA_HEROPICK_STATE_CD_SELECT10":{"body":"DOTA_HEROPICK_STATE_CD_SELECT10","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT10"},
"CDOTABaseAbility_GetMaxLevel":{"body":"GetMaxLevel()","description":"CDOTABaseAbility:\n, return int","prefix":"GetMaxLevel"},
"CScriptParticleManager_SetParticleControlForward":{"body":"SetParticleControlForward(${int_1}, ${int_2}, ${Vector_3})","description":"CScriptParticleManager:\n(int nFXIndex, int nPoint, vForward), return void","prefix":"SetParticleControlForward"},
"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION":{"body":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION","description":"Value[155]modifierfunction->GetModifierProvidesFOWVision","prefix":"MODIFIER_PROPERTY_PROVIDES_FOW_POSITION"},
"ACT_DOTA_CAGED_CREEP_RAGE_OUT":{"body":"ACT_DOTA_CAGED_CREEP_RAGE_OUT","description":"","prefix":"ACT_DOTA_CAGED_CREEP_RAGE_OUT"},
"CDOTA_PlayerResource_IsFakeClient":{"body":"IsFakeClient(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsFakeClient"},
"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL":{"body":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL","description":"Value[84]modifierfunction->GetModifierPhysical_ConstantBlockSpecial","prefix":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK_SPECIAL"},
"CDOTA_BaseNPC_IsOpposingTeam":{"body":"IsOpposingTeam(${nTeam})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsOpposingTeam"},
"CDOTA_SimpleObstruction_IsEnabled":{"body":"IsEnabled()","description":"CDOTA_SimpleObstruction:\nReturns whether the obstruction is currently active, return bool","prefix":"IsEnabled"},
"CDOTA_BaseNPC_GetCurrentActiveAbility":{"body":"GetCurrentActiveAbility()","description":"CDOTA_BaseNPC:\nGet the ability this unit is currently casting., return handle","prefix":"GetCurrentActiveAbility"},
"CDOTABaseAbility_GetHeroLevelRequiredToUpgrade":{"body":"GetHeroLevelRequiredToUpgrade()","description":"CDOTABaseAbility:\n, return int","prefix":"GetHeroLevelRequiredToUpgrade"},
"CDOTA_BaseNPC_Hero_SpendGold":{"body":"SpendGold(${iCost}, ${iReason})","description":"CDOTA_BaseNPC_Hero:\nArgs: int nGold, int nReason, return void","prefix":"SpendGold"},
"UF_FAIL_HERO":{"body":"UF_FAIL_HERO","description":"","prefix":"UF_FAIL_HERO"},
"CDOTA_BaseNPC_GetAttackTarget":{"body":"GetAttackTarget()","description":"CDOTA_BaseNPC:\n, return handle","prefix":"GetAttackTarget"},
"CDOTA_BaseNPC_SetNeverMoveToClearSpace":{"body":"SetNeverMoveToClearSpace(${neverMoveToClearSpace})","description":"CDOTA_BaseNPC:\nIf set to true, we will never attempt to move this unit to clear space, even when it unphases., return void","prefix":"SetNeverMoveToClearSpace"},
"CDOTA_BaseNPC_GetCursorPosition":{"body":"GetCursorPosition()","description":"CDOTA_BaseNPC:\n, return Vector","prefix":"GetCursorPosition"},
"DOTA_ABILITY_BEHAVIOR_POINT":{"body":"DOTA_ABILITY_BEHAVIOR_POINT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_POINT"},
"DoEntFire":{"body":"DoEntFire(${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6})","description":"#EntFire:Generate and entity i/o event, return void","prefix":"DoEntFire"},
"CDOTA_Modifier_Lua_DestroyOnExpire":{"body":"DestroyOnExpire()","description":"CDOTA_Modifier_Lua:\nTrue/false if this buff is removed when the duration expires., return bool","prefix":"DestroyOnExpire"},
"CDOTA_BaseNPC_Hero_ClearLastHitStreak":{"body":"ClearLastHitStreak()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"ClearLastHitStreak"},
"CDOTA_PlayerResource_GetHeroDamageTaken":{"body":"GetHeroDamageTaken(${iPlayerID}, ${bTotal})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetHeroDamageTaken"},
"CDOTA_BaseNPC_Stop":{"body":"Stop()","description":"CDOTA_BaseNPC:\nStop the current order., return void","prefix":"Stop"},
"EmitAnnouncerSound":{"body":"EmitAnnouncerSound(${string_1})","description":"Emit an announcer sound for all players., return void","prefix":"EmitAnnouncerSound"},
"CBasePlayer_GetHMDAvatar":{"body":"GetHMDAvatar()","description":"CBasePlayer:\nReturns the HMD Avatar entity for this player if it exists., return handle","prefix":"GetHMDAvatar"},
"CDOTA_Modifier_Lua_HeroEffectPriority":{"body":"HeroEffectPriority()","description":"CDOTA_Modifier_Lua:\nRelationship of this hero effect with those from other buffs (higher is more likely to be shown)., return int","prefix":"HeroEffectPriority"},
"MODIFIER_ATTRIBUTE_NONE":{"body":"MODIFIER_ATTRIBUTE_NONE","description":"","prefix":"MODIFIER_ATTRIBUTE_NONE"},
"ACT_DOTA_ROQUELAIRE_LAND":{"body":"ACT_DOTA_ROQUELAIRE_LAND","description":"","prefix":"ACT_DOTA_ROQUELAIRE_LAND"},
"CDOTA_BaseNPC_ManageModelChanges":{"body":"ManageModelChanges()","description":"CDOTA_BaseNPC:\n, return void","prefix":"ManageModelChanges"},
"MODIFIER_PROPERTY_IS_SCEPTER":{"body":"MODIFIER_PROPERTY_IS_SCEPTER","description":"Value[151]modifierfunction->GetModifierScepter","prefix":"MODIFIER_PROPERTY_IS_SCEPTER"},
"SendFrostivusTimeElapsedToGC":{"body":"SendFrostivusTimeElapsedToGC()","description":", return void","prefix":"SendFrostivusTimeElapsedToGC"},
"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN":{"body":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN","description":"","prefix":"DOTA_INVENTORY_ALLOW_DROP_AT_FOUNTAIN"},
"CDOTA_Modifier_Lua_GetAttributes":{"body":"GetAttributes()","description":"CDOTA_Modifier_Lua:\nReturn the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t, return int","prefix":"GetAttributes"},
"CDOTABaseAbility_IncrementModifierRefCount":{"body":"IncrementModifierRefCount()","description":"CDOTABaseAbility:\n, return void","prefix":"IncrementModifierRefCount"},
"CDebugOverlayScriptHelper_PopDebugOverlayScope":{"body":"PopDebugOverlayScope()","description":"CDebugOverlayScriptHelper:\nPops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch., return void","prefix":"PopDebugOverlayScope"},
"CDOTA_BaseNPC_Hero_GetAgilityGain":{"body":"GetAgilityGain()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetAgilityGain"},
"CDOTA_BaseNPC_GetCursorCastTarget":{"body":"GetCursorCastTarget()","description":"CDOTA_BaseNPC:\n, return handle","prefix":"GetCursorCastTarget"},
"CDOTA_BaseNPC_Heal":{"body":"Heal(${flAmount}, ${hInflictor})","description":"CDOTA_BaseNPC:\nHeal this unit., return void","prefix":"Heal"},
"GetWorldMaxX":{"body":"GetWorldMaxX()","description":"Gets the world's maximum X position., return float","prefix":"GetWorldMaxX"},
"DOTA_MAX_SPECTATOR_LOBBY_SIZE":{"body":"DOTA_MAX_SPECTATOR_LOBBY_SIZE","description":"Value[15]DOTALimits_t->Max number of viewers in a spectator lobby.","prefix":"DOTA_MAX_SPECTATOR_LOBBY_SIZE"},
"CDOTA_BaseNPC_MakeIllusion":{"body":"MakeIllusion()","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakeIllusion"},
"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_NIGHTMARED"},
"ACT_DOTA_GREEVIL_HOOK_START":{"body":"ACT_DOTA_GREEVIL_HOOK_START","description":"","prefix":"ACT_DOTA_GREEVIL_HOOK_START"},
"DOTA_ATTRIBUTE_AGILITY":{"body":"DOTA_ATTRIBUTE_AGILITY","description":"","prefix":"DOTA_ATTRIBUTE_AGILITY"},
"CDOTA_Item_Lua_GetChannelTime":{"body":"GetChannelTime()","description":"CDOTA_Item_Lua:\nReturn the channel time of this ability., return float","prefix":"GetChannelTime"},
"CDOTA_BaseNPC_GetHealthDeficit":{"body":"GetHealthDeficit()","description":"CDOTA_BaseNPC:\nReturns integer amount of health missing from max., return int","prefix":"GetHealthDeficit"},
"CDOTA_BaseNPC_NotOnMinimapForEnemies":{"body":"NotOnMinimapForEnemies()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NotOnMinimapForEnemies"},
"CDOTA_BaseNPC_Creature_SetMoveSpeedGain":{"body":"SetMoveSpeedGain(${nMoveSpeedGain})","description":"CDOTA_BaseNPC_Creature:\nSet the move speed gained per level on this creature., return void","prefix":"SetMoveSpeedGain"},
"DOTA_LOADOUT_TYPE_INVALID":{"body":"DOTA_LOADOUT_TYPE_INVALID","description":"","prefix":"DOTA_LOADOUT_TYPE_INVALID"},
"MODIFIER_STATE_NO_TEAM_SELECT":{"body":"MODIFIER_STATE_NO_TEAM_SELECT","description":"","prefix":"MODIFIER_STATE_NO_TEAM_SELECT"},
"CEnvEntityMaker_SpawnEntityAtEntityOrigin":{"body":"SpawnEntityAtEntityOrigin(${hEntity})","description":"CEnvEntityMaker:\nCreate an entity at the location of a specified entity instance, return void","prefix":"SpawnEntityAtEntityOrigin"},
"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT","description":"Value[88]modifierfunction->GetOverrideAnimationWeight","prefix":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_WEIGHT"},
"CDOTA_BaseNPC_FindAbilityByName":{"body":"FindAbilityByName(${pAbilityName})","description":"CDOTA_BaseNPC:\nRetrieve an ability by name from the unit., return handle","prefix":"FindAbilityByName"},
"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_QUICKBUY"},
"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK":{"body":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK","description":"Value[6]modifierfunction->GetModifierProcAttack_Feedback","prefix":"MODIFIER_PROPERTY_PROCATTACK_FEEDBACK"},
"ACT_DOTA_SAND_KING_BURROW_OUT":{"body":"ACT_DOTA_SAND_KING_BURROW_OUT","description":"","prefix":"ACT_DOTA_SAND_KING_BURROW_OUT"},
"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE":{"body":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"},
"CDOTA_PlayerResource_IsHeroSelected":{"body":"IsHeroSelected(${pHeroname})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsHeroSelected"},
"CEntities_FindAllInSphere":{"body":"FindAllInSphere(${Vector_1}, ${float_2})","description":"CEntities:\nFind entities within a radius., return table","prefix":"FindAllInSphere"},
"DebugDrawClear":{"body":"DebugDrawClear()","description":"Try to clear all the debug overlay info, return void","prefix":"DebugDrawClear"},
"DOTA_ModifyGold_SharedGold":{"body":"DOTA_ModifyGold_SharedGold","description":"","prefix":"DOTA_ModifyGold_SharedGold"},
"CreateTempTree":{"body":"CreateTempTree(${Vector_1}, ${float_2})","description":"Create a temporary tree. (vLocation, flDuration)., return void","prefix":"CreateTempTree"},
"ACT_DOTA_CAGED_CREEP_SMASH":{"body":"ACT_DOTA_CAGED_CREEP_SMASH","description":"","prefix":"ACT_DOTA_CAGED_CREEP_SMASH"},
"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD":{"body":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD","description":"","prefix":"DOTA_HUD_VISIBILITY_TOP_SCOREBOARD"},
"ACT_DOTA_AMBUSH":{"body":"ACT_DOTA_AMBUSH","description":"","prefix":"ACT_DOTA_AMBUSH"},
"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS":{"body":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS","description":"Value[63]modifierfunction->GetModifierBonusStats_Strength","prefix":"MODIFIER_PROPERTY_STATS_STRENGTH_BONUS"},
"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_ALERT_TARGET"},
"CDOTA_BaseNPC_IsPositionInRange":{"body":"IsPositionInRange(${vPosition}, ${flRange})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsPositionInRange"},
"CDOTABaseAbility_IsFullyCastable":{"body":"IsFullyCastable()","description":"CDOTABaseAbility:\nReturns whether the ability can be cast., return bool","prefix":"IsFullyCastable"},
"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE":{"body":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE","description":"","prefix":"ACT_STORM_SPIRIT_OVERLOAD_RUN_OVERRIDE"},
"MODIFIER_PROPERTY_EVASION_CONSTANT":{"body":"MODIFIER_PROPERTY_EVASION_CONSTANT","description":"Value[38]modifierfunction->GetModifierEvasion_Constant","prefix":"MODIFIER_PROPERTY_EVASION_CONSTANT"},
"DOTA_HEROPICK_STATE_CM_SELECT4":{"body":"DOTA_HEROPICK_STATE_CM_SELECT4","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT4"},
"CDOTATutorial_SelectPlayerTeam":{"body":"SelectPlayerTeam(${string_1})","description":"CDOTATutorial:\nSelect the team for the local player, return void","prefix":"SelectPlayerTeam"},
"GetGroundPosition":{"body":"GetGroundPosition(${Vector_1}, ${handle_2})","description":"Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset., return Vector","prefix":"GetGroundPosition"},
"ACT_DOTA_FATAL_BONDS":{"body":"ACT_DOTA_FATAL_BONDS","description":"","prefix":"ACT_DOTA_FATAL_BONDS"},
"ACT_DOTA_CHANNEL_ABILITY_7":{"body":"ACT_DOTA_CHANNEL_ABILITY_7","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_7"},
"CDOTA_BaseNPC_CanEntityBeSeenByMyTeam":{"body":"CanEntityBeSeenByMyTeam(${hEntity})","description":"CDOTA_BaseNPC:\nCheck FoW to see if an entity is visible., return bool","prefix":"CanEntityBeSeenByMyTeam"},
"CDOTA_BaseNPC_GetAcquisitionRange":{"body":"GetAcquisitionRange()","description":"CDOTA_BaseNPC:\nGets the range at which this unit will auto-acquire., return float","prefix":"GetAcquisitionRange"},
"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE","description":"Value[54]modifierfunction->GetModifierTotalPercentageManaRegen","prefix":"MODIFIER_PROPERTY_MANA_REGEN_TOTAL_PERCENTAGE"},
"CreateUnitByName":{"body":"CreateUnitByName(${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6})","description":"Creates a DOTA unit by its dota_npc_units.txt name, return handle","prefix":"CreateUnitByName"},
"CBaseEntity_IsNPC":{"body":"IsNPC()","description":"CBaseEntity:\nIs this entity an CAI_BaseNPC?, return bool","prefix":"IsNPC"},
"CDOTA_Item_Lua_OnProjectileHit":{"body":"OnProjectileHit(${hTarget}, ${vLocation})","description":"CDOTA_Item_Lua:\n(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)., return bool","prefix":"OnProjectileHit"},
"CDOTA_PlayerResource_GetUnreliableGold":{"body":"GetUnreliableGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetUnreliableGold"},
"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW":{"body":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW","description":"","prefix":"ACT_DOTA_ALCHEMIST_CONCOCTION_THROW"},
"CDOTA_BaseNPC_SetForceAttackTarget":{"body":"SetForceAttackTarget(${hNPC})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetForceAttackTarget"},
"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"},
"LimitPathingSearchDepth":{"body":"LimitPathingSearchDepth(${float_1})","description":"Set the limit on the pathfinding search space., return void","prefix":"LimitPathingSearchDepth"},
"CalcDistanceBetweenEntityOBB":{"body":"CalcDistanceBetweenEntityOBB(${handle_1}, ${handle_2})","description":"Compute the distance between two entity OBB. A negative return value indicates an input error. A return value of zero indicates that the OBBs are overlapping., return float","prefix":"CalcDistanceBetweenEntityOBB"},
"CDOTAGamerules_SetCustomVictoryMessageDuration":{"body":"SetCustomVictoryMessageDuration(${float_1})","description":"CDOTAGamerules:\nSets the victory message duration., return void","prefix":"SetCustomVictoryMessageDuration"},
"CDOTA_BaseNPC_GetCastPoint":{"body":"GetCastPoint(${bAttack})","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetCastPoint"},
"MODIFIER_PROPERTY_PRE_ATTACK":{"body":"MODIFIER_PROPERTY_PRE_ATTACK","description":"Value[7]modifierfunction->GetModifierPreAttack","prefix":"MODIFIER_PROPERTY_PRE_ATTACK"},
"CDOTA_Item_IsCombinable":{"body":"IsCombinable()","description":"CDOTA_Item:\n, return bool","prefix":"IsCombinable"},
"CDOTA_BaseNPC_GetAttackSpeed":{"body":"GetAttackSpeed()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetAttackSpeed"},
"CDOTA_PlayerResource_IsValidTeamPlayer":{"body":"IsValidTeamPlayer(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidTeamPlayer"},
"ACT_DOTA_FXANIM":{"body":"ACT_DOTA_FXANIM","description":"","prefix":"ACT_DOTA_FXANIM"},
"CDOTA_PlayerResource_GetMisses":{"body":"GetMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetMisses"},
"RegisterSpawnGroupFilterProxy":{"body":"RegisterSpawnGroupFilterProxy(${string_1})","description":"Create a C proxy for a script-based spawn group filter, return void","prefix":"RegisterSpawnGroupFilterProxy"},
"CDOTA_BaseNPC_SpendMana":{"body":"SpendMana(${flManaSpent}, ${hAbility})","description":"CDOTA_BaseNPC:\nSpend mana from this unit, this can be used for spending mana from abilities or item usage., return void","prefix":"SpendMana"},
"CDOTA_BaseNPC_IsIllusion":{"body":"IsIllusion()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsIllusion"},
"AppendToLogFile":{"body":"AppendToLogFile(${string_1}, ${string_2})","description":"Appends a string to a log file on the server, return void","prefix":"AppendToLogFile"},
"StartSoundEventFromPositionReliable":{"body":"StartSoundEventFromPositionReliable(${string_1}, ${Vector_2})","description":"Start a sound event from position with reliable delivery, return void","prefix":"StartSoundEventFromPositionReliable"},
"CDOTABaseAbility_SpeakTrigger":{"body":"SpeakTrigger()","description":"CDOTABaseAbility:\n, return <unknown>","prefix":"SpeakTrigger"},
"DOTA_TEAM_CUSTOM_2":{"body":"DOTA_TEAM_CUSTOM_2","description":"","prefix":"DOTA_TEAM_CUSTOM_2"},
"DOTA_GAMERULES_STATE_TEAM_SHOWCASE":{"body":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE","description":"","prefix":"DOTA_GAMERULES_STATE_TEAM_SHOWCASE"},
"CDOTA_Modifier_Lua_Motion_Both_OnHorizontalMotionInterrupted":{"body":"OnHorizontalMotionInterrupted()","description":"CDOTA_Modifier_Lua_Motion_Both:\nCalled when the motion gets interrupted., return void","prefix":"OnHorizontalMotionInterrupted"},
"CDOTA_BaseNPC_Hero_IncrementNearbyCreepDeaths":{"body":"IncrementNearbyCreepDeaths()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementNearbyCreepDeaths"},
"CDOTA_BaseNPC_SetMinimumGoldBounty":{"body":"SetMinimumGoldBounty(${iGoldBountyMin})","description":"CDOTA_BaseNPC:\nSet the minimum gold bounty for this unit., return void","prefix":"SetMinimumGoldBounty"},
"ACT_MIRANA_LEAP_END":{"body":"ACT_MIRANA_LEAP_END","description":"","prefix":"ACT_MIRANA_LEAP_END"},
"CEnvEntityMaker_SpawnEntityAtNamedEntityOrigin":{"body":"SpawnEntityAtNamedEntityOrigin(${pszName})","description":"CEnvEntityMaker:\nCreate an entity at the location of a named entity, return void","prefix":"SpawnEntityAtNamedEntityOrigin"},
"CDOTA_Item_Lua_GetCustomCastErrorTarget":{"body":"GetCustomCastErrorTarget(${hTarget})","description":"CDOTA_Item_Lua:\n(HSCRIPT hTarget) Return the error string of a failed command on a target., return string","prefix":"GetCustomCastErrorTarget"},
"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE":{"body":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE","description":"","prefix":"ABILITY_CANNOT_BE_UPGRADED_NOT_UPGRADABLE"},
"MODIFIER_PROPERTY_STATS_AGILITY_BONUS":{"body":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS","description":"Value[64]modifierfunction->GetModifierBonusStats_Agility","prefix":"MODIFIER_PROPERTY_STATS_AGILITY_BONUS"},
"MODIFIER_PROPERTY_RESPAWNTIME":{"body":"MODIFIER_PROPERTY_RESPAWNTIME","description":"Value[72]modifierfunction->GetModifierConstantRespawnTime","prefix":"MODIFIER_PROPERTY_RESPAWNTIME"},
"CDOTA_SimpleObstruction_SetEnabled":{"body":"SetEnabled(${bEnabled}, ${bForce})","description":"CDOTA_SimpleObstruction:\nEnable or disable the obstruction, return void","prefix":"SetEnabled"},
"CEntityInstance_Destroy":{"body":"Destroy()","description":"CEntityInstance:\n, return void","prefix":"Destroy"},
"MODIFIER_PROPERTY_ABSORB_SPELL":{"body":"MODIFIER_PROPERTY_ABSORB_SPELL","description":"Value[90]modifierfunction->GetAbsorbSpell","prefix":"MODIFIER_PROPERTY_ABSORB_SPELL"},
"CDOTABaseAbility_IsCosmetic":{"body":"IsCosmetic(${hEntity})","description":"CDOTABaseAbility:\n, return bool","prefix":"IsCosmetic"},
"CDOTA_Modifier_Lua_GetAuraEntityReject":{"body":"GetAuraEntityReject(${hEntity})","description":"CDOTA_Modifier_Lua:\nReturn true/false if this entity should receive the aura under specific conditions, return bool","prefix":"GetAuraEntityReject"},
"CDOTA_BaseNPC_SetDeathXP":{"body":"SetDeathXP(${iXPBounty})","description":"CDOTA_BaseNPC:\nSet the XP bounty on this unit., return void","prefix":"SetDeathXP"},
"CDOTA_Ability_Lua_GetCustomCastErrorLocation":{"body":"GetCustomCastErrorLocation(${vLocation})","description":"CDOTA_Ability_Lua:\n(Vector vLocation) Return the error string of a failed command on a location., return string","prefix":"GetCustomCastErrorLocation"},
"SplineVectors":{"body":"SplineVectors(${Vector_1}, ${Vector_2}, ${float_3})","description":"(vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1], return Vector","prefix":"SplineVectors"},
"CDOTA_Modifier_Lua_Motion_Both_UpdateVerticalMotion":{"body":"UpdateVerticalMotion(${me}, ${dt})","description":"CDOTA_Modifier_Lua_Motion_Both:\nPerform any motion from the given interval on the NPC., return void","prefix":"UpdateVerticalMotion"},
"CDOTA_Item_Lua_CastFilterResultTarget":{"body":"CastFilterResultTarget(${hTarget})","description":"CDOTA_Item_Lua:\n(HSCRIPT hTarget) Determine whether an issued command on a target is valid., return int","prefix":"CastFilterResultTarget"},
"CDOTA_PlayerResource_IncrementClaimedMisses":{"body":"IncrementClaimedMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementClaimedMisses"},
"CDOTAGamerules_PlayerHasCustomGameHostPrivileges":{"body":"PlayerHasCustomGameHostPrivileges(${handle_1})","description":"CDOTAGamerules:\nWhether a player has custom game host privileges (shuffle teams, etc.), return bool","prefix":"PlayerHasCustomGameHostPrivileges"},
"DOTA_ABILITY_BEHAVIOR_PASSIVE":{"body":"DOTA_ABILITY_BEHAVIOR_PASSIVE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_PASSIVE"},
"CDOTABaseGameMode_SetWeatherEffectsDisabled":{"body":"SetWeatherEffectsDisabled(${bDisable})","description":"CDOTABaseGameMode:\nSet if weather effects are disabled., return void","prefix":"SetWeatherEffectsDisabled"},
"CDOTABaseGameMode_SetUseCustomHeroLevels":{"body":"SetUseCustomHeroLevels(${bEnabled})","description":"CDOTABaseGameMode:\nTurn on custom-defined XP values for hero level ups.  The table should be defined before switching this on., return void","prefix":"SetUseCustomHeroLevels"},
"DOTA_LOADOUT_TYPE_LEGS":{"body":"DOTA_LOADOUT_TYPE_LEGS","description":"","prefix":"DOTA_LOADOUT_TYPE_LEGS"},
"UF_FAIL_OTHER":{"body":"UF_FAIL_OTHER","description":"","prefix":"UF_FAIL_OTHER"},
"CDOTA_BaseNPC_Hero_GetManaRegen":{"body":"GetManaRegen()","description":"CDOTA_BaseNPC_Hero:\nHero mana regen is affected by attributes., return float","prefix":"GetManaRegen"},
"ACT_DOTA_TELEPORT_COOP_EXIT":{"body":"ACT_DOTA_TELEPORT_COOP_EXIT","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_EXIT"},
"CDOTA_PlayerResource_GetRoshanKills":{"body":"GetRoshanKills(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRoshanKills"},
"CDOTA_Ability_Lua_OnToggle":{"body":"OnToggle()","description":"CDOTA_Ability_Lua:\nAbility is toggled on/off., return void","prefix":"OnToggle"},
"CCustomGameEventManager_Send_ServerToPlayer":{"body":"Send_ServerToPlayer(${handle_1}, ${string_2}, ${handle_3})","description":"CCustomGameEventManager:\n( Entity Player, string EventName, table EventData ), return void","prefix":"Send_ServerToPlayer"},
"CDOTA_Modifier_Lua_Horizontal_Motion_SetPriority":{"body":"SetPriority(${nMotionPriority})","description":"CDOTA_Modifier_Lua_Horizontal_Motion:\nSet the priority, return void","prefix":"SetPriority"},
"DOTA_LOADOUT_TYPE_CURSOR_PACK":{"body":"DOTA_LOADOUT_TYPE_CURSOR_PACK","description":"","prefix":"DOTA_LOADOUT_TYPE_CURSOR_PACK"},
"IsServer":{"body":"IsServer()","description":"Returns true if this is lua running from the server.dll., return bool","prefix":"IsServer"},
"UTIL_Remove":{"body":"UTIL_Remove(${handle_1})","description":"Removes the specified entity, return void","prefix":"UTIL_Remove"},
"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_ITEMS"},
"CDOTAGameManager_GetHeroUnitNameByID":{"body":"GetHeroUnitNameByID(${int_1})","description":"CDOTAGameManager:\nGet the hero unit name given the hero ID., return string","prefix":"GetHeroUnitNameByID"},
"CDOTA_Item_LaunchLootInitialHeight":{"body":"LaunchLootInitialHeight(${bAutoUse}, ${flInitialHeight}, ${flLaunchHeight}, ${flDuration}, ${vEndPoint})","description":"CDOTA_Item:\n, return void","prefix":"LaunchLootInitialHeight"},
"CDOTA_BaseNPC_Hero_GetIntellect":{"body":"GetIntellect()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetIntellect"},
"CInfoData_QueryInt":{"body":"QueryInt(${tok}, ${nDefault})","description":"CInfoData:\nQuery int data for this key, return int","prefix":"QueryInt"},
"CDOTAGameManager_GetHeroDataByName_Script":{"body":"GetHeroDataByName_Script(${string_1})","description":"CDOTAGameManager:\nGet the hero unit , return table","prefix":"GetHeroDataByName_Script"},
"ACT_DOTA_PRESENT_ITEM":{"body":"ACT_DOTA_PRESENT_ITEM","description":"","prefix":"ACT_DOTA_PRESENT_ITEM"},
"CDOTA_BaseNPC_AttackReady":{"body":"AttackReady()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"AttackReady"},
"DOTA_MAX_PLAYERS":{"body":"DOTA_MAX_PLAYERS","description":"Value[64]DOTALimits_t->Max number of players connected to the server including spectators.","prefix":"DOTA_MAX_PLAYERS"},
"CDOTABaseGameMode_GetFogOfWarDisabled":{"body":"GetFogOfWarDisabled()","description":"CDOTABaseGameMode:\nTurn the fog of war on or off., return bool","prefix":"GetFogOfWarDisabled"},
"CDOTA_BaseNPC_AddNewModifier":{"body":"AddNewModifier(${hCaster}, ${hAbility}, ${pszScriptName}, ${hModifierTable})","description":"CDOTA_BaseNPC:\nAdd a modifier to this unit., return handle","prefix":"AddNewModifier"},
"ACT_DOTA_LEAP_STUN":{"body":"ACT_DOTA_LEAP_STUN","description":"","prefix":"ACT_DOTA_LEAP_STUN"},
"MODIFIER_PROPERTY_BONUS_NIGHT_VISION":{"body":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION","description":"Value[94]modifierfunction->GetBonusNightVision","prefix":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION"},
"CreateUnitByNameAsync":{"body":"CreateUnitByNameAsync(${string_1}, ${Vector_2}, ${bool_3}, ${handle_4}, ${handle_5}, ${int_6}, ${handle_7})","description":"Creates a DOTA unit by its dota_npc_units.txt name, return int","prefix":"CreateUnitByNameAsync"},
"CEnvProjectedTexture_SetNearRange":{"body":"SetNearRange(${flRange})","description":"CEnvProjectedTexture:\nSet light minimum range, return void","prefix":"SetNearRange"},
"CDebugOverlayScriptHelper_EntityAttachments":{"body":"EntityAttachments(${ehandle_1}, ${float_2}, ${float_3})","description":"CDebugOverlayScriptHelper:\nDraws the attachments of the entity, return void","prefix":"EntityAttachments"},
"GridNav_GridPosToWorldCenterY":{"body":"GridPosToWorldCenterY(${int_1})","description":"GridNav:\nGet the Y position of the center of a given Y index, return float","prefix":"GridPosToWorldCenterY"},
"PrecacheItemByNameSync":{"body":"PrecacheItemByNameSync(${string_1}, ${handle_2})","description":"Precaches a DOTA item by its dota_npc_items.txt name, return void","prefix":"PrecacheItemByNameSync"},
"MODIFIER_EVENT_ON_STATE_CHANGED":{"body":"MODIFIER_EVENT_ON_STATE_CHANGED","description":"Value[132]modifierfunction->OnStateChanged","prefix":"MODIFIER_EVENT_ON_STATE_CHANGED"},
"CBaseEntity_SetContext":{"body":"SetContext(${pName}, ${pValue}, ${duration})","description":"CBaseEntity:\nSetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever')., return void","prefix":"SetContext"},
"CDOTA_PlayerResource_ClearLastHitMultikill":{"body":"ClearLastHitMultikill(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearLastHitMultikill"},
"CDOTABaseGameMode_SetBotsInLateGame":{"body":"SetBotsInLateGame(${bLateGame})","description":"CDOTABaseGameMode:\nSet if bots should enable their late game behavior., return void","prefix":"SetBotsInLateGame"},
"MODIFIER_STATE_CANNOT_MISS":{"body":"MODIFIER_STATE_CANNOT_MISS","description":"","prefix":"MODIFIER_STATE_CANNOT_MISS"},
"CDOTA_Ability_DataDriven_ApplyDataDrivenThinker":{"body":"ApplyDataDrivenThinker(${hCaster}, ${vLocation}, ${pszModifierName}, ${hModifierTable})","description":"CDOTA_Ability_DataDriven:\nApplies a data driven thinker at the location, return handle","prefix":"ApplyDataDrivenThinker"},
"CDOTA_BaseNPC_IsOwnedByAnyPlayer":{"body":"IsOwnedByAnyPlayer()","description":"CDOTA_BaseNPC:\nIs this unit owned by any non-bot player?, return bool","prefix":"IsOwnedByAnyPlayer"},
"CDOTABaseGameMode_SetHUDVisible":{"body":"SetHUDVisible(${iHUDElement}, ${bVisible})","description":"CDOTABaseGameMode:\nSet the HUD element visibility., return void","prefix":"SetHUDVisible"},
"MODIFIER_PROPERTY_MIN_HEALTH":{"body":"MODIFIER_PROPERTY_MIN_HEALTH","description":"Value[99]modifierfunction->GetMinHealth","prefix":"MODIFIER_PROPERTY_MIN_HEALTH"},
"CDOTA_PlayerResource_SpendGold":{"body":"SpendGold(${iPlayerID}, ${iCost}, ${iReason})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SpendGold"},
"CDotaSubquestBase_SetTextReplaceString":{"body":"SetTextReplaceString(${pszString})","description":"CDotaSubquestBase:\nSet the text replace string for this subquest, return void","prefix":"SetTextReplaceString"},
"CDOTAGamerules_IsCheatMode":{"body":"IsCheatMode()","description":"CDOTAGamerules:\nAre cheats enabled on the server, return bool","prefix":"IsCheatMode"},
"ACT_DOTA_ATTACK_EVENT":{"body":"ACT_DOTA_ATTACK_EVENT","description":"","prefix":"ACT_DOTA_ATTACK_EVENT"},
"DOTA_HEROPICK_STATE_CD_SELECT5":{"body":"DOTA_HEROPICK_STATE_CD_SELECT5","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT5"},
"CDOTA_BaseNPC_DestroyAllSpeechBubbles":{"body":"DestroyAllSpeechBubbles()","description":"CDOTA_BaseNPC:\n, return void","prefix":"DestroyAllSpeechBubbles"},
"DOTA_ModifyGold_Unspecified":{"body":"DOTA_ModifyGold_Unspecified","description":"","prefix":"DOTA_ModifyGold_Unspecified"},
"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE":{"body":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_TARGET_VALUE"},
"CBaseEntity_Attribute_SetIntValue":{"body":"Attribute_SetIntValue(${pName}, ${nValue})","description":"CBaseEntity:\nSet int value for an entity attribute., return void","prefix":"Attribute_SetIntValue"},
"CDOTA_Ability_Lua_GetAssociatedPrimaryAbilities":{"body":"GetAssociatedPrimaryAbilities()","description":"CDOTA_Ability_Lua:\nReturns abilities that are stolen simultaneously, or otherwise related in functionality., return string","prefix":"GetAssociatedPrimaryAbilities"},
"CDOTA_BaseNPC_SetAdditionalBattleMusicWeight":{"body":"SetAdditionalBattleMusicWeight(${flWeight})","description":"CDOTA_BaseNPC:\nCombat involving this creature will have this weight added to the music calcuations., return void","prefix":"SetAdditionalBattleMusicWeight"},
"CDOTABaseGameMode_ClearModifyExperienceFilter":{"body":"ClearModifyExperienceFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls how hero experience is modified., return void","prefix":"ClearModifyExperienceFilter"},
"CDOTA_PlayerResource_GetLevel":{"body":"GetLevel(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLevel"},
"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS":{"body":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS","description":"","prefix":"DOTA_HUD_VISIBILITY_SHOP_SUGGESTEDITEMS"},
"CDOTA_BaseNPC_GetBaseMoveSpeed":{"body":"GetBaseMoveSpeed()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetBaseMoveSpeed"},
"CDOTA_BaseNPC_IsHexed":{"body":"IsHexed()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsHexed"},
"CDOTABaseGameMode_AreWeatherEffectsDisabled":{"body":"AreWeatherEffectsDisabled()","description":"CDOTABaseGameMode:\nGet if weather effects are disabled on the client., return bool","prefix":"AreWeatherEffectsDisabled"},
"CDOTA_Ability_Lua_OnProjectileHit_ExtraData":{"body":"OnProjectileHit_ExtraData(${hTarget}, ${vLocation}, ${table})","description":"CDOTA_Ability_Lua:\n(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid)., return bool","prefix":"OnProjectileHit_ExtraData"},
"ACT_DOTA_SHARPEN_WEAPON_OUT":{"body":"ACT_DOTA_SHARPEN_WEAPON_OUT","description":"","prefix":"ACT_DOTA_SHARPEN_WEAPON_OUT"},
"CPhysicsProp_EnableMotion":{"body":"EnableMotion()","description":"CPhysicsProp:\nEnable motion for the prop, return void","prefix":"EnableMotion"},
"CDOTA_Ability_Lua_CastFilterResultTarget":{"body":"CastFilterResultTarget(${hTarget})","description":"CDOTA_Ability_Lua:\n(HSCRIPT hTarget) Determine whether an issued command on a target is valid., return int","prefix":"CastFilterResultTarget"},
"ACT_DOTA_NIAN_PIN_TO_STUN":{"body":"ACT_DOTA_NIAN_PIN_TO_STUN","description":"","prefix":"ACT_DOTA_NIAN_PIN_TO_STUN"},
"MODIFIER_STATE_ROOTED":{"body":"MODIFIER_STATE_ROOTED","description":"","prefix":"MODIFIER_STATE_ROOTED"},
"CDOTA_PlayerResource_AreUnitsSharedWithPlayerID":{"body":"AreUnitsSharedWithPlayerID(${nUnitOwnerPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"AreUnitsSharedWithPlayerID"},
"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY":{"body":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY","description":"","prefix":"DOTA_HUD_VISIBILITY_TOP_TIMEOFDAY"},
"ACT_DOTA_CHANNEL_ABILITY_3":{"body":"ACT_DOTA_CHANNEL_ABILITY_3","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_3"},
"CDOTA_BaseNPC_IsLowAttackPriority":{"body":"IsLowAttackPriority()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsLowAttackPriority"},
"CBodyComponent_SetBodyGroup":{"body":"SetBodyGroup(${string_1})","description":"CBodyComponent:\n, return void","prefix":"SetBodyGroup"},
"ACT_DOTA_BELLYACHE_START":{"body":"ACT_DOTA_BELLYACHE_START","description":"","prefix":"ACT_DOTA_BELLYACHE_START"},
"CDOTA_BaseNPC_Hero_GetBuybackGoldLimitTime":{"body":"GetBuybackGoldLimitTime()","description":"CDOTA_BaseNPC_Hero:\nReturns the amount of time gold gain is limited after buying back., return float","prefix":"GetBuybackGoldLimitTime"},
"CDOTA_Modifier_Lua_RemoveOnDeath":{"body":"RemoveOnDeath()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is removed when the parent dies., return bool","prefix":"RemoveOnDeath"},
"CDOTA_BaseNPC_Creature_CreatureLevelUp":{"body":"CreatureLevelUp(${iLevels})","description":"CDOTA_BaseNPC_Creature:\nLevel the creature up by the specified number of levels, return void","prefix":"CreatureLevelUp"},
"CDOTATutorial_EnablePlayerOffscreenTip":{"body":"EnablePlayerOffscreenTip(${bool_1})","description":"CDOTATutorial:\nEnable the tip to alert players how to find their hero., return void","prefix":"EnablePlayerOffscreenTip"},
"CDOTAGamerules_ResetToHeroSelection":{"body":"ResetToHeroSelection()","description":"CDOTAGamerules:\nRestart the game at hero selection, return void","prefix":"ResetToHeroSelection"},
"CDOTA_Item_StacksWithOtherOwners":{"body":"StacksWithOtherOwners()","description":"CDOTA_Item:\n, return bool","prefix":"StacksWithOtherOwners"},
"ACT_DOTA_TINKER_REARM3":{"body":"ACT_DOTA_TINKER_REARM3","description":"","prefix":"ACT_DOTA_TINKER_REARM3"},
"DOTA_LOADOUT_TYPE_HUD_SKIN":{"body":"DOTA_LOADOUT_TYPE_HUD_SKIN","description":"","prefix":"DOTA_LOADOUT_TYPE_HUD_SKIN"},
"CDOTABaseGameMode_SetFountainPercentageHealthRegen":{"body":"SetFountainPercentageHealthRegen(${flPercentageHealthRegen})","description":"CDOTABaseGameMode:\nSet the percentage rate that the fountain will regen health. (-1 for default), return void","prefix":"SetFountainPercentageHealthRegen"},
"CDOTA_BaseNPC_Hero_GetIntellectGain":{"body":"GetIntellectGain()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetIntellectGain"},
"SpawnEntityListFromTableSynchronous":{"body":"SpawnEntityListFromTableSynchronous(${handle_1})","description":"Synchronously spawn an entity group from a list of spawn tables., return handle","prefix":"SpawnEntityListFromTableSynchronous"},
"CDOTATutorial_AddShopWhitelistItem":{"body":"AddShopWhitelistItem(${string_1})","description":"CDOTATutorial:\nAdd an item to the shop whitelist., return void","prefix":"AddShopWhitelistItem"},
"CDOTA_Item_Lua_OnUnStolen":{"body":"OnUnStolen()","description":"CDOTA_Item_Lua:\nSpecial behavior when lost by Spell Steal., return void","prefix":"OnUnStolen"},
"StopSoundEvent":{"body":"StopSoundEvent(${string_1}, ${handle_2})","description":"Stops a sound event with optional delivery, return void","prefix":"StopSoundEvent"},
"CDOTA_BaseNPC_Creature_SetManaGain":{"body":"SetManaGain(${nManaGain})","description":"CDOTA_BaseNPC_Creature:\nSet the mana points gained per level on this creature., return void","prefix":"SetManaGain"},
"ACT_DOTA_COLD_FEET":{"body":"ACT_DOTA_COLD_FEET","description":"","prefix":"ACT_DOTA_COLD_FEET"},
"CDOTA_BaseNPC_AddSpeechBubble":{"body":"AddSpeechBubble(${iBubble}, ${pszSpeech}, ${flDuration}, ${unOffsetX}, ${unOffsetY})","description":"CDOTA_BaseNPC:\nAdd a speech bubble(1-4 live at a time) to this NPC., return void","prefix":"AddSpeechBubble"},
"CDOTA_BaseNPC_AlertNearbyUnits":{"body":"AlertNearbyUnits(${hAttacker}, ${hAbility})","description":"CDOTA_BaseNPC:\n, return void","prefix":"AlertNearbyUnits"},
"DOTA_MUSIC_STATUS_BATTLE":{"body":"DOTA_MUSIC_STATUS_BATTLE","description":"","prefix":"DOTA_MUSIC_STATUS_BATTLE"},
"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT":{"body":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_ALL_DRAFT_SELECT"},
"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE":{"body":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
"CDOTA_BaseNPC_IsControllableByAnyPlayer":{"body":"IsControllableByAnyPlayer()","description":"CDOTA_BaseNPC:\nIs this unit controlled by any non-bot player?, return bool","prefix":"IsControllableByAnyPlayer"},
"CDOTA_Modifier_Lua_GetAuraSearchType":{"body":"GetAuraSearchType()","description":"CDOTA_Modifier_Lua:\nReturn the unit classifications this aura applies its buff to., return int","prefix":"GetAuraSearchType"},
"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END":{"body":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END","description":"","prefix":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_END"},
"CDOTA_BaseNPC_GetAbilityCount":{"body":"GetAbilityCount()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetAbilityCount"},
"SpawnEntityGroupFromTable":{"body":"SpawnEntityGroupFromTable(${handle_1}, ${bool_2}, ${handle_3})","description":"Hierarchically spawn an entity group from a set of spawn tables., return bool","prefix":"SpawnEntityGroupFromTable"},
"CDOTABaseGameMode_ClearModifyGoldFilter":{"body":"ClearModifyGoldFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls how hero gold is modified., return void","prefix":"ClearModifyGoldFilter"},
"CBodyComponent_GetSequence":{"body":"GetSequence()","description":"CBodyComponent:\nReturns the active sequence\n, return <unknown>","prefix":"GetSequence"},
"EntIndexToHScript":{"body":"EntIndexToHScript(${int_1})","description":"Turn an entity index integer to an HScript representing that entity's script instance., return handle","prefix":"EntIndexToHScript"},
"CDOTA_PlayerResource_IsBroadcaster":{"body":"IsBroadcaster(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsBroadcaster"},
"CDOTA_BaseNPC_Hero_GetIncreasedAttackSpeed":{"body":"GetIncreasedAttackSpeed()","description":"CDOTA_BaseNPC_Hero:\nHero attack speed is also affected by agility., return float","prefix":"GetIncreasedAttackSpeed"},
"CDOTA_BaseNPC_GetModifierCount":{"body":"GetModifierCount()","description":"CDOTA_BaseNPC:\nHow many modifiers does this unit have?, return int","prefix":"GetModifierCount"},
"CDOTA_BaseNPC_Creature_SetDamageGain":{"body":"SetDamageGain(${nDamageGain})","description":"CDOTA_BaseNPC_Creature:\nSet the damage gained per level on this creature., return void","prefix":"SetDamageGain"},
"EmitAnnouncerSoundForPlayer":{"body":"EmitAnnouncerSoundForPlayer(${string_1}, ${int_2})","description":"Emit an announcer sound for a player., return void","prefix":"EmitAnnouncerSoundForPlayer"},
"CDOTABaseAbility_IsChanneling":{"body":"IsChanneling()","description":"CDOTABaseAbility:\nReturns whether the ability is currently channeling., return bool","prefix":"IsChanneling"},
"MODIFIER_EVENT_ON_SPELL_TARGET_READY":{"body":"MODIFIER_EVENT_ON_SPELL_TARGET_READY","description":"Value[114]modifierfunction->OnSpellTargetReady","prefix":"MODIFIER_EVENT_ON_SPELL_TARGET_READY"},
"DOTA_HERO_PICK_STATE_ARDM_SELECT":{"body":"DOTA_HERO_PICK_STATE_ARDM_SELECT","description":"","prefix":"DOTA_HERO_PICK_STATE_ARDM_SELECT"},
"CDOTA_BaseNPC_GetBaseDayTimeVisionRange":{"body":"GetBaseDayTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range before modifiers., return int","prefix":"GetBaseDayTimeVisionRange"},
"CDOTAGamerules_GetMatchID":{"body":"GetMatchID()","description":"CDOTAGamerules:\nGet the MatchID for this game., return <unknown>","prefix":"GetMatchID"},
"ACT_DOTA_RATTLETRAP_POWERCOGS":{"body":"ACT_DOTA_RATTLETRAP_POWERCOGS","description":"","prefix":"ACT_DOTA_RATTLETRAP_POWERCOGS"},
"CDOTABaseGameMode_SetMinimumAttackSpeed":{"body":"SetMinimumAttackSpeed(${nMinSpeed})","description":"CDOTABaseGameMode:\nSet the minimum attack speed for units., return void","prefix":"SetMinimumAttackSpeed"},
"CDOTABaseAbility_PayManaCost":{"body":"PayManaCost()","description":"CDOTABaseAbility:\n, return void","prefix":"PayManaCost"},
"DOTA_HEROPICK_STATE_CD_SELECT1":{"body":"DOTA_HEROPICK_STATE_CD_SELECT1","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT1"},
"CDOTA_BaseNPC_MakePhantomBlocker":{"body":"MakePhantomBlocker()","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakePhantomBlocker"},
"CDOTA_PlayerResource_GetClaimedFarm":{"body":"GetClaimedFarm(${iPlayerID}, ${bOnlyEarned})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetClaimedFarm"},
"DOTA_HEROPICK_STATE_CM_BAN4":{"body":"DOTA_HEROPICK_STATE_CM_BAN4","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN4"},
"GetMapName":{"body":"GetMapName()","description":"Get the name of the map., return string","prefix":"GetMapName"},
"CDOTA_BaseNPC_IsIdle":{"body":"IsIdle()","description":"CDOTA_BaseNPC:\nIs this creature currently idle?, return bool","prefix":"IsIdle"},
"CDOTA_BaseNPC_SetControllableByPlayer":{"body":"SetControllableByPlayer(${iIndex}, ${bSkipAdjustingPosition})","description":"CDOTA_BaseNPC:\nSet this unit controllable by the player with the passed ID., return void","prefix":"SetControllableByPlayer"},
"CDOTA_BaseNPC_SetHasInventory":{"body":"SetHasInventory(${bHasInventory})","description":"CDOTA_BaseNPC:\nSet if this unit has an inventory., return void","prefix":"SetHasInventory"},
"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE":{"body":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE","description":"","prefix":"SUBQUEST_TEXT_REPLACE_VALUE_CURRENT_VALUE"},
"CDOTABaseAbility_GetCloneSource":{"body":"GetCloneSource()","description":"CDOTABaseAbility:\n, return handle","prefix":"GetCloneSource"},
"MODIFIER_STATE_BLOCK_DISABLED":{"body":"MODIFIER_STATE_BLOCK_DISABLED","description":"","prefix":"MODIFIER_STATE_BLOCK_DISABLED"},
"UF_FAIL_ENEMY":{"body":"UF_FAIL_ENEMY","description":"","prefix":"UF_FAIL_ENEMY"},
"CDOTA_Unit_Nian_IsHornAlive":{"body":"IsHornAlive()","description":"CDOTA_Unit_Nian:\nIs the Nian's horn broken?, return bool","prefix":"IsHornAlive"},
"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE":{"body":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE","description":"Value[2]modifierfunction->GetModifierBaseAttack_BonusDamage","prefix":"MODIFIER_PROPERTY_BASEATTACK_BONUSDAMAGE"},
"CDOTABaseGameMode_SetOverrideSelectionEntity":{"body":"SetOverrideSelectionEntity(${hOverrideEntity})","description":"CDOTABaseGameMode:\nSet an override for the default selection entity, instead of each player's hero., return void","prefix":"SetOverrideSelectionEntity"},
"CDOTA_Item_Lua_GetCastRange":{"body":"GetCastRange(${vLocation}, ${hTarget})","description":"CDOTA_Item_Lua:\nReturn cast range of this ability., return int","prefix":"GetCastRange"},
"CDOTA_BaseNPC_ShouldIdleAcquire":{"body":"ShouldIdleAcquire()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"ShouldIdleAcquire"},
"CDOTABaseAbility_GetToggleState":{"body":"GetToggleState()","description":"CDOTABaseAbility:\n, return bool","prefix":"GetToggleState"},
"CDOTA_Ability_Lua_OnSpellStart":{"body":"OnSpellStart()","description":"CDOTA_Ability_Lua:\nCast time finished, spell effects begin., return void","prefix":"OnSpellStart"},
"CDOTA_Modifier_Lua_GetHeroEffectName":{"body":"GetHeroEffectName()","description":"CDOTA_Modifier_Lua:\nReturn the name of the hero effect particle system that is created while this modifier is active., return string","prefix":"GetHeroEffectName"},
"ACT_DOTA_DIE":{"body":"ACT_DOTA_DIE","description":"","prefix":"ACT_DOTA_DIE"},
"CDOTA_BaseNPC_DisassembleItem":{"body":"DisassembleItem(${hItem})","description":"CDOTA_BaseNPC:\nDisassemble the passed item in this unit's inventory., return void","prefix":"DisassembleItem"},
"CDOTA_BaseNPC_AngerNearbyUnits":{"body":"AngerNearbyUnits()","description":"CDOTA_BaseNPC:\n, return void","prefix":"AngerNearbyUnits"},
"CDOTABaseGameMode_ClearBountyRunePickupFilter":{"body":"ClearBountyRunePickupFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls bounty rune pickup behavior., return void","prefix":"ClearBountyRunePickupFilter"},
"DOTA_RUNE_COUNT":{"body":"DOTA_RUNE_COUNT","description":"","prefix":"DOTA_RUNE_COUNT"},
"CDOTA_Item_Lua_GetManaCost":{"body":"GetManaCost(${iLevel})","description":"CDOTA_Item_Lua:\nReturn mana cost at the given level (-1 is current)., return int","prefix":"GetManaCost"},
"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK","description":"Value[86]modifierfunction->GetModifierTotal_ConstantBlock","prefix":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK"},
"CBaseEntity_SetContextNum":{"body":"SetContextNum(${pName}, ${fValue}, ${duration})","description":"CBaseEntity:\nSetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever')., return void","prefix":"SetContextNum"},
"CDOTA_Buff_GetAuraDuration":{"body":"GetAuraDuration()","description":"CDOTA_Buff:\nReturns aura stickiness (default 0.5), return float","prefix":"GetAuraDuration"},
"DOTA_LOADOUT_TYPE_SUMMON":{"body":"DOTA_LOADOUT_TYPE_SUMMON","description":"","prefix":"DOTA_LOADOUT_TYPE_SUMMON"},
"CDOTA_BaseNPC_HasGroundMovementCapability":{"body":"HasGroundMovementCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasGroundMovementCapability"},
"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL":{"body":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL","description":"Value[110]modifierfunction->GetOverrideAttackMagical","prefix":"MODIFIER_PROPERTY_OVERRIDE_ATTACK_MAGICAL"},
"CDOTA_CustomUIManager_DynamicHud_SetVisible":{"body":"DynamicHud_SetVisible(${int_1}, ${string_2}, ${bool_3})","description":"CDOTA_CustomUIManager:\nToggle the visibility of an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, bool Visible ), return void","prefix":"DynamicHud_SetVisible"},
"CBaseEntity_DeleteAttribute":{"body":"DeleteAttribute(${pName})","description":"CBaseEntity:\nDelete an entity attribute., return void","prefix":"DeleteAttribute"},
"CBaseEntity_FollowEntity":{"body":"FollowEntity(${hEnt}, ${bBoneMerge})","description":"CBaseEntity:\nhEntity to follow, bool bBoneMerge, return void","prefix":"FollowEntity"},
"ACT_DOTA_SHRUG":{"body":"ACT_DOTA_SHRUG","description":"","prefix":"ACT_DOTA_SHRUG"},
"CDOTA_Item_Lua_OnItemEquipped":{"body":"OnItemEquipped(${hItem})","description":"CDOTA_Item_Lua:\n( HSCRIPT hItem ) Caster equipped item., return void","prefix":"OnItemEquipped"},
"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND":{"body":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND","description":"","prefix":"DOTA_INVENTORY_LIMIT_DROP_ON_GROUND"},
"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES":{"body":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES","description":"","prefix":"MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES"},
"CDOTA_BaseNPC_NotOnMinimap":{"body":"NotOnMinimap()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NotOnMinimap"},
"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"},
"CDOTAGamerules_SetRuneMinimapIconScale":{"body":"SetRuneMinimapIconScale(${float_1})","description":"CDOTAGamerules:\n(flMinimapRuneIconScale) - Scale the rune icons on the minimap., return void","prefix":"SetRuneMinimapIconScale"},
"CDOTA_Ability_Lua_OnItemEquipped":{"body":"OnItemEquipped(${hItem})","description":"CDOTA_Ability_Lua:\n( HSCRIPT hItem ) Caster equipped item., return void","prefix":"OnItemEquipped"},
"ACT_DOTA_TINKER_REARM2":{"body":"ACT_DOTA_TINKER_REARM2","description":"","prefix":"ACT_DOTA_TINKER_REARM2"},
"DOTA_HEROPICK_STATE_INTRO_SELECT":{"body":"DOTA_HEROPICK_STATE_INTRO_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_INTRO_SELECT"},
"GridNav_GridPosToWorldCenterX":{"body":"GridPosToWorldCenterX(${int_1})","description":"GridNav:\nGet the X position of the center of a given X index, return float","prefix":"GridPosToWorldCenterX"},
"CDOTAPlayer_GetAssignedHero":{"body":"GetAssignedHero()","description":"CDOTAPlayer:\nGet the player's hero., return handle","prefix":"GetAssignedHero"},
"CDOTABaseGameMode_SetUnseenFogOfWarEnabled":{"body":"SetUnseenFogOfWarEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnable or disable unseen fog of war. When enabled parts of the map the player has never seen will be completely hidden by fog of war., return void","prefix":"SetUnseenFogOfWarEnabled"},
"MODIFIER_PROPERTY_CAN_ATTACK_TREES":{"body":"MODIFIER_PROPERTY_CAN_ATTACK_TREES","description":"Value[167]modifierfunction->GetModifierCanAttackTrees","prefix":"MODIFIER_PROPERTY_CAN_ATTACK_TREES"},
"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS":{"body":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS","description":"","prefix":"DOTA_LOADOUT_TYPE_AMBIENT_EFFECTS"},
"CDOTA_PlayerResource_GetAssists":{"body":"GetAssists(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetAssists"},
"UTIL_MessageText_WithContext":{"body":"UTIL_MessageText_WithContext(${int_1}, ${string_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${handle_7})","description":"Sends colored text to one client. (Valid context keys: player_id, value, team_id), return void","prefix":"UTIL_MessageText_WithContext"},
"CDOTA_BaseNPC_Hero_IncrementLastHitStreak":{"body":"IncrementLastHitStreak()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementLastHitStreak"},
"CDOTA_PlayerResource_GetEventPremiumPoints":{"body":"GetEventPremiumPoints(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetEventPremiumPoints"},
"DAMAGE_TYPE_PURE":{"body":"DAMAGE_TYPE_PURE","description":"","prefix":"DAMAGE_TYPE_PURE"},
"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY":{"body":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY","description":"","prefix":"MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY"},
"CDOTA_BaseNPC_Hero_SetBuyBackDisabledByReapersScythe":{"body":"SetBuyBackDisabledByReapersScythe(${bBuybackDisabled})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBuyBackDisabledByReapersScythe"},
"PrecacheEntityListFromTable":{"body":"PrecacheEntityListFromTable(${handle_1}, ${handle_2})","description":"Precache a list of entity KeyValues tables, return void","prefix":"PrecacheEntityListFromTable"},
"CreateTrigger":{"body":"CreateTrigger(${Vector_1}, ${Vector_2}, ${Vector_3})","description":"CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger, return handle","prefix":"CreateTrigger"},
"DOTA_UNIT_CAP_MOVE_NONE":{"body":"DOTA_UNIT_CAP_MOVE_NONE","description":"","prefix":"DOTA_UNIT_CAP_MOVE_NONE"},
"CDOTAGamerules_EnableCustomGameSetupAutoLaunch":{"body":"EnableCustomGameSetupAutoLaunch(${bool_1})","description":"CDOTAGamerules:\nEnabled (true) or disable (false) auto launch for custom game setup., return void","prefix":"EnableCustomGameSetupAutoLaunch"},
"CDOTAGamerules_SetHeroSelectionTime":{"body":"SetHeroSelectionTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time players have to pick their hero., return void","prefix":"SetHeroSelectionTime"},
"CDOTA_BaseNPC_GetManaPercent":{"body":"GetManaPercent()","description":"CDOTA_BaseNPC:\nGet the percent of mana remaining., return int","prefix":"GetManaPercent"},
"CDOTA_PlayerResource_ClearKillsMatrix":{"body":"ClearKillsMatrix(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearKillsMatrix"},
"CDOTA_BaseNPC_SetMustReachEachGoalEntity":{"body":"SetMustReachEachGoalEntity(${must})","description":"CDOTA_BaseNPC:\nSet whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path., return void","prefix":"SetMustReachEachGoalEntity"},
"ACT_DOTA_CHANNEL_ABILITY_2":{"body":"ACT_DOTA_CHANNEL_ABILITY_2","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_2"},
"CDOTABaseAbility_SetActivated":{"body":"SetActivated(${bActivated})","description":"CDOTABaseAbility:\n, return void","prefix":"SetActivated"},
"CDOTA_Item_Lua_GetChannelledManaCostPerSecond":{"body":"GetChannelledManaCostPerSecond(${iLevel})","description":"CDOTA_Item_Lua:\nReturn mana cost at the given level per second while channeling (-1 is current)., return int","prefix":"GetChannelledManaCostPerSecond"},
"CDOTA_BaseNPC_GetAverageTrueAttackDamage":{"body":"GetAverageTrueAttackDamage()","description":"CDOTA_BaseNPC:\nReturns the average value of the minimum and maximum damage values., return int","prefix":"GetAverageTrueAttackDamage"},
"MODIFIER_EVENT_ON_SPENT_MANA":{"body":"MODIFIER_EVENT_ON_SPENT_MANA","description":"Value[137]modifierfunction->OnSpentMana","prefix":"MODIFIER_EVENT_ON_SPENT_MANA"},
"CDebugOverlayScriptHelper_EntityAxis":{"body":"EntityAxis(${ehandle_1}, ${float_2}, ${bool_3}, ${float_4})","description":"CDebugOverlayScriptHelper:\nDraws the axis of the entity origin, return void","prefix":"EntityAxis"},
"MODIFIER_PROPERTY_OVERRIDE_ANIMATION":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION","description":"Value[87]modifierfunction->GetOverrideAnimation","prefix":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION"},
"ACT_DOTA_CAST_ALACRITY":{"body":"ACT_DOTA_CAST_ALACRITY","description":"","prefix":"ACT_DOTA_CAST_ALACRITY"},
"CBaseEntity_ApplyLocalAngularVelocityImpulse":{"body":"ApplyLocalAngularVelocityImpulse(${angImpulse})","description":"CBaseEntity:\nApply an Ang Velocity Impulse, return void","prefix":"ApplyLocalAngularVelocityImpulse"},
"CDOTA_BaseNPC_RemoveItem":{"body":"RemoveItem(${hItem})","description":"CDOTA_BaseNPC:\nRemoves the passed item from this unit's inventory and deletes it., return void","prefix":"RemoveItem"},
"CDOTA_BaseNPC_Kill":{"body":"Kill(${hAbility}, ${hAttacker})","description":"CDOTA_BaseNPC:\nKills this NPC, with the params Ability and Attacker., return void","prefix":"Kill"},
"CDOTABaseGameMode_GetMinimumAttackSpeed":{"body":"GetMinimumAttackSpeed()","description":"CDOTABaseGameMode:\nGet the minimum attack speed for units., return int","prefix":"GetMinimumAttackSpeed"},
"CDebugOverlayScriptHelper_Cone":{"body":"Cone(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a wireframe cone. Specify endpoint and direction in world space., return void","prefix":"Cone"},
"CDOTA_BaseNPC_IsCreature":{"body":"IsCreature()","description":"CDOTA_BaseNPC:\nIs this a Creature type NPC?, return bool","prefix":"IsCreature"},
"CDOTABaseGameMode_SetModifyGoldFilter":{"body":"SetModifyGoldFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetModifyGoldFilter"},
"CDOTABaseAbility_GetAbilityIndex":{"body":"GetAbilityIndex()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityIndex"},
"rr_QueryBestResponse":{"body":"rr_QueryBestResponse(${handle_1}, ${handle_2}, ${handle_3})","description":"Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found)., return bool","prefix":"rr_QueryBestResponse"},
"CDOTA_PlayerResource_GetHealing":{"body":"GetHealing(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetHealing"},
"CDOTABaseGameMode_ClearDamageFilter":{"body":"ClearDamageFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls how a unit takes damage., return void","prefix":"ClearDamageFilter"},
"CDOTABaseGameMode_IsBuybackEnabled":{"body":"IsBuybackEnabled()","description":"CDOTABaseGameMode:\nEnables or disables buyback completely., return bool","prefix":"IsBuybackEnabled"},
"CDOTABaseAbility_SetAbilityIndex":{"body":"SetAbilityIndex(${iIndex})","description":"CDOTABaseAbility:\n, return void","prefix":"SetAbilityIndex"},
"ITEM_NOT_SHAREABLE":{"body":"ITEM_NOT_SHAREABLE","description":"","prefix":"ITEM_NOT_SHAREABLE"},
"MODIFIER_PROPERTY_MOVESPEED_LIMIT":{"body":"MODIFIER_PROPERTY_MOVESPEED_LIMIT","description":"Value[19]modifierfunction->GetModifierMoveSpeed_Limit","prefix":"MODIFIER_PROPERTY_MOVESPEED_LIMIT"},
"CDOTA_BaseNPC_GetSecondsPerAttack":{"body":"GetSecondsPerAttack()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetSecondsPerAttack"},
"CDOTA_PlayerResource_SetUnitShareMaskForPlayer":{"body":"SetUnitShareMaskForPlayer(${nPlayerID}, ${nOtherPlayerID}, ${nFlag}, ${bState})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetUnitShareMaskForPlayer"},
"DOTA_LOADOUT_TYPE_WEAPON":{"body":"DOTA_LOADOUT_TYPE_WEAPON","description":"","prefix":"DOTA_LOADOUT_TYPE_WEAPON"},
"DOTA_LOADOUT_TYPE_MUSIC":{"body":"DOTA_LOADOUT_TYPE_MUSIC","description":"","prefix":"DOTA_LOADOUT_TYPE_MUSIC"},
"PrecacheItemByNameAsync":{"body":"PrecacheItemByNameAsync(${string_1}, ${handle_2})","description":"Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished., return void","prefix":"PrecacheItemByNameAsync"},
"CDOTA_BaseNPC_Hero_IncrementLastHits":{"body":"IncrementLastHits()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementLastHits"},
"CDOTA_BaseNPC_IsBlind":{"body":"IsBlind()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsBlind"},
"CDOTA_BaseNPC_Hero_HasFlyingVision":{"body":"HasFlyingVision()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"HasFlyingVision"},
"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE":{"body":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE","description":"Value[80]modifierfunction->GetModifierPreAttack_CriticalStrike","prefix":"MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE"},
"CDOTA_Item_Lua_CastFilterResult":{"body":"CastFilterResult()","description":"CDOTA_Item_Lua:\nDetermine whether an issued command with no target is valid., return int","prefix":"CastFilterResult"},
"ACT_WAVEFORM_END":{"body":"ACT_WAVEFORM_END","description":"","prefix":"ACT_WAVEFORM_END"},
"DOTA_ATTRIBUTE_MAX":{"body":"DOTA_ATTRIBUTE_MAX","description":"","prefix":"DOTA_ATTRIBUTE_MAX"},
"MODIFIER_STATE_PROVIDES_VISION":{"body":"MODIFIER_STATE_PROVIDES_VISION","description":"","prefix":"MODIFIER_STATE_PROVIDES_VISION"},
"MODIFIER_EVENT_ON_HEAL_RECEIVED":{"body":"MODIFIER_EVENT_ON_HEAL_RECEIVED","description":"Value[145]modifierfunction->OnHealReceived","prefix":"MODIFIER_EVENT_ON_HEAL_RECEIVED"},
"ProjectileManager_ProjectileDodge":{"body":"ProjectileDodge(${handle_1})","description":"ProjectileManager:\nMakes the specified unit dodge projectiles, return void","prefix":"ProjectileDodge"},
"CDOTA_BaseNPC_Hero_GetRespawnTime":{"body":"GetRespawnTime()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetRespawnTime"},
"CDOTABaseAbility_GetAbilityKeyValues":{"body":"GetAbilityKeyValues()","description":"CDOTABaseAbility:\nGets the key values definition for this ability., return table","prefix":"GetAbilityKeyValues"},
"rr_AddDecisionRule":{"body":"rr_AddDecisionRule(${handle_1})","description":"Add a rule to the decision database., return bool","prefix":"rr_AddDecisionRule"},
"CDOTATutorial_SelectHero":{"body":"SelectHero(${string_1})","description":"CDOTATutorial:\nSelect a hero for the local player, return void","prefix":"SelectHero"},
"MODIFIER_PROPERTY_REFLECT_SPELL":{"body":"MODIFIER_PROPERTY_REFLECT_SPELL","description":"Value[91]modifierfunction->GetReflectSpell","prefix":"MODIFIER_PROPERTY_REFLECT_SPELL"},
"CDOTABaseAbility_SetOverrideCastPoint":{"body":"SetOverrideCastPoint(${flCastPoint})","description":"CDOTABaseAbility:\n, return void","prefix":"SetOverrideCastPoint"},
"CBaseEntity_SetAngularVelocity":{"body":"SetAngularVelocity(${pitchVel}, ${yawVel}, ${rollVel})","description":"CBaseEntity:\nSet the local angular velocity - takes float pitch,yaw,roll velocities, return void","prefix":"SetAngularVelocity"},
"MODIFIER_STATE_FLYING":{"body":"MODIFIER_STATE_FLYING","description":"","prefix":"MODIFIER_STATE_FLYING"},
"CCustomGameEventManager_Send_ServerToTeam":{"body":"Send_ServerToTeam(${int_1}, ${string_2}, ${handle_3})","description":"CCustomGameEventManager:\n( int TeamNumber, string EventName, table EventData ), return void","prefix":"Send_ServerToTeam"},
"CBaseEntity_SetFriction":{"body":"SetFriction(${flFriction})","description":"CBaseEntity:\nSet PLAYER friction, ignored for objects., return void","prefix":"SetFriction"},
"DOTA_ABILITY_BEHAVIOR_AOE":{"body":"DOTA_ABILITY_BEHAVIOR_AOE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_AOE"},
"CDOTABaseGameMode_SetFountainConstantManaRegen":{"body":"SetFountainConstantManaRegen(${flConstantManaRegen})","description":"CDOTABaseGameMode:\nSet the constant rate that the fountain will regen mana. (-1 for default), return void","prefix":"SetFountainConstantManaRegen"},
"ACT_DOTA_CAGED_CREEP_SMASH_OUT":{"body":"ACT_DOTA_CAGED_CREEP_SMASH_OUT","description":"","prefix":"ACT_DOTA_CAGED_CREEP_SMASH_OUT"},
"CDOTA_BaseNPC_RemoveModifierByName":{"body":"RemoveModifierByName(${pszScriptName})","description":"CDOTA_BaseNPC:\nRemoves a modifier., return void","prefix":"RemoveModifierByName"},
"PrintLinkedConsoleMessage":{"body":"PrintLinkedConsoleMessage(${string_1}, ${string_2})","description":"Print a console message with a linked console command, return void","prefix":"PrintLinkedConsoleMessage"},
"DOTA_LOADOUT_TYPE_TAUNT":{"body":"DOTA_LOADOUT_TYPE_TAUNT","description":"","prefix":"DOTA_LOADOUT_TYPE_TAUNT"},
"CSceneEntity_EstimateLength":{"body":"EstimateLength()","description":"CSceneEntity:\nReturns length of this scene in seconds., return float","prefix":"EstimateLength"},
"DOTA_PLAYER_LOADOUT_END":{"body":"DOTA_PLAYER_LOADOUT_END","description":"","prefix":"DOTA_PLAYER_LOADOUT_END"},
"CDOTA_BaseNPC_IsConsideredHero":{"body":"IsConsideredHero()","description":"CDOTA_BaseNPC:\nIs this unit a considered a hero for targeting purposes?, return bool","prefix":"IsConsideredHero"},
"DOTA_HUD_VISIBILITY_TOP_HEROES":{"body":"DOTA_HUD_VISIBILITY_TOP_HEROES","description":"","prefix":"DOTA_HUD_VISIBILITY_TOP_HEROES"},
"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK","description":"Value[82]modifierfunction->GetModifierMagical_ConstantBlock","prefix":"MODIFIER_PROPERTY_MAGICAL_CONSTANT_BLOCK"},
"DOTA_UNIT_TARGET_BASIC":{"body":"DOTA_UNIT_TARGET_BASIC","description":"","prefix":"DOTA_UNIT_TARGET_BASIC"},
"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS":{"body":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS","description":"","prefix":"DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS"},
"CDOTA_Item_IsMuted":{"body":"IsMuted()","description":"CDOTA_Item:\n, return bool","prefix":"IsMuted"},
"CDOTA_BaseNPC_TriggerModifierDodge":{"body":"TriggerModifierDodge()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"TriggerModifierDodge"},
"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY":{"body":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY","description":"","prefix":"ACT_DOTA_GREEVIL_OVERRIDE_ABILITY"},
"DOTA_ITEM_SLOT_5":{"body":"DOTA_ITEM_SLOT_5","description":"","prefix":"DOTA_ITEM_SLOT_5"},
"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP":{"body":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP","description":"Value[156]modifierfunction->GetModifierSpellsRequireHP","prefix":"MODIFIER_PROPERTY_SPELLS_REQUIRE_HP"},
"CEntities_FindByModel":{"body":"FindByModel(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByModel"},
"CDOTA_Buff_IncrementStackCount":{"body":"IncrementStackCount()","description":"CDOTA_Buff:\nIncrease this modifier's stack count by 1., return void","prefix":"IncrementStackCount"},
"ACT_DOTA_NIGHTSTALKER_TRANSITION":{"body":"ACT_DOTA_NIGHTSTALKER_TRANSITION","description":"","prefix":"ACT_DOTA_NIGHTSTALKER_TRANSITION"},
"DOTA_SPEECH_USER_SINGLE":{"body":"DOTA_SPEECH_USER_SINGLE","description":"","prefix":"DOTA_SPEECH_USER_SINGLE"},
"MODIFIER_EVENT_ON_HEALTH_GAINED":{"body":"MODIFIER_EVENT_ON_HEALTH_GAINED","description":"Value[141]modifierfunction->OnHealthGained","prefix":"MODIFIER_EVENT_ON_HEALTH_GAINED"},
"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED":{"body":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED","description":"","prefix":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_FINISHED"},
"CDOTA_Ability_Lua_GetBehavior":{"body":"GetBehavior()","description":"CDOTA_Ability_Lua:\nReturn cast behavior type of this ability., return int","prefix":"GetBehavior"},
"CDOTA_BaseNPC_IsTower":{"body":"IsTower()","description":"CDOTA_BaseNPC:\nIs this a tower?, return bool","prefix":"IsTower"},
"ACT_DOTA_FLAIL":{"body":"ACT_DOTA_FLAIL","description":"","prefix":"ACT_DOTA_FLAIL"},
"CDOTA_BaseNPC_Hero_SetCustomDeathXP":{"body":"SetCustomDeathXP(${iValue})","description":"CDOTA_BaseNPC_Hero:\nSets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!, return void","prefix":"SetCustomDeathXP"},
"CDOTA_Ability_Lua_OnHeroLevelUp":{"body":"OnHeroLevelUp()","description":"CDOTA_Ability_Lua:\nCaster gained a level., return void","prefix":"OnHeroLevelUp"},
"CDOTAGamerules_SetUseBaseGoldBountyOnHeroes":{"body":"SetUseBaseGoldBountyOnHeroes(${bool_1})","description":"CDOTAGamerules:\nHeroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas., return void","prefix":"SetUseBaseGoldBountyOnHeroes"},
"CDOTABaseAbility_IsOwnersManaEnough":{"body":"IsOwnersManaEnough()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsOwnersManaEnough"},
"ACT_DOTA_CAPTURE":{"body":"ACT_DOTA_CAPTURE","description":"","prefix":"ACT_DOTA_CAPTURE"},
"ACT_DOTA_TINKER_REARM1":{"body":"ACT_DOTA_TINKER_REARM1","description":"","prefix":"ACT_DOTA_TINKER_REARM1"},
"CDOTABaseAbility_IsPassive":{"body":"IsPassive()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsPassive"},
"CDOTA_BaseNPC_SetAttackCapability":{"body":"SetAttackCapability(${iAttackCapabilities})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetAttackCapability"},
"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_ILLUSIONS"},
"CDebugOverlayScriptHelper_Axis":{"body":"Axis(${Vector_1}, ${Quaternion_2}, ${float_3}, ${bool_4}, ${float_5})","description":"CDebugOverlayScriptHelper:\nDraws an axis. Specify origin + orientation in world space., return void","prefix":"Axis"},
"CDOTABaseAbility_GetChannelTime":{"body":"GetChannelTime()","description":"CDOTABaseAbility:\n, return float","prefix":"GetChannelTime"},
"CDOTA_BaseNPC_Hero_HeroLevelUp":{"body":"HeroLevelUp(${bPlayEffects})","description":"CDOTA_BaseNPC_Hero:\nLevels up the hero, true or false to play effects., return void","prefix":"HeroLevelUp"},
"CBaseEntity_SetForwardVector":{"body":"SetForwardVector(${v})","description":"CBaseEntity:\nSet the orientation of the entity to have this forward vector., return void","prefix":"SetForwardVector"},
"CDOTA_Buff_StartIntervalThink":{"body":"StartIntervalThink(${flInterval})","description":"CDOTA_Buff:\nStart this modifier's think function (OnIntervalThink) with the given interval (float).  To stop, call with -1., return void","prefix":"StartIntervalThink"},
"CDOTA_PlayerResource_HasRandomed":{"body":"HasRandomed(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HasRandomed"},
"CDOTA_BaseNPC_Hero_GetBuybackCooldownTime":{"body":"GetBuybackCooldownTime()","description":"CDOTA_BaseNPC_Hero:\nReturn float value for the amount of time left on cooldown for this hero's buyback., return float","prefix":"GetBuybackCooldownTime"},
"CBaseEntity_GetLocalVelocity":{"body":"GetLocalVelocity()","description":"CBaseEntity:\nGet Entity relative velocity., return Vector","prefix":"GetLocalVelocity"},
"CDOTA_Ability_Lua_SpeakTrigger":{"body":"SpeakTrigger()","description":"CDOTA_Ability_Lua:\nReturn the type of speech used., return int","prefix":"SpeakTrigger"},
"ACT_DOTA_IDLE_SLEEPING_END":{"body":"ACT_DOTA_IDLE_SLEEPING_END","description":"","prefix":"ACT_DOTA_IDLE_SLEEPING_END"},
"CDOTA_Modifier_Lua_GetTexture":{"body":"GetTexture()","description":"CDOTA_Modifier_Lua:\nReturn the name of the buff icon to be shown for this modifier., return string","prefix":"GetTexture"},
"CDOTA_PlayerResource_GetDenies":{"body":"GetDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetDenies"},
"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE":{"body":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE","description":"Value[106]modifierfunction->GetModifierSuperIllusionWithUltimate","prefix":"MODIFIER_PROPERTY_SUPER_ILLUSION_WITH_ULTIMATE"},
"CDOTABaseAbility_OnHeroLevelUp":{"body":"OnHeroLevelUp()","description":"CDOTABaseAbility:\n, return void","prefix":"OnHeroLevelUp"},
"DOTA_TEAM_CUSTOM_MAX":{"body":"DOTA_TEAM_CUSTOM_MAX","description":"","prefix":"DOTA_TEAM_CUSTOM_MAX"},
"DOTA_ABILITY_BEHAVIOR_NONE":{"body":"DOTA_ABILITY_BEHAVIOR_NONE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NONE"},
"CDOTA_Modifier_Lua_StatusEffectPriority":{"body":"StatusEffectPriority()","description":"CDOTA_Modifier_Lua:\nRelationship of this status effect with those from other buffs (higher is more likely to be shown)., return int","prefix":"StatusEffectPriority"},
"ACT_DOTA_ATTACK_EVENT_BASH":{"body":"ACT_DOTA_ATTACK_EVENT_BASH","description":"","prefix":"ACT_DOTA_ATTACK_EVENT_BASH"},
"CDOTA_BaseNPC_HasAttackCapability":{"body":"HasAttackCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasAttackCapability"},
"CDOTA_Modifier_Lua_IsStunDebuff":{"body":"IsStunDebuff()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is considered a stun for purge reasons., return bool","prefix":"IsStunDebuff"},
"CDOTA_Item_Lua_IsStealable":{"body":"IsStealable()","description":"CDOTA_Item_Lua:\nReturns true if this ability can be stolen by Spell Steal., return bool","prefix":"IsStealable"},
"CDOTABaseAbility_IsStolen":{"body":"IsStolen()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsStolen"},
"CDOTA_BaseNPC_Hero_IsBuybackDisabledByReapersScythe":{"body":"IsBuybackDisabledByReapersScythe()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"IsBuybackDisabledByReapersScythe"},
"CDOTA_BaseNPC_GetPlayerOwnerID":{"body":"GetPlayerOwnerID()","description":"CDOTA_BaseNPC:\nGet the owner player ID for this unit., return int","prefix":"GetPlayerOwnerID"},
"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE":{"body":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE","description":"Value[89]modifierfunction->GetOverrideAnimationRate","prefix":"MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE"},
"CDOTABaseAbility_OnSpellStart":{"body":"OnSpellStart()","description":"CDOTABaseAbility:\n, return void","prefix":"OnSpellStart"},
"CDOTA_PlayerResource_GetLastHitMultikill":{"body":"GetLastHitMultikill(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLastHitMultikill"},
"CDOTA_Item_Lua_GetConceptRecipientType":{"body":"GetConceptRecipientType()","description":"CDOTA_Item_Lua:\nReturn who hears speech when this spell is cast., return int","prefix":"GetConceptRecipientType"},
"CDOTABaseAbility_OnAbilityPhaseStart":{"body":"OnAbilityPhaseStart()","description":"CDOTABaseAbility:\n, return bool","prefix":"OnAbilityPhaseStart"},
"ACT_DOTA_OVERRIDE_ABILITY_1":{"body":"ACT_DOTA_OVERRIDE_ABILITY_1","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_1"},
"StartSoundEvent":{"body":"StartSoundEvent(${string_1}, ${handle_2})","description":"Start a sound event, return void","prefix":"StartSoundEvent"},
"MODIFIER_STATE_COMMAND_RESTRICTED":{"body":"MODIFIER_STATE_COMMAND_RESTRICTED","description":"","prefix":"MODIFIER_STATE_COMMAND_RESTRICTED"},
"CDOTA_Item_Lua_GetAssociatedPrimaryAbilities":{"body":"GetAssociatedPrimaryAbilities()","description":"CDOTA_Item_Lua:\nReturns abilities that are stolen simultaneously, or otherwise related in functionality., return string","prefix":"GetAssociatedPrimaryAbilities"},
"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"},
"CDebugOverlayScriptHelper_Cross3D":{"body":"Cross3D(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a world-aligned cross. Specify origin in world space., return void","prefix":"Cross3D"},
"FireGameEventLocal":{"body":"FireGameEventLocal(${string_1}, ${handle_2})","description":"Fire a game event without broadcasting to the client., return void","prefix":"FireGameEventLocal"},
"CDOTABaseGameMode_SetCustomBuybackCooldownEnabled":{"body":"SetCustomBuybackCooldownEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback cooldowns., return void","prefix":"SetCustomBuybackCooldownEnabled"},
"CDOTA_Item_Lua_GetCooldown":{"body":"GetCooldown(${iLevel})","description":"CDOTA_Item_Lua:\nReturn cooldown of this ability., return float","prefix":"GetCooldown"},
"CDOTABaseAbility_GetConceptRecipientType":{"body":"GetConceptRecipientType()","description":"CDOTABaseAbility:\n, return int","prefix":"GetConceptRecipientType"},
"CDOTABaseAbility_GetAnimationIgnoresModelScale":{"body":"GetAnimationIgnoresModelScale()","description":"CDOTABaseAbility:\n, return bool","prefix":"GetAnimationIgnoresModelScale"},
"CDOTA_BaseNPC_Hero_GetAttacker":{"body":"GetAttacker(${nIndex})","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetAttacker"},
"GetWorldMinX":{"body":"GetWorldMinX()","description":"Gets the world's minimum X position., return float","prefix":"GetWorldMinX"},
"CDOTABaseAbility_OnHeroCalculateStatBonus":{"body":"OnHeroCalculateStatBonus()","description":"CDOTABaseAbility:\n, return void","prefix":"OnHeroCalculateStatBonus"},
"CDOTA_PlayerResource_GetPlayerReservedState":{"body":"GetPlayerReservedState(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"GetPlayerReservedState"},
"CDOTA_Buff_GetStackCount":{"body":"GetStackCount()","description":"CDOTA_Buff:\n, return int","prefix":"GetStackCount"},
"CDOTA_PlayerResource_AddRunePickup":{"body":"AddRunePickup(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddRunePickup"},
"CDOTA_BaseNPC_SetInitialGoalEntity":{"body":"SetInitialGoalEntity(${hGoal})","description":"CDOTA_BaseNPC:\nSets the initial waypoint goal for this NPC., return void","prefix":"SetInitialGoalEntity"},
"CDOTA_Ability_Nian_Leap_SetPlaybackRate":{"body":"SetPlaybackRate(${flRate})","description":"CDOTA_Ability_Nian_Leap:\nOverride playbackrate, return void","prefix":"SetPlaybackRate"},
"CDOTA_Buff_GetName":{"body":"GetName()","description":"CDOTA_Buff:\n, return string","prefix":"GetName"},
"RotateOrientation":{"body":"RotateOrientation(${QAngle_1}, ${QAngle_2})","description":"Rotate a QAngle by another QAngle., return QAngle","prefix":"RotateOrientation"},
"CDOTA_BaseNPC_GetCreationTime":{"body":"GetCreationTime()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetCreationTime"},
"ACT_DOTA_CAST_ABILITY_7":{"body":"ACT_DOTA_CAST_ABILITY_7","description":"","prefix":"ACT_DOTA_CAST_ABILITY_7"},
"CSceneEntity_IsPlayingBack":{"body":"IsPlayingBack()","description":"CSceneEntity:\nIf this scene is currently playing., return bool","prefix":"IsPlayingBack"},
"DOTA_DAMAGE_FLAG_REFLECTION":{"body":"DOTA_DAMAGE_FLAG_REFLECTION","description":"","prefix":"DOTA_DAMAGE_FLAG_REFLECTION"},
"CDOTABaseGameMode_SetCustomGameForceHero":{"body":"SetCustomGameForceHero(${pHeroName})","description":"CDOTABaseGameMode:\nForce all players to use the specified hero and disable the normal hero selection process. Must be used before hero selection., return void","prefix":"SetCustomGameForceHero"},
"UF_FAIL_DEAD":{"body":"UF_FAIL_DEAD","description":"","prefix":"UF_FAIL_DEAD"},
"CDOTATutorial_CompleteQuest":{"body":"CompleteQuest(${string_1})","description":"CDOTATutorial:\nComplete a quest,, return void","prefix":"CompleteQuest"},
"CDOTA_BaseNPC_Hero_GetNumItemsInStash":{"body":"GetNumItemsInStash()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetNumItemsInStash"},
"DebugDrawBoxDirection":{"body":"DebugDrawBoxDirection(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Vector_4}, ${Vector_5}, ${float_6}, ${float_7})","description":"Draw a debug forward box (cent, min, max, forward, vRgb, a, duration), return void","prefix":"DebugDrawBoxDirection"},
"PATTACH_ROOTBONE_FOLLOW":{"body":"PATTACH_ROOTBONE_FOLLOW","description":"","prefix":"PATTACH_ROOTBONE_FOLLOW"},
"CDOTA_Modifier_Lua_GetAuraDuration":{"body":"GetAuraDuration()","description":"CDOTA_Modifier_Lua:\nReturns aura stickiness, return float","prefix":"GetAuraDuration"},
"DOTA_LOADOUT_TYPE_NECK":{"body":"DOTA_LOADOUT_TYPE_NECK","description":"","prefix":"DOTA_LOADOUT_TYPE_NECK"},
"CDOTABaseGameMode_SetDaynightCycleDisabled":{"body":"SetDaynightCycleDisabled(${bDisable})","description":"CDOTABaseGameMode:\nEnable or disable the day/night cycle., return void","prefix":"SetDaynightCycleDisabled"},
"CDOTA_BaseNPC_GetMaximumGoldBounty":{"body":"GetMaximumGoldBounty()","description":"CDOTA_BaseNPC:\nGet the maximum gold bounty for this unit., return int","prefix":"GetMaximumGoldBounty"},
"MODIFIER_PROPERTY_ILLUSION_LABEL":{"body":"MODIFIER_PROPERTY_ILLUSION_LABEL","description":"Value[104]modifierfunction->GetModifierIllusionLabel","prefix":"MODIFIER_PROPERTY_ILLUSION_LABEL"},
"MODIFIER_FUNCTION_LAST":{"body":"MODIFIER_FUNCTION_LAST","description":"","prefix":"MODIFIER_FUNCTION_LAST"},
"ACT_DOTA_SHALLOW_GRAVE":{"body":"ACT_DOTA_SHALLOW_GRAVE","description":"","prefix":"ACT_DOTA_SHALLOW_GRAVE"},
"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE":{"body":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE","description":"Value[95]modifierfunction->GetBonusNightVisionUnique","prefix":"MODIFIER_PROPERTY_BONUS_NIGHT_VISION_UNIQUE"},
"CDOTA_Buff_GetCaster":{"body":"GetCaster()","description":"CDOTA_Buff:\nGet the owner of the ability responsible for the modifier., return handle","prefix":"GetCaster"},
"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2","description":"Value[16]modifierfunction->GetModifierMoveSpeedBonus_Special_Boots_2","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE_2"},
"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR":{"body":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR","description":"Value[85]modifierfunction->GetModifierPhysical_ConstantBlockUnavoidablePreArmor","prefix":"MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK_UNAVOIDABLE_PRE_ARMOR"},
"CDOTA_Item_Lua_GetCustomCastError":{"body":"GetCustomCastError()","description":"CDOTA_Item_Lua:\nReturn the error string of a failed command with no target., return string","prefix":"GetCustomCastError"},
"CDOTA_Modifier_Lua_Vertical_Motion_ApplyVerticalMotionController":{"body":"ApplyVerticalMotionController()","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nStarts the vertical motion controller effects for this buff.  Returns true if successful., return bool","prefix":"ApplyVerticalMotionController"},
"CDOTA_BaseNPC_GetHealthRegen":{"body":"GetHealthRegen()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetHealthRegen"},
"ACT_DOTA_CAST_SUN_STRIKE":{"body":"ACT_DOTA_CAST_SUN_STRIKE","description":"","prefix":"ACT_DOTA_CAST_SUN_STRIKE"},
"GridNav_IsBlocked":{"body":"IsBlocked(${Vector_1})","description":"GridNav:\nChecks whether the given position is blocked, return bool","prefix":"IsBlocked"},
"Convars_RegisterConvar":{"body":"RegisterConvar(${string_1}, ${string_2}, ${string_3}, ${int_4})","description":"Convars:\nRegisterConvar(name, defaultValue, helpString, flags): register a new console variable., return void","prefix":"RegisterConvar"},
"CDOTA_PlayerResource_GetReliableGold":{"body":"GetReliableGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetReliableGold"},
"CScriptParticleManager_CreateParticleForTeam":{"body":"CreateParticleForTeam(${string_1}, ${int_2}, ${handle_3}, ${int_4})","description":"CScriptParticleManager:\nCreates a new particle effect that only plays for the specified team, return int","prefix":"CreateParticleForTeam"},
"MODIFIER_EVENT_ON_ATTACK_RECORD":{"body":"MODIFIER_EVENT_ON_ATTACK_RECORD","description":"Value[115]modifierfunction->OnAttackRecord","prefix":"MODIFIER_EVENT_ON_ATTACK_RECORD"},
"CNativeOutputs_Init":{"body":"Init(${int_1})","description":"CNativeOutputs:\nInitialize with number of outputs, return void","prefix":"Init"},
"ACT_DOTA_LIFESTEALER_INFEST_END":{"body":"ACT_DOTA_LIFESTEALER_INFEST_END","description":"","prefix":"ACT_DOTA_LIFESTEALER_INFEST_END"},
"PATTACH_EYES_FOLLOW":{"body":"PATTACH_EYES_FOLLOW","description":"","prefix":"PATTACH_EYES_FOLLOW"},
"DOTA_GAMERULES_STATE_HERO_SELECTION":{"body":"DOTA_GAMERULES_STATE_HERO_SELECTION","description":"","prefix":"DOTA_GAMERULES_STATE_HERO_SELECTION"},
"CDOTA_PlayerResource_GetCustomTeamAssignment":{"body":"GetCustomTeamAssignment(${iPlayerID})","description":"CDOTA_PlayerResource:\nGet the current custom team assignment for this player., return int","prefix":"GetCustomTeamAssignment"},
"UTIL_MessageTextAll_WithContext":{"body":"UTIL_MessageTextAll_WithContext(${string_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5}, ${handle_6})","description":"Sends colored text to all clients. (Valid context keys: player_id, value, team_id), return void","prefix":"UTIL_MessageTextAll_WithContext"},
"StopSoundOn":{"body":"StopSoundOn(${string_1}, ${handle_2})","description":"Stop named sound on Entity, return void","prefix":"StopSoundOn"},
"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE":{"body":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE","description":"Value[77]modifierfunction->GetModifierPercentageCasttime","prefix":"MODIFIER_PROPERTY_CASTTIME_PERCENTAGE"},
"Convars_GetInt":{"body":"GetInt(${string_1})","description":"Convars:\nGetInt(name) : returns the convar as an int. May return null if no such convar., return table","prefix":"GetInt"},
"DOTA_SPEECH_USER_ALL":{"body":"DOTA_SPEECH_USER_ALL","description":"","prefix":"DOTA_SPEECH_USER_ALL"},
"CDOTA_BaseNPC_GetDayTimeVisionRange":{"body":"GetDayTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return int","prefix":"GetDayTimeVisionRange"},
"CBaseModelEntity_SetRenderColor":{"body":"SetRenderColor(${r}, ${g}, ${b})","description":"CBaseModelEntity:\nSetRenderColor( r, g, b ): Sets the render color of the entity., return void","prefix":"SetRenderColor"},
"MODIFIER_PROPERTY_BONUS_DAY_VISION":{"body":"MODIFIER_PROPERTY_BONUS_DAY_VISION","description":"Value[93]modifierfunction->GetBonusDayVision","prefix":"MODIFIER_PROPERTY_BONUS_DAY_VISION"},
"ACT_DOTA_RELAX_LOOP":{"body":"ACT_DOTA_RELAX_LOOP","description":"","prefix":"ACT_DOTA_RELAX_LOOP"},
"DOTA_RUNE_REGENERATION":{"body":"DOTA_RUNE_REGENERATION","description":"","prefix":"DOTA_RUNE_REGENERATION"},
"MODIFIER_PROPERTY_AVOID_SPELL":{"body":"MODIFIER_PROPERTY_AVOID_SPELL","description":"Value[41]modifierfunction->GetModifierAvoidSpell","prefix":"MODIFIER_PROPERTY_AVOID_SPELL"},
"DOTA_ModifyGold_HeroKill":{"body":"DOTA_ModifyGold_HeroKill","description":"","prefix":"DOTA_ModifyGold_HeroKill"},
"MODIFIER_PROPERTY_MANA_BONUS":{"body":"MODIFIER_PROPERTY_MANA_BONUS","description":"Value[58]modifierfunction->GetModifierManaBonus","prefix":"MODIFIER_PROPERTY_MANA_BONUS"},
"SendOverheadEventMessage":{"body":"SendOverheadEventMessage(${handle_1}, ${int_2}, ${handle_3}, ${int_4}, ${handle_5})","description":"( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*, return void","prefix":"SendOverheadEventMessage"},
"ACT_DOTA_RATTLETRAP_HOOKSHOT_START":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START","description":"","prefix":"ACT_DOTA_RATTLETRAP_HOOKSHOT_START"},
"CDOTA_BaseNPC_IsRooted":{"body":"IsRooted()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsRooted"},
"CDOTA_BaseNPC_SetCursorTargetingNothing":{"body":"SetCursorTargetingNothing(${bTargetingNothing})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCursorTargetingNothing"},
"CDOTABaseAbility_GetGoldCostForUpgrade":{"body":"GetGoldCostForUpgrade(${iLevel})","description":"CDOTABaseAbility:\n, return int","prefix":"GetGoldCostForUpgrade"},
"DOTA_MOTION_CONTROLLER_PRIORITY_LOW":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_LOW"},
"GridNav_FindPathLength":{"body":"FindPathLength(${Vector_1}, ${Vector_2})","description":"GridNav:\nFind a path between the two points an return the length of the path. If there is not a path between the points the returned value will be -1. float (vStart, vEnd ), return float","prefix":"FindPathLength"},
"CDOTA_BaseNPC_RemoveAbility":{"body":"RemoveAbility(${pszAbilityName})","description":"CDOTA_BaseNPC:\nRemove an ability from this unit by name., return void","prefix":"RemoveAbility"},
"CDOTA_PlayerResource_IsValidPlayer":{"body":"IsValidPlayer(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidPlayer"},
"CDOTA_BaseNPC_GetMainControllingPlayer":{"body":"GetMainControllingPlayer()","description":"CDOTA_BaseNPC:\nReturns the player ID of the controlling player., return int","prefix":"GetMainControllingPlayer"},
"CDOTA_BaseNPC_MoveToNPCToGiveItem":{"body":"MoveToNPCToGiveItem(${hNPC}, ${hItem})","description":"CDOTA_BaseNPC:\nGive an item to another unit., return void","prefix":"MoveToNPCToGiveItem"},
"DOTA_ITEM_SLOT_2":{"body":"DOTA_ITEM_SLOT_2","description":"","prefix":"DOTA_ITEM_SLOT_2"},
"PrecacheUnitByNameSync":{"body":"PrecacheUnitByNameSync(${string_1}, ${handle_2}, ${int_3})","description":"Precaches a DOTA unit by its dota_npc_units.txt name, return void","prefix":"PrecacheUnitByNameSync"},
"MODIFIER_STATE_NO_UNIT_COLLISION":{"body":"MODIFIER_STATE_NO_UNIT_COLLISION","description":"","prefix":"MODIFIER_STATE_NO_UNIT_COLLISION"},
"CDOTABaseAbility_IsAttributeBonus":{"body":"IsAttributeBonus()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsAttributeBonus"},
"CDOTA_Modifier_Lua_GetEffectName":{"body":"GetEffectName()","description":"CDOTA_Modifier_Lua:\nReturn the name of the particle system that is created while this modifier is active., return string","prefix":"GetEffectName"},
"UTIL_ResetMessageTextAll":{"body":"UTIL_ResetMessageTextAll()","description":"Clear all message text from all clients., return void","prefix":"UTIL_ResetMessageTextAll"},
"MODIFIER_EVENT_ON_DOMINATED":{"body":"MODIFIER_EVENT_ON_DOMINATED","description":"Value[162]modifierfunction->OnDominated","prefix":"MODIFIER_EVENT_ON_DOMINATED"},
"CDOTA_BaseNPC_Hero_GetDeathGoldCost":{"body":"GetDeathGoldCost()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetDeathGoldCost"},
"CDOTA_BaseNPC_GetPlayerOwner":{"body":"GetPlayerOwner()","description":"CDOTA_BaseNPC:\nReturns the player that owns this unit., return handle","prefix":"GetPlayerOwner"},
"CScriptPrecacheContext_GetValue":{"body":"GetValue(${string_1})","description":"CScriptPrecacheContext:\nReads a spawn key, return table","prefix":"GetValue"},
"DOTA_HUD_VISIBILITY_INVENTORY_SHOP":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_SHOP"},
"GridNav_GetAllTreesAroundPoint":{"body":"GetAllTreesAroundPoint(${Vector_1}, ${float_2}, ${bool_3})","description":"GridNav:\nReturns a table full of tree HSCRIPTS (vPosition, flRadius, bFullCollision)., return table","prefix":"GetAllTreesAroundPoint"},
"CBaseEntity_FirstMoveChild":{"body":"FirstMoveChild()","description":"CBaseEntity:\n, return handle","prefix":"FirstMoveChild"},
"MODIFIER_STATE_OUT_OF_GAME":{"body":"MODIFIER_STATE_OUT_OF_GAME","description":"","prefix":"MODIFIER_STATE_OUT_OF_GAME"},
"CDOTABaseGameMode_GetStashPurchasingDisabled":{"body":"GetStashPurchasingDisabled()","description":"CDOTABaseGameMode:\nTurn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items., return bool","prefix":"GetStashPurchasingDisabled"},
"CDOTA_BaseNPC_IsAlive":{"body":"IsAlive()","description":"CDOTA_BaseNPC:\nIs this unit alive?, return bool","prefix":"IsAlive"},
"CDOTA_PlayerResource_GetNearbyCreepDeaths":{"body":"GetNearbyCreepDeaths(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNearbyCreepDeaths"},
"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_NO_TARGET"},
"CDebugOverlayScriptHelper_UnitTestCycleOverlayRenderType":{"body":"UnitTestCycleOverlayRenderType()","description":"CDebugOverlayScriptHelper:\nToggles the overlay render type, for unit tests, return void","prefix":"UnitTestCycleOverlayRenderType"},
"CDOTABaseGameMode_SetFountainPercentageManaRegen":{"body":"SetFountainPercentageManaRegen(${flPercentageManaRegen})","description":"CDOTABaseGameMode:\nSet the percentage rate that the fountain will regen mana. (-1 for default), return void","prefix":"SetFountainPercentageManaRegen"},
"CDOTA_BaseNPC_SetBaseMaxHealth":{"body":"SetBaseMaxHealth(${flBaseMaxHealth})","description":"CDOTA_BaseNPC:\nSet a new base max health value., return void","prefix":"SetBaseMaxHealth"},
"CDOTA_PlayerResource_AddGoldSpentOnSupport":{"body":"AddGoldSpentOnSupport(${iPlayerID}, ${iCost})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddGoldSpentOnSupport"},
"CEntityInstance_GetName":{"body":"GetName()","description":"CEntityInstance:\n, return string","prefix":"GetName"},
"ACT_DOTA_RAZE_2":{"body":"ACT_DOTA_RAZE_2","description":"","prefix":"ACT_DOTA_RAZE_2"},
"ACT_DOTA_CAST_CHAOS_METEOR":{"body":"ACT_DOTA_CAST_CHAOS_METEOR","description":"","prefix":"ACT_DOTA_CAST_CHAOS_METEOR"},
"CBaseEntity_ApplyAbsVelocityImpulse":{"body":"ApplyAbsVelocityImpulse(${vecImpulse})","description":"CBaseEntity:\nApply a Velocity Impulse, return void","prefix":"ApplyAbsVelocityImpulse"},
"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN":{"body":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN","description":"Value[18]modifierfunction->GetModifierMoveSpeed_AbsoluteMin","prefix":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN"},
"CDOTA_BaseNPC_Creature_SetMagicResistanceGain":{"body":"SetMagicResistanceGain(${flMagicResistanceGain})","description":"CDOTA_BaseNPC_Creature:\nSet the magic resistance gained per level on this creature., return void","prefix":"SetMagicResistanceGain"},
"CDOTA_Modifier_Lua_Motion_Both_SetPriority":{"body":"SetPriority(${nMotionPriority})","description":"CDOTA_Modifier_Lua_Motion_Both:\nSet the priority, return void","prefix":"SetPriority"},
"CDOTA_Ability_Lua_IsRefreshable":{"body":"IsRefreshable()","description":"CDOTA_Ability_Lua:\nReturns true if this ability is refreshed by Refresher Orb., return bool","prefix":"IsRefreshable"},
"UF_FAIL_SUMMONED":{"body":"UF_FAIL_SUMMONED","description":"","prefix":"UF_FAIL_SUMMONED"},
"GridNav_DestroyTreesAroundPoint":{"body":"DestroyTreesAroundPoint(${Vector_1}, ${float_2}, ${bool_3})","description":"GridNav:\nDestroy all trees in the area(vPosition, flRadius, bFullCollision, return void","prefix":"DestroyTreesAroundPoint"},
"CDOTA_BaseNPC_Hero_GetTogglableWearable":{"body":"GetTogglableWearable(${nSlotType})","description":"CDOTA_BaseNPC_Hero:\nGet wearable entity in slot (slot), return handle","prefix":"GetTogglableWearable"},
"DOTA_LOADOUT_TYPE_MEGA_KILLS":{"body":"DOTA_LOADOUT_TYPE_MEGA_KILLS","description":"","prefix":"DOTA_LOADOUT_TYPE_MEGA_KILLS"},
"CDOTA_BaseNPC_Hero_CalculateStatBonus":{"body":"CalculateStatBonus()","description":"CDOTA_BaseNPC_Hero:\nRecalculate all stats after the hero gains stats., return void","prefix":"CalculateStatBonus"},
"CDebugOverlayScriptHelper_Line2D":{"body":"Line2D(${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})","description":"CDebugOverlayScriptHelper:\nDraws a line between two points in screenspace, return void","prefix":"Line2D"},
"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGHEST"},
"GetFrostyPointsForRound":{"body":"GetFrostyPointsForRound(${int_1}, ${int_2}, ${int_3})","description":", return int","prefix":"GetFrostyPointsForRound"},
"DOTA_HEROPICK_STATE_CD_INTRO":{"body":"DOTA_HEROPICK_STATE_CD_INTRO","description":"","prefix":"DOTA_HEROPICK_STATE_CD_INTRO"},
"LinkLuaModifier":{"body":"LinkLuaModifier(${string_1}, ${string_2}, ${int_3})","description":"Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType)., return void","prefix":"LinkLuaModifier"},
"DOTA_HEROPICK_STATE_CM_BAN2":{"body":"DOTA_HEROPICK_STATE_CM_BAN2","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN2"},
"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL":{"body":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL","description":"Value[128]modifierfunction->OnAbilityEndChannel","prefix":"MODIFIER_EVENT_ON_ABILITY_END_CHANNEL"},
"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_END"},
"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2":{"body":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2","description":"","prefix":"DOTA_LOADOUT_TYPE_OFFHAND_WEAPON2"},
"CDOTA_BaseNPC_Hero_RecordLastHit":{"body":"RecordLastHit()","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"RecordLastHit"},
"RemoveSpawnGroupFilterProxy":{"body":"RemoveSpawnGroupFilterProxy(${string_1})","description":"Remove the C proxy for a script-based spawn group filter, return void","prefix":"RemoveSpawnGroupFilterProxy"},
"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_MEDIUM"},
"CDOTA_BaseNPC_FindAllModifiers":{"body":"FindAllModifiers()","description":"CDOTA_BaseNPC:\nReturns a table of all of the modifiers on the NPC., return table","prefix":"FindAllModifiers"},
"DOTA_UNIT_CAP_MOVE_FLY":{"body":"DOTA_UNIT_CAP_MOVE_FLY","description":"","prefix":"DOTA_UNIT_CAP_MOVE_FLY"},
"CDOTA_Item_SetPurchaser":{"body":"SetPurchaser(${hPurchaser})","description":"CDOTA_Item:\nSet the purchaser of record for this item., return void","prefix":"SetPurchaser"},
"EmitAnnouncerSoundForTeam":{"body":"EmitAnnouncerSoundForTeam(${string_1}, ${int_2})","description":"Emit an announcer sound for a team., return void","prefix":"EmitAnnouncerSoundForTeam"},
"CDOTA_BaseNPC_IsDeniable":{"body":"IsDeniable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsDeniable"},
"ACT_DOTA_CAST_EMP":{"body":"ACT_DOTA_CAST_EMP","description":"","prefix":"ACT_DOTA_CAST_EMP"},
"CDOTA_BaseNPC_GetOpposingTeamNumber":{"body":"GetOpposingTeamNumber()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetOpposingTeamNumber"},
"CPointTemplate_SetSpawnCallback":{"body":"SetSpawnCallback(${hCallbackFunc}, ${hCallbackScope})","description":"CPointTemplate:\nSetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array., return void","prefix":"SetSpawnCallback"},
"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE","description":"Value[11]modifierfunction->GetModifierMoveSpeedOverride","prefix":"MODIFIER_PROPERTY_MOVESPEED_BASE_OVERRIDE"},
"ACT_DOTA_CONSTANT_LAYER":{"body":"ACT_DOTA_CONSTANT_LAYER","description":"","prefix":"ACT_DOTA_CONSTANT_LAYER"},
"CDOTA_Item_Lua_GetCustomCastErrorLocation":{"body":"GetCustomCastErrorLocation(${vLocation})","description":"CDOTA_Item_Lua:\n(Vector vLocation) Return the error string of a failed command on a location., return string","prefix":"GetCustomCastErrorLocation"},
"CDOTA_Ability_Lua_IsHiddenWhenStolen":{"body":"IsHiddenWhenStolen()","description":"CDOTA_Ability_Lua:\nReturns true if this ability is hidden when stolen by Spell Steal., return bool","prefix":"IsHiddenWhenStolen"},
"CDOTA_PlayerResource_GetPlayerName":{"body":"GetPlayerName(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return string","prefix":"GetPlayerName"},
"CDOTA_Ability_Lua_OnOwnerDied":{"body":"OnOwnerDied()","description":"CDOTA_Ability_Lua:\nCaster died., return void","prefix":"OnOwnerDied"},
"MODIFIER_PROPERTY_DEATHGOLDCOST":{"body":"MODIFIER_PROPERTY_DEATHGOLDCOST","description":"Value[79]modifierfunction->GetModifierConstantDeathGoldCost","prefix":"MODIFIER_PROPERTY_DEATHGOLDCOST"},
"DOTA_HUD_VISIBILITY_INVENTORY_GOLD":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_GOLD"},
"CDOTABaseAbility_GetAbilityType":{"body":"GetAbilityType()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityType"},
"CDOTA_BaseNPC_TriggerSpellReflect":{"body":"TriggerSpellReflect(${hAbility})","description":"CDOTA_BaseNPC:\nTrigger the Lotus Orb-like effect.(hAbility), return void","prefix":"TriggerSpellReflect"},
"ACT_DOTA_CAST_ABILITY_2":{"body":"ACT_DOTA_CAST_ABILITY_2","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2"},
"CDOTA_PlayerResource_SetCustomTeamAssignment":{"body":"SetCustomTeamAssignment(${iPlayerID}, ${iTeamAssignment})","description":"CDOTA_PlayerResource:\nSet custom team assignment for this player., return void","prefix":"SetCustomTeamAssignment"},
"ACT_DOTA_DIE_SPECIAL":{"body":"ACT_DOTA_DIE_SPECIAL","description":"","prefix":"ACT_DOTA_DIE_SPECIAL"},
"ACT_DOTA_CAST_WILD_AXES_END":{"body":"ACT_DOTA_CAST_WILD_AXES_END","description":"","prefix":"ACT_DOTA_CAST_WILD_AXES_END"},
"CDOTA_Item_SetPurchaseTime":{"body":"SetPurchaseTime(${flTime})","description":"CDOTA_Item:\nSet the purchase time of this item, return void","prefix":"SetPurchaseTime"},
"CEntityInstance_GetPublicScriptScope":{"body":"GetPublicScriptScope()","description":"CEntityInstance:\nRetrieve the public script-side data associated with an entity, return handle","prefix":"GetPublicScriptScope"},
"CDOTA_Modifier_Lua_OnCreated":{"body":"OnCreated(${table})","description":"CDOTA_Modifier_Lua:\nRuns when the modifier is created., return void","prefix":"OnCreated"},
"CDOTAGamerules_SetPostGameTime":{"body":"SetPostGameTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time players have between the game ending and the server disconnecting them., return void","prefix":"SetPostGameTime"},
"VectorToAngles":{"body":"VectorToAngles(${Vector_1})","description":"Get Qangles (with no roll) for a Vector., return QAngle","prefix":"VectorToAngles"},
"CDOTATutorial_SetTimeFrozen":{"body":"SetTimeFrozen(${bool_1})","description":"CDOTATutorial:\nSet if we should freeze time or not., return void","prefix":"SetTimeFrozen"},
"MODIFIER_STATE_TRUESIGHT_IMMUNE":{"body":"MODIFIER_STATE_TRUESIGHT_IMMUNE","description":"","prefix":"MODIFIER_STATE_TRUESIGHT_IMMUNE"},
"CDOTABaseGameMode_SetCustomXPRequiredToReachNextLevel":{"body":"SetCustomXPRequiredToReachNextLevel(${hTable})","description":"CDOTABaseGameMode:\nAllows definition of a table of hero XP values., return void","prefix":"SetCustomXPRequiredToReachNextLevel"},
"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING","description":"","prefix":"DOTA_MINIMAP_EVENT_TEAMMATE_TELEPORTING"},
"CDebugOverlayScriptHelper_Cross":{"body":"Cross(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a screen-aligned cross. Specify origin in world space., return void","prefix":"Cross"},
"CDOTABaseGameMode_SetModifyExperienceFilter":{"body":"SetModifyExperienceFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetModifyExperienceFilter"},
"DOTA_ModifyXP_HeroKill":{"body":"DOTA_ModifyXP_HeroKill","description":"","prefix":"DOTA_ModifyXP_HeroKill"},
"CDOTABaseAbility_GetCooldownTimeRemaining":{"body":"GetCooldownTimeRemaining()","description":"CDOTABaseAbility:\n, return float","prefix":"GetCooldownTimeRemaining"},
"CDOTA_PlayerResource_GetDamageDoneToHero":{"body":"GetDamageDoneToHero(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetDamageDoneToHero"},
"ACT_DOTA_LOOK_AROUND":{"body":"ACT_DOTA_LOOK_AROUND","description":"","prefix":"ACT_DOTA_LOOK_AROUND"},
"CDOTA_BaseNPC_Creature_IsChampion":{"body":"IsChampion()","description":"CDOTA_BaseNPC_Creature:\nIs this unit a champion?, return bool","prefix":"IsChampion"},
"UnloadSpawnGroup":{"body":"UnloadSpawnGroup(${string_1})","description":"Unload a spawn group by name, return void","prefix":"UnloadSpawnGroup"},
"MODIFIER_EVENT_ON_ORB_EFFECT":{"body":"MODIFIER_EVENT_ON_ORB_EFFECT","description":"","prefix":"MODIFIER_EVENT_ON_ORB_EFFECT"},
"DOTA_MUSIC_STATUS_EXPLORATION":{"body":"DOTA_MUSIC_STATUS_EXPLORATION","description":"","prefix":"DOTA_MUSIC_STATUS_EXPLORATION"},
"Convars_SetStr":{"body":"SetStr(${string_1}, ${string_2})","description":"Convars:\nSetStr(name, val) : sets the value of the convar to the string., return void","prefix":"SetStr"},
"CDOTA_BaseNPC_IsBuilding":{"body":"IsBuilding()","description":"CDOTA_BaseNPC:\nIs this unit a building?, return bool","prefix":"IsBuilding"},
"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE":{"body":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE","description":"","prefix":"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"},
"ACT_DOTA_PET_WARD_SENTRY":{"body":"ACT_DOTA_PET_WARD_SENTRY","description":"","prefix":"ACT_DOTA_PET_WARD_SENTRY"},
"CBaseEntity_SetParent":{"body":"SetParent(${hParent}, ${pAttachmentname})","description":"CBaseEntity:\nSet the parent for this entity., return void","prefix":"SetParent"},
"ACT_DOTA_NIAN_PIN_END":{"body":"ACT_DOTA_NIAN_PIN_END","description":"","prefix":"ACT_DOTA_NIAN_PIN_END"},
"ACT_DOTA_CAST_ICE_WALL":{"body":"ACT_DOTA_CAST_ICE_WALL","description":"","prefix":"ACT_DOTA_CAST_ICE_WALL"},
"CDOTA_Modifier_Lua_GetAuraSearchTeam":{"body":"GetAuraSearchTeam()","description":"CDOTA_Modifier_Lua:\nReturn the teams this aura applies its buff to., return int","prefix":"GetAuraSearchTeam"},
"CDOTA_BaseNPC_SetRangedProjectileName":{"body":"SetRangedProjectileName(${pProjectileName})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetRangedProjectileName"},
"CDOTA_PlayerResource_GetEventPointsForPlayerID":{"body":"GetEventPointsForPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetEventPointsForPlayerID"},
"CDOTA_BaseNPC_Hero_WillReincarnate":{"body":"WillReincarnate()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"WillReincarnate"},
"CSceneEntity_RemoveBroadcastTeamTarget":{"body":"RemoveBroadcastTeamTarget(${int_1})","description":"CSceneEntity:\nRemoves a team (by index) from the broadcast list, return void","prefix":"RemoveBroadcastTeamTarget"},
"DOTA_LOADOUT_TYPE_COURIER":{"body":"DOTA_LOADOUT_TYPE_COURIER","description":"","prefix":"DOTA_LOADOUT_TYPE_COURIER"},
"DOTA_HEROPICK_STATE_CM_CAPTAINPICK":{"body":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK","description":"","prefix":"DOTA_HEROPICK_STATE_CM_CAPTAINPICK"},
"CCustomGameEventManager_UnregisterListener":{"body":"UnregisterListener(${int_1})","description":"CCustomGameEventManager:\n( int ListnerID ) - Unregister a specific listener, return void","prefix":"UnregisterListener"},
"ACT_DOTA_CHANNEL_END_ABILITY_6":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_6","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_6"},
"ACT_DOTA_TRICKS_END":{"body":"ACT_DOTA_TRICKS_END","description":"","prefix":"ACT_DOTA_TRICKS_END"},
"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":{"body":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS","description":"","prefix":"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS"},
"CDOTA_PlayerResource_IncrementLastHits":{"body":"IncrementLastHits(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementLastHits"},
"CDOTA_BaseNPC_GetIncreasedAttackSpeed":{"body":"GetIncreasedAttackSpeed()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetIncreasedAttackSpeed"},
"CDOTA_Unit_Nian_GetTail":{"body":"GetTail()","description":"CDOTA_Unit_Nian:\nIs the Nian's tail broken?, return handle","prefix":"GetTail"},
"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION":{"body":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION","description":"Value[28]modifierfunction->GetModifierDamageOutgoing_Percentage_Illusion","prefix":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE_ILLUSION"},
"DOTA_UNIT_TARGET_ALL":{"body":"DOTA_UNIT_TARGET_ALL","description":"","prefix":"DOTA_UNIT_TARGET_ALL"},
"CDOTA_Ability_Lua_OnHeroCalculateStatBonus":{"body":"OnHeroCalculateStatBonus()","description":"CDOTA_Ability_Lua:\nCaster (hero only) gained a level, skilled an ability, or received a new stat bonus., return void","prefix":"OnHeroCalculateStatBonus"},
"Convars_GetDOTACommandClient":{"body":"GetDOTACommandClient()","description":"Convars:\nGetDOTACommandClient() : returns the DOTA player who issued this console command., return handle","prefix":"GetDOTACommandClient"},
"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS":{"body":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS","description":"","prefix":"ACT_DOTA_LIFESTEALER_OPEN_WOUNDS"},
"CDOTA_Item_Lua_OnToggle":{"body":"OnToggle()","description":"CDOTA_Item_Lua:\nAbility is toggled on/off., return void","prefix":"OnToggle"},
"DOTA_DAMAGE_FLAG_NON_LETHAL":{"body":"DOTA_DAMAGE_FLAG_NON_LETHAL","description":"","prefix":"DOTA_DAMAGE_FLAG_NON_LETHAL"},
"CBaseEntity_GetMaxHealth":{"body":"GetMaxHealth()","description":"CBaseEntity:\nGet the maximum health of this entity., return int","prefix":"GetMaxHealth"},
"CDOTA_Ability_Lua_GetIntrinsicModifierName":{"body":"GetIntrinsicModifierName()","description":"CDOTA_Ability_Lua:\nReturns the name of the modifier applied passively by this ability., return string","prefix":"GetIntrinsicModifierName"},
"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE","description":"Value[75]modifierfunction->GetModifierPercentageCooldown","prefix":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE"},
"CDOTA_Modifier_Lua_OnRefresh":{"body":"OnRefresh(${table})","description":"CDOTA_Modifier_Lua:\nRuns when the modifier is refreshed., return void","prefix":"OnRefresh"},
"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK","description":"","prefix":"DOTA_MINIMAP_EVENT_TEAMMATE_UNDER_ATTACK"},
"CDOTA_BaseNPC_Hero_HasAnyAvailableInventorySpace":{"body":"HasAnyAvailableInventorySpace()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"HasAnyAvailableInventorySpace"},
"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT":{"body":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT","description":"Value[24]modifierfunction->GetModifierCooldownReduction_Constant","prefix":"MODIFIER_PROPERTY_COOLDOWN_REDUCTION_CONSTANT"},
"ACT_DOTA_VICTORY_START":{"body":"ACT_DOTA_VICTORY_START","description":"","prefix":"ACT_DOTA_VICTORY_START"},
"CDOTA_BaseNPC_NoHealthBar":{"body":"NoHealthBar()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoHealthBar"},
"ABILITY_CANNOT_BE_UPGRADED_AT_MAX":{"body":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX","description":"","prefix":"ABILITY_CANNOT_BE_UPGRADED_AT_MAX"},
"StartSoundEventFromPositionUnreliable":{"body":"StartSoundEventFromPositionUnreliable(${string_1}, ${Vector_2})","description":"Start a sound event from position with optional delivery, return void","prefix":"StartSoundEventFromPositionUnreliable"},
"DOTA_LOADOUT_TYPE_VOICE":{"body":"DOTA_LOADOUT_TYPE_VOICE","description":"","prefix":"DOTA_LOADOUT_TYPE_VOICE"},
"ACT_DOTA_RAZE_1":{"body":"ACT_DOTA_RAZE_1","description":"","prefix":"ACT_DOTA_RAZE_1"},
"MODIFIER_PROPERTY_BASE_MANA_REGEN":{"body":"MODIFIER_PROPERTY_BASE_MANA_REGEN","description":"Value[50]modifierfunction->GetModifierBaseRegen","prefix":"MODIFIER_PROPERTY_BASE_MANA_REGEN"},
"CDOTA_Modifier_Lua_IsAuraActiveOnDeath":{"body":"IsAuraActiveOnDeath()","description":"CDOTA_Modifier_Lua:\nTrue/false if this aura provides buffs when the parent is dead., return bool","prefix":"IsAuraActiveOnDeath"},
"CDOTABaseAbility_GetAssociatedPrimaryAbilities":{"body":"GetAssociatedPrimaryAbilities()","description":"CDOTABaseAbility:\n, return string","prefix":"GetAssociatedPrimaryAbilities"},
"ACT_DOTA_RATTLETRAP_HOOKSHOT_END":{"body":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END","description":"","prefix":"ACT_DOTA_RATTLETRAP_HOOKSHOT_END"},
"CBaseEntity_GetAbsOrigin":{"body":"GetAbsOrigin()","description":"CBaseEntity:\n, return Vector","prefix":"GetAbsOrigin"},
"AngleDiff":{"body":"AngleDiff(${float_1}, ${float_2})","description":"Returns the number of degrees difference between two yaw angles, return float","prefix":"AngleDiff"},
"CDOTA_MapTree_IsStanding":{"body":"IsStanding()","description":"CDOTA_MapTree:\nReturns true if the tree is standing, false if it has been cut down, return bool","prefix":"IsStanding"},
"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT":{"body":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT","description":"Value[25]modifierfunction->GetModifierBaseAttackTimeConstant","prefix":"MODIFIER_PROPERTY_BASE_ATTACK_TIME_CONSTANT"},
"PATTACH_CUSTOMORIGIN":{"body":"PATTACH_CUSTOMORIGIN","description":"","prefix":"PATTACH_CUSTOMORIGIN"},
"CDOTA_BaseNPC_IsRangedAttacker":{"body":"IsRangedAttacker()","description":"CDOTA_BaseNPC:\nIs this unit a ranged attacker?, return bool","prefix":"IsRangedAttacker"},
"UTIL_MessageText":{"body":"UTIL_MessageText(${int_1}, ${string_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6})","description":"Sends colored text to one client., return void","prefix":"UTIL_MessageText"},
"DOTA_LOADOUT_TYPE_TAIL":{"body":"DOTA_LOADOUT_TYPE_TAIL","description":"","prefix":"DOTA_LOADOUT_TYPE_TAIL"},
"CDOTA_MapTree_CutDown":{"body":"CutDown(${nTreeNumberKnownTo})","description":"CDOTA_MapTree:\nCuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team), return void","prefix":"CutDown"},
"CDOTA_BaseNPC_IsFort":{"body":"IsFort()","description":"CDOTA_BaseNPC:\nIs this unit an Ancient?, return bool","prefix":"IsFort"},
"MODIFIER_EVENT_ON_ATTACK_LANDED":{"body":"MODIFIER_EVENT_ON_ATTACK_LANDED","description":"Value[118]modifierfunction->OnAttackLanded","prefix":"MODIFIER_EVENT_ON_ATTACK_LANDED"},
"DOTA_HEROPICK_STATE_CM_BAN1":{"body":"DOTA_HEROPICK_STATE_CM_BAN1","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN1"},
"DoUniqueString":{"body":"DoUniqueString(${string_1})","description":"#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table., return string","prefix":"DoUniqueString"},
"CDOTA_BaseNPC_InterruptChannel":{"body":"InterruptChannel()","description":"CDOTA_BaseNPC:\n, return void","prefix":"InterruptChannel"},
"CDOTAPlayer_SetKillCamUnit":{"body":"SetKillCamUnit(${hEntity})","description":"CDOTAPlayer:\nSet the kill cam unit for this hero., return void","prefix":"SetKillCamUnit"},
"CDOTA_BaseNPC_CanSellItems":{"body":"CanSellItems()","description":"CDOTA_BaseNPC:\nQuery if this unit can sell items., return bool","prefix":"CanSellItems"},
"CDOTA_Ability_Lua_OnUpgrade":{"body":"OnUpgrade()","description":"CDOTA_Ability_Lua:\nAbility gained a level., return void","prefix":"OnUpgrade"},
"CBodyComponent_AddImpulseAtPosition":{"body":"AddImpulseAtPosition(${Vector_1}, ${Vector_2})","description":"CBodyComponent:\nApply an impulse at a worldspace position to the physics, return void","prefix":"AddImpulseAtPosition"},
"CDOTA_Modifier_Lua_GetEffectAttachType":{"body":"GetEffectAttachType()","description":"CDOTA_Modifier_Lua:\nReturn the attach type of the particle system from GetEffectName., return int","prefix":"GetEffectAttachType"},
"DoCleaveAttack":{"body":"DoCleaveAttack(${handle_1}, ${handle_2}, ${handle_3}, ${float_4}, ${float_5}, ${string_6})","description":"(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName), return int","prefix":"DoCleaveAttack"},
"CBaseEntity_SetGravity":{"body":"SetGravity(${flGravity})","description":"CBaseEntity:\nSet PLAYER gravity, ignored for objects., return void","prefix":"SetGravity"},
"CDOTA_PlayerResource_GetNumItemsPurchased":{"body":"GetNumItemsPurchased(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNumItemsPurchased"},
"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"},
"DOTA_LOADOUT_TYPE_ABILITY_ATTACK":{"body":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY_ATTACK"},
"CDOTA_BaseNPC_MakeVisibleDueToAttack":{"body":"MakeVisibleDueToAttack(${iTeam})","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakeVisibleDueToAttack"},
"ACT_DOTA_IDLE":{"body":"ACT_DOTA_IDLE","description":"","prefix":"ACT_DOTA_IDLE"},
"DOTA_UNIT_TARGET_TEAM_CUSTOM":{"body":"DOTA_UNIT_TARGET_TEAM_CUSTOM","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_CUSTOM"},
"CDOTA_BaseNPC_GetIdealSpeed":{"body":"GetIdealSpeed()","description":"CDOTA_BaseNPC:\nReturns speed after all modifiers., return float","prefix":"GetIdealSpeed"},
"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE":{"body":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE","description":"Value[73]modifierfunction->GetModifierPercentageRespawnTime","prefix":"MODIFIER_PROPERTY_RESPAWNTIME_PERCENTAGE"},
"GridNav_WorldToGridPosX":{"body":"WorldToGridPosX(${float_1})","description":"GridNav:\nGet the X index of a given world X position, return int","prefix":"WorldToGridPosX"},
"CDOTAGamerules_SetUseUniversalShopMode":{"body":"SetUseUniversalShopMode(${bool_1})","description":"CDOTAGamerules:\nWhen true, all items are available at as long as any shop is in range., return void","prefix":"SetUseUniversalShopMode"},
"DOTA_SPEECH_USER_TEAM_NEARBY":{"body":"DOTA_SPEECH_USER_TEAM_NEARBY","description":"","prefix":"DOTA_SPEECH_USER_TEAM_NEARBY"},
"DOTA_TEAM_NEUTRALS":{"body":"DOTA_TEAM_NEUTRALS","description":"","prefix":"DOTA_TEAM_NEUTRALS"},
"CEntities_FindByNameWithin":{"body":"FindByNameWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})","description":"CEntities:\nFind entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByNameWithin"},
"CDOTA_Buff_GetClass":{"body":"GetClass()","description":"CDOTA_Buff:\n, return string","prefix":"GetClass"},
"UF_FAIL_IN_FOW":{"body":"UF_FAIL_IN_FOW","description":"","prefix":"UF_FAIL_IN_FOW"},
"CDOTA_PlayerResource_GetClaimedDenies":{"body":"GetClaimedDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetClaimedDenies"},
"DOTA_ABILITY_BEHAVIOR_IMMEDIATE":{"body":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IMMEDIATE"},
"CDOTA_Ability_Lua_OnOwnerSpawned":{"body":"OnOwnerSpawned()","description":"CDOTA_Ability_Lua:\nCaster respawned or spawned for the first time., return void","prefix":"OnOwnerSpawned"},
"CDOTABaseGameMode_SetBotsAlwaysPushWithHuman":{"body":"SetBotsAlwaysPushWithHuman(${bAlwaysPush})","description":"CDOTABaseGameMode:\nSet if the bots should try their best to push with a human player., return void","prefix":"SetBotsAlwaysPushWithHuman"},
"MODIFIER_PROPERTY_LIFETIME_FRACTION":{"body":"MODIFIER_PROPERTY_LIFETIME_FRACTION","description":"Value[154]modifierfunction->GetUnitLifetimeFraction","prefix":"MODIFIER_PROPERTY_LIFETIME_FRACTION"},
"ACT_DOTA_LIFESTEALER_ASSIMILATE":{"body":"ACT_DOTA_LIFESTEALER_ASSIMILATE","description":"","prefix":"ACT_DOTA_LIFESTEALER_ASSIMILATE"},
"CDOTABaseAbility_GetAbilityDamageType":{"body":"GetAbilityDamageType()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityDamageType"},
"ShowCustomHeaderMessage":{"body":"ShowCustomHeaderMessage(${string_1}, ${int_2}, ${int_3}, ${float_4})","description":"( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName, return void","prefix":"ShowCustomHeaderMessage"},
"CPhysicsProp_DisableMotion":{"body":"DisableMotion()","description":"CPhysicsProp:\nDisable motion for the prop, return void","prefix":"DisableMotion"},
"MODIFIER_PROPERTY_ABILITY_LAYOUT":{"body":"MODIFIER_PROPERTY_ABILITY_LAYOUT","description":"Value[161]modifierfunction->GetModifierAbilityLayout","prefix":"MODIFIER_PROPERTY_ABILITY_LAYOUT"},
"LUA_MODIFIER_INVALID":{"body":"LUA_MODIFIER_INVALID","description":"","prefix":"LUA_MODIFIER_INVALID"},
"MODIFIER_STATE_MUTED":{"body":"MODIFIER_STATE_MUTED","description":"","prefix":"MODIFIER_STATE_MUTED"},
"CDOTA_BaseNPC_GetPhysicalArmorValue":{"body":"GetPhysicalArmorValue()","description":"CDOTA_BaseNPC:\nReturns current physical armor value., return float","prefix":"GetPhysicalArmorValue"},
"CDOTA_Item_IsAlertableItem":{"body":"IsAlertableItem()","description":"CDOTA_Item:\n, return bool","prefix":"IsAlertableItem"},
"CDotaQuest_CompleteQuest":{"body":"CompleteQuest()","description":"CDotaQuest:\nMark this quest complete, return void","prefix":"CompleteQuest"},
"CDOTA_Modifier_Lua_Horizontal_Motion_UpdateHorizontalMotion":{"body":"UpdateHorizontalMotion(${me}, ${dt})","description":"CDOTA_Modifier_Lua_Horizontal_Motion:\nPerform any motion from the given interval on the NPC., return void","prefix":"UpdateHorizontalMotion"},
"IsDedicatedServer":{"body":"IsDedicatedServer()","description":"Returns true if this server is a dedicated server., return bool","prefix":"IsDedicatedServer"},
"CDOTATutorial_CreateLocationTask":{"body":"CreateLocationTask(${Vector_1})","description":"CDOTATutorial:\nAdd a task to move to a specific location, return void","prefix":"CreateLocationTask"},
"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"},
"CDOTA_BaseNPC_GetAggroTarget":{"body":"GetAggroTarget()","description":"CDOTA_BaseNPC:\nReturns this unit's aggro target., return handle","prefix":"GetAggroTarget"},
"CDOTA_PlayerResource_IsValidTeamPlayerID":{"body":"IsValidTeamPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsValidTeamPlayerID"},
"MODIFIER_EVENT_ON_TELEPORTING":{"body":"MODIFIER_EVENT_ON_TELEPORTING","description":"Value[138]modifierfunction->OnTeleporting","prefix":"MODIFIER_EVENT_ON_TELEPORTING"},
"ACT_DOTA_CAST_ABILITY_1":{"body":"ACT_DOTA_CAST_ABILITY_1","description":"","prefix":"ACT_DOTA_CAST_ABILITY_1"},
"CDOTA_PlayerResource_GetGoldLostToDeath":{"body":"GetGoldLostToDeath(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldLostToDeath"},
"CDOTA_BaseNPC_IsInvulnerable":{"body":"IsInvulnerable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsInvulnerable"},
"CEntityInstance_ConnectOutput":{"body":"ConnectOutput(${string_1}, ${string_2})","description":"CEntityInstance:\nAdds an I/O connection that will call the named function on this entity when the specified output fires., return void","prefix":"ConnectOutput"},
"Convars_GetFloat":{"body":"GetFloat(${string_1})","description":"Convars:\nGetFloat(name) : returns the convar as a float. May return null if no such convar., return table","prefix":"GetFloat"},
"ACT_DOTA_ARCTIC_BURN_END":{"body":"ACT_DOTA_ARCTIC_BURN_END","description":"","prefix":"ACT_DOTA_ARCTIC_BURN_END"},
"ACT_DOTA_OVERRIDE_ABILITY_3":{"body":"ACT_DOTA_OVERRIDE_ABILITY_3","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_3"},
"StopListeningToGameEvent":{"body":"StopListeningToGameEvent(${int_1})","description":"Stop listening to a particular game event., return bool","prefix":"StopListeningToGameEvent"},
"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT":{"body":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT","description":"","prefix":"DOTA_LOADOUT_TYPE_TELEPORT_EFFECT"},
"CDOTAGamerules_SetGameWinner":{"body":"SetGameWinner(${int_1})","description":"CDOTAGamerules:\nMakes ths specified team win, return void","prefix":"SetGameWinner"},
"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE","description":"Value[0]modifierfunction->GetModifierPreAttack_BonusDamage","prefix":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE"},
"CDOTABaseAbility_UpgradeAbility":{"body":"UpgradeAbility(${bSupressSpeech})","description":"CDOTABaseAbility:\n, return void","prefix":"UpgradeAbility"},
"CDOTA_BaseNPC_IsChanneling":{"body":"IsChanneling()","description":"CDOTA_BaseNPC:\nIs this unit currently channeling a spell?, return bool","prefix":"IsChanneling"},
"CDOTA_BaseNPC_GetPhysicalArmorBaseValue":{"body":"GetPhysicalArmorBaseValue()","description":"CDOTA_BaseNPC:\nReturns base physical armor value., return float","prefix":"GetPhysicalArmorBaseValue"},
"CDOTA_BaseNPC_Hero_ModifyGold":{"body":"ModifyGold(${iGoldChange}, ${bReliable}, ${iReason})","description":"CDOTA_BaseNPC_Hero:\nGives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason, return int","prefix":"ModifyGold"},
"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE","description":"Value[52]modifierfunction->GetModifierConstantManaRegenUnique","prefix":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT_UNIQUE"},
"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL","description":"Value[3]modifierfunction->GetModifierProcAttack_BonusDamage_Physical","prefix":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL"},
"CDOTA_BaseNPC_GetHealthPercent":{"body":"GetHealthPercent()","description":"CDOTA_BaseNPC:\nGet the current health percent of the unit., return int","prefix":"GetHealthPercent"},
"CDOTA_Item_DataDriven_ApplyDataDrivenModifier":{"body":"ApplyDataDrivenModifier(${hCaster}, ${hTarget}, ${pszModifierName}, ${hModifierTable})","description":"CDOTA_Item_DataDriven:\nApplies a data driven modifier to the target, return void","prefix":"ApplyDataDrivenModifier"},
"ACT_DOTA_KINETIC_FIELD":{"body":"ACT_DOTA_KINETIC_FIELD","description":"","prefix":"ACT_DOTA_KINETIC_FIELD"},
"CDOTATutorial_SetTutorialUI":{"body":"SetTutorialUI(${int_1})","description":"CDOTATutorial:\nSet the UI to use a reduced version to focus attention to specific elements., return void","prefix":"SetTutorialUI"},
"CDOTA_Item_IsItem":{"body":"IsItem()","description":"CDOTA_Item:\n, return bool","prefix":"IsItem"},
"CDOTA_BaseNPC_GetAttackCapability":{"body":"GetAttackCapability()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetAttackCapability"},
"CDOTA_BaseNPC_Creature_SetHPGain":{"body":"SetHPGain(${nHPGain})","description":"CDOTA_BaseNPC_Creature:\nSet the hit points gained per level on this creature., return void","prefix":"SetHPGain"},
"SetQuestPhase":{"body":"SetQuestPhase(${int_1})","description":"Set the current quest phase., return void","prefix":"SetQuestPhase"},
"CDOTABaseAbility_IsHidden":{"body":"IsHidden()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsHidden"},
"ACT_DOTA_CAPTURE_PET":{"body":"ACT_DOTA_CAPTURE_PET","description":"","prefix":"ACT_DOTA_CAPTURE_PET"},
"DOTA_UNIT_TARGET_TREE":{"body":"DOTA_UNIT_TARGET_TREE","description":"","prefix":"DOTA_UNIT_TARGET_TREE"},
"DOTA_ModifyGold_SellItem":{"body":"DOTA_ModifyGold_SellItem","description":"","prefix":"DOTA_ModifyGold_SellItem"},
"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE":{"body":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE","description":"Value[17]modifierfunction->GetModifierMoveSpeed_Absolute","prefix":"MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE"},
"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE":{"body":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE","description":"Value[81]modifierfunction->GetModifierPreAttack_Target_CriticalStrike","prefix":"MODIFIER_PROPERTY_PREATTACK_TARGET_CRITICALSTRIKE"},
"GetPhysVelocity":{"body":"GetPhysVelocity(${handle_1})","description":"Get Velocity for VPHYS or normal object, return Vector","prefix":"GetPhysVelocity"},
"MODIFIER_PROPERTY_EXTRA_MANA_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS","description":"Value[61]modifierfunction->GetModifierExtraManaBonus","prefix":"MODIFIER_PROPERTY_EXTRA_MANA_BONUS"},
"ACT_TINY_TOSS":{"body":"ACT_TINY_TOSS","description":"","prefix":"ACT_TINY_TOSS"},
"CDOTA_Ability_Lua_GetCustomCastError":{"body":"GetCustomCastError()","description":"CDOTA_Ability_Lua:\nReturn the error string of a failed command with no target., return string","prefix":"GetCustomCastError"},
"DOTA_SPEECH_USER_NEARBY":{"body":"DOTA_SPEECH_USER_NEARBY","description":"","prefix":"DOTA_SPEECH_USER_NEARBY"},
"ACT_DOTA_MAGNUS_SKEWER_END":{"body":"ACT_DOTA_MAGNUS_SKEWER_END","description":"","prefix":"ACT_DOTA_MAGNUS_SKEWER_END"},
"CDebugOverlayScriptHelper_EntityText":{"body":"EntityText(${ehandle_1}, ${int_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws text on an entity, return void","prefix":"EntityText"},
"CDOTA_BaseNPC_Hero_SetBaseIntellect":{"body":"SetBaseIntellect(${flIntellect})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBaseIntellect"},
"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE":{"body":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE","description":"Value[30]modifierfunction->GetModifierSpellAmplify_Percentage","prefix":"MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE"},
"CDOTA_BaseNPC_SetBaseManaRegen":{"body":"SetBaseManaRegen(${flManaRegen})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseManaRegen"},
"SetOpvarFloatAll":{"body":"SetOpvarFloatAll(${string_1}, ${string_2}, ${string_3}, ${float_4})","description":"Sets an opvar value for all players, return void","prefix":"SetOpvarFloatAll"},
"DOTA_LOADOUT_TYPE_ABILITY2":{"body":"DOTA_LOADOUT_TYPE_ABILITY2","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY2"},
"ACT_DOTA_MAGNUS_SKEWER_START":{"body":"ACT_DOTA_MAGNUS_SKEWER_START","description":"","prefix":"ACT_DOTA_MAGNUS_SKEWER_START"},
"MODIFIER_EVENT_ON_TELEPORTED":{"body":"MODIFIER_EVENT_ON_TELEPORTED","description":"Value[139]modifierfunction->OnTeleported","prefix":"MODIFIER_EVENT_ON_TELEPORTED"},
"CDOTA_Modifier_Lua_Horizontal_Motion_ApplyHorizontalMotionController":{"body":"ApplyHorizontalMotionController()","description":"CDOTA_Modifier_Lua_Horizontal_Motion:\nStarts the horizontal motion controller effects for this buff.  Returns true if successful., return bool","prefix":"ApplyHorizontalMotionController"},
"DOTA_MINIMAP_EVENT_RADAR_TARGET":{"body":"DOTA_MINIMAP_EVENT_RADAR_TARGET","description":"","prefix":"DOTA_MINIMAP_EVENT_RADAR_TARGET"},
"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE","description":"Value[5]modifierfunction->GetModifierProcAttack_BonusDamage_Pure","prefix":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PURE"},
"ACT_DOTA_DEFEAT_START":{"body":"ACT_DOTA_DEFEAT_START","description":"","prefix":"ACT_DOTA_DEFEAT_START"},
"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT":{"body":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT","description":"Value[143]modifierfunction->OnTakeDamageKillCredit","prefix":"MODIFIER_EVENT_ON_TAKEDAMAGE_KILLCREDIT"},
"CDOTA_Item_IsRecipe":{"body":"IsRecipe()","description":"CDOTA_Item:\n, return bool","prefix":"IsRecipe"},
"CDOTA_BaseNPC_SetUnitName":{"body":"SetUnitName(${pName})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetUnitName"},
"CDOTA_BaseNPC_GetGoldBounty":{"body":"GetGoldBounty()","description":"CDOTA_BaseNPC:\nGet the gold bounty on this unit., return int","prefix":"GetGoldBounty"},
"CDebugOverlayScriptHelper_FilledRect2D":{"body":"FilledRect2D(${Vector2D_1}, ${Vector2D_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})","description":"CDebugOverlayScriptHelper:\nDraws a screen-space filled 2D rectangle. Coordinates are in pixels., return void","prefix":"FilledRect2D"},
"CDOTA_PlayerResource_GetSelectedHeroName":{"body":"GetSelectedHeroName(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return string","prefix":"GetSelectedHeroName"},
"CCustomGameEventManager_Send_ServerToAllClients":{"body":"Send_ServerToAllClients(${string_1}, ${handle_2})","description":"CCustomGameEventManager:\n( string EventName, table EventData ), return void","prefix":"Send_ServerToAllClients"},
"CDOTABaseAbility_GetCooldownTime":{"body":"GetCooldownTime()","description":"CDOTABaseAbility:\n, return float","prefix":"GetCooldownTime"},
"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE","description":"Value[46]modifierfunction->GetModifierPhysicalArmorBonusUniqueActive","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE_ACTIVE"},
"CDOTA_BaseNPC_Hero_GetNumItemsInInventory":{"body":"GetNumItemsInInventory()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetNumItemsInInventory"},
"ACT_DOTA_ITEM_PICKUP":{"body":"ACT_DOTA_ITEM_PICKUP","description":"","prefix":"ACT_DOTA_ITEM_PICKUP"},
"CDOTA_BaseNPC_GetBaseDamageMax":{"body":"GetBaseDamageMax()","description":"CDOTA_BaseNPC:\nGet the maximum attack damage of this unit., return int","prefix":"GetBaseDamageMax"},
"CDebugOverlayScriptHelper_EntityBounds":{"body":"EntityBounds(${ehandle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5}, ${bool_6}, ${float_7})","description":"CDebugOverlayScriptHelper:\nDraws bounds of an entity, return void","prefix":"EntityBounds"},
"CBaseEntity_EmitSound":{"body":"EmitSound(${soundname})","description":"CBaseEntity:\nPlays a sound from this entity., return void","prefix":"EmitSound"},
"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE":{"body":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE","description":"","prefix":"DOTA_MINIMAP_EVENT_TUTORIAL_TASK_ACTIVE"},
"ACT_DOTA_CHANNEL_ABILITY_5":{"body":"ACT_DOTA_CHANNEL_ABILITY_5","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_5"},
"MODIFIER_EVENT_ON_PROCESS_UPGRADE":{"body":"MODIFIER_EVENT_ON_PROCESS_UPGRADE","description":"","prefix":"MODIFIER_EVENT_ON_PROCESS_UPGRADE"},
"CDOTA_Modifier_Lua_GetAuraRadius":{"body":"GetAuraRadius()","description":"CDOTA_Modifier_Lua:\nReturn the range around the parent this aura tries to apply its buff., return int","prefix":"GetAuraRadius"},
"CDOTA_BaseNPC_SetBaseHealthRegen":{"body":"SetBaseHealthRegen(${flHealthRegen})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseHealthRegen"},
"CDOTABaseGameMode_GetCameraDistanceOverride":{"body":"GetCameraDistanceOverride()","description":"CDOTABaseGameMode:\nSet a different camera distance; dota default is 1134., return float","prefix":"GetCameraDistanceOverride"},
"CDOTA_BaseNPC_StartGestureWithPlaybackRate":{"body":"StartGestureWithPlaybackRate(${nActivity}, ${flRate})","description":"CDOTA_BaseNPC:\nAdd the given gesture activity with a playback rate override., return void","prefix":"StartGestureWithPlaybackRate"},
"CBaseEntity_PrecacheScriptSound":{"body":"PrecacheScriptSound(${soundname})","description":"CBaseEntity:\nPrecache a sound for later playing., return void","prefix":"PrecacheScriptSound"},
"CDOTA_Modifier_Lua_Motion_Both_UpdateHorizontalMotion":{"body":"UpdateHorizontalMotion(${me}, ${dt})","description":"CDOTA_Modifier_Lua_Motion_Both:\nPerform any motion from the given interval on the NPC., return void","prefix":"UpdateHorizontalMotion"},
"CDOTA_Modifier_Lua_Vertical_Motion_UpdateVerticalMotion":{"body":"UpdateVerticalMotion(${me}, ${dt})","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nPerform any motion from the given interval on the NPC., return void","prefix":"UpdateVerticalMotion"},
"CDOTA_Item_Lua_OnOwnerSpawned":{"body":"OnOwnerSpawned()","description":"CDOTA_Item_Lua:\nCaster respawned or spawned for the first time., return void","prefix":"OnOwnerSpawned"},
"CDOTA_Ability_Lua_GetChannelTime":{"body":"GetChannelTime()","description":"CDOTA_Ability_Lua:\nReturn the channel time of this ability., return float","prefix":"GetChannelTime"},
"Time":{"body":"Time()","description":"Get the current server time, return float","prefix":"Time"},
"ClearTeamCustomHealthbarColor":{"body":"ClearTeamCustomHealthbarColor(${int_1})","description":"( teamNumber ), return void","prefix":"ClearTeamCustomHealthbarColor"},
"CDOTA_BaseNPC_IsOther":{"body":"IsOther()","description":"CDOTA_BaseNPC:\nIs this unit a ward-type unit?, return bool","prefix":"IsOther"},
"ACT_DOTA_IDLE_IMPATIENT":{"body":"ACT_DOTA_IDLE_IMPATIENT","description":"","prefix":"ACT_DOTA_IDLE_IMPATIENT"},
"CDOTABaseAbility_ShouldUseResources":{"body":"ShouldUseResources()","description":"CDOTABaseAbility:\n, return bool","prefix":"ShouldUseResources"},
"CDOTA_BaseNPC_Hero_GetPrimaryStatValue":{"body":"GetPrimaryStatValue()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetPrimaryStatValue"},
"CDOTABaseAbility_ContinueCasting":{"body":"ContinueCasting()","description":"CDOTABaseAbility:\n, return bool","prefix":"ContinueCasting"},
"DOTA_HEROPICK_STATE_FH_SELECT":{"body":"DOTA_HEROPICK_STATE_FH_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_FH_SELECT"},
"CDebugOverlayScriptHelper_Cross3DOriented":{"body":"Cross3DOriented(${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws an oriented cross. Specify origin in world space., return void","prefix":"Cross3DOriented"},
"ACT_DOTA_TELEPORT_COOP_END":{"body":"ACT_DOTA_TELEPORT_COOP_END","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_END"},
"CDOTATutorial_EnableCreepAggroViz":{"body":"EnableCreepAggroViz(${bool_1})","description":"CDOTATutorial:\nAlert the player when a creep becomes agro to their hero., return void","prefix":"EnableCreepAggroViz"},
"CBodyComponent_SequenceDuration":{"body":"SequenceDuration(${string_1})","description":"CBodyComponent:\nReturns the duration in seconds of the specified sequence, return float","prefix":"SequenceDuration"},
"CDOTA_BaseNPC_SetOriginalModel":{"body":"SetOriginalModel(${pszModelName})","description":"CDOTA_BaseNPC:\nSets the original model of this entity, which it will tend to fall back to anytime its state changes., return void","prefix":"SetOriginalModel"},
"CDOTA_Buff_GetDuration":{"body":"GetDuration()","description":"CDOTA_Buff:\n, return float","prefix":"GetDuration"},
"ACT_DOTA_GREEVIL_BLINK_BONE":{"body":"ACT_DOTA_GREEVIL_BLINK_BONE","description":"","prefix":"ACT_DOTA_GREEVIL_BLINK_BONE"},
"CDOTA_BaseNPC_IsCourier":{"body":"IsCourier()","description":"CDOTA_BaseNPC:\nIs this unit a courier?, return bool","prefix":"IsCourier"},
"CDOTA_BaseNPC_Hero_GetStreak":{"body":"GetStreak()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return int","prefix":"GetStreak"},
"MODIFIER_EVENT_ON_MANA_GAINED":{"body":"MODIFIER_EVENT_ON_MANA_GAINED","description":"Value[142]modifierfunction->OnManaGained","prefix":"MODIFIER_EVENT_ON_MANA_GAINED"},
"GetGoldFrostyBoostAmount":{"body":"GetGoldFrostyBoostAmount(${int_1}, ${int_2})","description":", return float","prefix":"GetGoldFrostyBoostAmount"},
"CDOTA_BaseNPC_Hero_GetDenies":{"body":"GetDenies()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return int","prefix":"GetDenies"},
"CScriptParticleManager_SetParticleAlwaysSimulate":{"body":"SetParticleAlwaysSimulate(${int_1})","description":"CScriptParticleManager:\n, return void","prefix":"SetParticleAlwaysSimulate"},
"CDotaQuest_SetTextReplaceValue":{"body":"SetTextReplaceValue(${valueSlot}, ${value})","description":"CDotaQuest:\nSet a quest value, return void","prefix":"SetTextReplaceValue"},
"CDebugOverlayScriptHelper_Sphere":{"body":"Sphere(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a wireframe sphere. Specify center in world space., return void","prefix":"Sphere"},
"UF_FAIL_RANGED":{"body":"UF_FAIL_RANGED","description":"","prefix":"UF_FAIL_RANGED"},
"MODIFIER_EVENT_ON_TAKEDAMAGE":{"body":"MODIFIER_EVENT_ON_TAKEDAMAGE","description":"Value[131]modifierfunction->OnTakeDamage","prefix":"MODIFIER_EVENT_ON_TAKEDAMAGE"},
"CScriptHeroList_GetAllHeroes":{"body":"GetAllHeroes()","description":"CScriptHeroList:\nReturns all the heroes in the world, return table","prefix":"GetAllHeroes"},
"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP":{"body":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_CHECK_DISABLE_HELP"},
"ACT_DOTA_OVERRIDE_ABILITY_2":{"body":"ACT_DOTA_OVERRIDE_ABILITY_2","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_2"},
"CDOTA_BaseNPC_Hero_GetBonusDamageFromPrimaryStat":{"body":"GetBonusDamageFromPrimaryStat()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetBonusDamageFromPrimaryStat"},
"MODIFIER_PROPERTY_DISABLE_TURNING":{"body":"MODIFIER_PROPERTY_DISABLE_TURNING","description":"Value[158]modifierfunction->GetModifierDisableTurning","prefix":"MODIFIER_PROPERTY_DISABLE_TURNING"},
"DOTA_GAMERULES_STATE_POST_GAME":{"body":"DOTA_GAMERULES_STATE_POST_GAME","description":"","prefix":"DOTA_GAMERULES_STATE_POST_GAME"},
"CDOTA_Item_GetItemState":{"body":"GetItemState()","description":"CDOTA_Item:\nGets whether item is unequipped or ready., return int","prefix":"GetItemState"},
"CDOTABaseAbility_GetModifierValueBonus":{"body":"GetModifierValueBonus()","description":"CDOTABaseAbility:\n, return float","prefix":"GetModifierValueBonus"},
"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH":{"body":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH","description":"","prefix":"DOTA_MOTION_CONTROLLER_PRIORITY_HIGH"},
"CDOTA_Item_IsCastOnPickup":{"body":"IsCastOnPickup()","description":"CDOTA_Item:\n, return bool","prefix":"IsCastOnPickup"},
"CDOTA_PlayerResource_GetTimeOfLastItemPurchase":{"body":"GetTimeOfLastItemPurchase(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetTimeOfLastItemPurchase"},
"DOTA_LOADOUT_TYPE_WARD":{"body":"DOTA_LOADOUT_TYPE_WARD","description":"","prefix":"DOTA_LOADOUT_TYPE_WARD"},
"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL","description":"Value[100]modifierfunction->GetAbsoluteNoDamagePhysical","prefix":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL"},
"CDOTA_BaseNPC_EjectItemFromStash":{"body":"EjectItemFromStash(${hItem})","description":"CDOTA_BaseNPC:\nDrops the selected item out of this unit's stash., return void","prefix":"EjectItemFromStash"},
"CDOTA_Modifier_Lua_IsDebuff":{"body":"IsDebuff()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier should be displayed as a debuff., return bool","prefix":"IsDebuff"},
"DOTA_TEAM_NOTEAM":{"body":"DOTA_TEAM_NOTEAM","description":"","prefix":"DOTA_TEAM_NOTEAM"},
"CDOTA_CustomUIManager_DynamicHud_Destroy":{"body":"DynamicHud_Destroy(${int_1}, ${string_2})","description":"CDOTA_CustomUIManager:\nDestroy a custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID ), return void","prefix":"DynamicHud_Destroy"},
"CDOTA_Ability_Lua_OnAbilityPhaseInterrupted":{"body":"OnAbilityPhaseInterrupted()","description":"CDOTA_Ability_Lua:\nCast time did not complete successfully., return void","prefix":"OnAbilityPhaseInterrupted"},
"DOTA_LOADOUT_TYPE_NONE":{"body":"DOTA_LOADOUT_TYPE_NONE","description":"","prefix":"DOTA_LOADOUT_TYPE_NONE"},
"DOTA_LOADOUT_TYPE_SHOULDER":{"body":"DOTA_LOADOUT_TYPE_SHOULDER","description":"","prefix":"DOTA_LOADOUT_TYPE_SHOULDER"},
"CBaseEntity_GetContext":{"body":"GetContext(${name})","description":"CBaseEntity:\nGetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found)., return table","prefix":"GetContext"},
"CDOTA_PlayerResource_ModifyGold":{"body":"ModifyGold(${iPlayerID}, ${iGoldChange}, ${bReliable}, ${nReason})","description":"CDOTA_PlayerResource:\n, return int","prefix":"ModifyGold"},
"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST":{"body":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST","description":"Value[126]modifierfunction->OnAbilityFullyCast","prefix":"MODIFIER_EVENT_ON_ABILITY_FULLY_CAST"},
"CalcClosestPointOnEntityOBB":{"body":"CalcClosestPointOnEntityOBB(${handle_1}, ${Vector_2})","description":"Compute the closest point on the OBB of an entity., return Vector","prefix":"CalcClosestPointOnEntityOBB"},
"UTIL_MessageTextAll":{"body":"UTIL_MessageTextAll(${string_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5})","description":"Sends colored text to all clients., return void","prefix":"UTIL_MessageTextAll"},
"CDOTA_BaseNPC_Hero_IsReincarnating":{"body":"IsReincarnating()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"IsReincarnating"},
"DOTA_TEAM_CUSTOM_COUNT":{"body":"DOTA_TEAM_CUSTOM_COUNT","description":"","prefix":"DOTA_TEAM_CUSTOM_COUNT"},
"CDOTA_BaseNPC_Hero_GetBuybackCost":{"body":"GetBuybackCost()","description":"CDOTA_BaseNPC_Hero:\nReturn integer value for the gold cost of a buyback., return int","prefix":"GetBuybackCost"},
"ACT_DOTA_DEFEAT":{"body":"ACT_DOTA_DEFEAT","description":"","prefix":"ACT_DOTA_DEFEAT"},
"CDOTA_BaseNPC_RemoveGesture":{"body":"RemoveGesture(${nActivity})","description":"CDOTA_BaseNPC:\nRemove the given gesture activity., return void","prefix":"RemoveGesture"},
"IsValidEntity":{"body":"IsValidEntity(${handle_1})","description":"Checks to see if the given hScript is a valid entity, return bool","prefix":"IsValidEntity"},
"DOTA_ModifyXP_RoshanKill":{"body":"DOTA_ModifyXP_RoshanKill","description":"","prefix":"DOTA_ModifyXP_RoshanKill"},
"CDOTA_BaseNPC_PassivesDisabled":{"body":"PassivesDisabled()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"PassivesDisabled"},
"CDOTA_BaseNPC_GetHasteFactor":{"body":"GetHasteFactor()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetHasteFactor"},
"CDOTA_PlayerResource_ResetBuybackCostTime":{"body":"ResetBuybackCostTime(${nPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ResetBuybackCostTime"},
"CDOTA_BaseNPC_GetCurrentVisionRange":{"body":"GetCurrentVisionRange()","description":"CDOTA_BaseNPC:\nGets the current vision range., return int","prefix":"GetCurrentVisionRange"},
"PATTACH_POINT_FOLLOW":{"body":"PATTACH_POINT_FOLLOW","description":"","prefix":"PATTACH_POINT_FOLLOW"},
"CDOTA_BaseNPC_MoveToTargetToAttack":{"body":"MoveToTargetToAttack(${hTarget})","description":"CDOTA_BaseNPC:\nMove to a target to attack., return void","prefix":"MoveToTargetToAttack"},
"CDOTABaseAbility_NumModifiersUsingAbility":{"body":"NumModifiersUsingAbility()","description":"CDOTABaseAbility:\n, return int","prefix":"NumModifiersUsingAbility"},
"cvar_setf":{"body":"cvar_setf(${string_1}, ${float_2})","description":"Sets the value of the given cvar, as a float., return bool","prefix":"cvar_setf"},
"ACT_DOTA_TELEPORT_REACT":{"body":"ACT_DOTA_TELEPORT_REACT","description":"","prefix":"ACT_DOTA_TELEPORT_REACT"},
"CDOTABaseGameMode_SetTopBarTeamValuesVisible":{"body":"SetTopBarTeamValuesVisible(${bVisible})","description":"CDOTABaseGameMode:\nTurning on/off the team values on the top game bar., return void","prefix":"SetTopBarTeamValuesVisible"},
"CDOTA_BaseNPC_Creature_SetDisableResistanceGain":{"body":"SetDisableResistanceGain(${flDisableResistanceGain})","description":"CDOTA_BaseNPC_Creature:\nSet the disable resistance gained per level on this creature., return void","prefix":"SetDisableResistanceGain"},
"UF_FAIL_NOT_PLAYER_CONTROLLED":{"body":"UF_FAIL_NOT_PLAYER_CONTROLLED","description":"","prefix":"UF_FAIL_NOT_PLAYER_CONTROLLED"},
"CDOTA_PlayerResource_GetBroadcasterChannel":{"body":"GetBroadcasterChannel(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetBroadcasterChannel"},
"ACT_DOTA_RAZE_3":{"body":"ACT_DOTA_RAZE_3","description":"","prefix":"ACT_DOTA_RAZE_3"},
"ProjectileManager_GetLinearProjectileVelocity":{"body":"GetLinearProjectileVelocity(${int_1})","description":"ProjectileManager:\nReturns a vector representing the current velocity of the projectile., return Vector","prefix":"GetLinearProjectileVelocity"},
"CDOTABaseGameMode_SetLoseGoldOnDeath":{"body":"SetLoseGoldOnDeath(${bEnabled})","description":"CDOTABaseGameMode:\nUse to disable gold loss on death., return void","prefix":"SetLoseGoldOnDeath"},
"ProjectileManager_DestroyLinearProjectile":{"body":"DestroyLinearProjectile(${int_1})","description":"ProjectileManager:\nDestroys the linear projectile matching the argument ID, return void","prefix":"DestroyLinearProjectile"},
"ProjectileManager_CreateTrackingProjectile":{"body":"CreateTrackingProjectile(${handle_1})","description":"ProjectileManager:\nCreates a tracking projectile, return void","prefix":"CreateTrackingProjectile"},
"CDOTA_BaseNPC_SetCanSellItems":{"body":"SetCanSellItems(${bCanSell})","description":"CDOTA_BaseNPC:\nSet whether or not this unit is allowed to sell items (bCanSellItems), return void","prefix":"SetCanSellItems"},
"GridNav_WorldToGridPosY":{"body":"WorldToGridPosY(${float_1})","description":"GridNav:\nGet the Y index of a given world Y position, return int","prefix":"WorldToGridPosY"},
"ApplyDamage":{"body":"ApplyDamage(${handle_1})","description":"Damage an npc., return float","prefix":"ApplyDamage"},
"DebugDrawCircle":{"body":"DebugDrawCircle(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${bool_5}, ${float_6})","description":"Draw a debug circle (center, vRgb, a, rad, ztest, duration), return void","prefix":"DebugDrawCircle"},
"ITEM_PARTIALLY_SHAREABLE":{"body":"ITEM_PARTIALLY_SHAREABLE","description":"","prefix":"ITEM_PARTIALLY_SHAREABLE"},
"GridNav_RegrowAllTrees":{"body":"RegrowAllTrees()","description":"GridNav:\nCauses all trees in the map to regrow, return void","prefix":"RegrowAllTrees"},
"CDOTA_Ability_Lua_GetChannelAnimation":{"body":"GetChannelAnimation()","description":"CDOTA_Ability_Lua:\nReturn channel animation of this ability., return int","prefix":"GetChannelAnimation"},
"GridNav_CanFindPath":{"body":"CanFindPath(${Vector_1}, ${Vector_2})","description":"GridNav:\nDetermine if it is possible to reach the specified end point from the specified start point. bool (vStart, vEnd), return bool","prefix":"CanFindPath"},
"CBodyComponent_SetAngularVelocity":{"body":"SetAngularVelocity(${Vector_1})","description":"CBodyComponent:\n, return void","prefix":"SetAngularVelocity"},
"GlobalSys_CommandLineStr":{"body":"CommandLineStr(${string_1}, ${string_2})","description":"GlobalSys:\nCommandLineStr(name) : returns the command line param as a string., return table","prefix":"CommandLineStr"},
"CDOTAGamerules_SetGoldTickTime":{"body":"SetGoldTickTime(${float_1})","description":"CDOTAGamerules:\nSet the time interval between auto gold increases., return void","prefix":"SetGoldTickTime"},
"Convars_SetBool":{"body":"SetBool(${string_1}, ${bool_2})","description":"Convars:\nSetBool(name, val) : sets the value of the convar to the bool., return void","prefix":"SetBool"},
"Convars_RegisterCommand":{"body":"RegisterCommand(${string_1}, ${handle_2}, ${string_3}, ${int_4})","description":"Convars:\nRegisterCommand(name, fn, helpString, flags) : register a console command., return void","prefix":"RegisterCommand"},
"CDOTAGamerules_State_Get":{"body":"State_Get()","description":"CDOTAGamerules:\nGet the current Gamerules state, return int","prefix":"State_Get"},
"Convars_GetStr":{"body":"GetStr(${string_1})","description":"Convars:\nGetStr(name) : returns the convar as a string. May return null if no such convar., return table","prefix":"GetStr"},
"Convars_GetCommandClient":{"body":"GetCommandClient()","description":"Convars:\nGetCommandClient() : returns the player who issued this console command., return handle","prefix":"GetCommandClient"},
"CDOTA_BaseNPC_HasFlyMovementCapability":{"body":"HasFlyMovementCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasFlyMovementCapability"},
"CScriptPrecacheContext_AddResource":{"body":"AddResource(${string_1})","description":"CScriptPrecacheContext:\nPrecaches a specific resource, return void","prefix":"AddResource"},
"CScriptParticleManager_SetParticleControlOrientation":{"body":"SetParticleControlOrientation(${int_1}, ${int_2}, ${Vector_3}, ${Vector_4}, ${Vector_5})","description":"CScriptParticleManager:\n(int nFXIndex, int nPoint, vForward, vRight, vUp), return void","prefix":"SetParticleControlOrientation"},
"CDOTATutorial_UpgradePlayerAbility":{"body":"UpgradePlayerAbility(${string_1})","description":"CDOTATutorial:\nUpgrade a specific ability for the local hero, return void","prefix":"UpgradePlayerAbility"},
"CScriptParticleManager_SetParticleControl":{"body":"SetParticleControl(${int_1}, ${int_2}, ${Vector_3})","description":"CScriptParticleManager:\nSet the control point data for a control on a particle effect, return void","prefix":"SetParticleControl"},
"CScriptParticleManager_ReleaseParticleIndex":{"body":"ReleaseParticleIndex(${int_1})","description":"CScriptParticleManager:\nFrees the specified particle index, return void","prefix":"ReleaseParticleIndex"},
"CScriptParticleManager_GetParticleReplacement":{"body":"GetParticleReplacement(${string_1}, ${handle_2})","description":"CScriptParticleManager:\n, return string","prefix":"GetParticleReplacement"},
"CDOTABaseAbility_IsInAbilityPhase":{"body":"IsInAbilityPhase()","description":"CDOTABaseAbility:\nReturns whether the ability is currently casting., return bool","prefix":"IsInAbilityPhase"},
"CDOTA_PlayerResource_IsDisableHelpSetForPlayerID":{"body":"IsDisableHelpSetForPlayerID(${nPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsDisableHelpSetForPlayerID"},
"CDOTA_BaseNPC_IsAttackingEntity":{"body":"IsAttackingEntity(${hEntity})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsAttackingEntity"},
"CEnvEntityMaker_SpawnEntityAtLocation":{"body":"SpawnEntityAtLocation(${vecAlternateOrigin}, ${vecAlternateAngles})","description":"CEnvEntityMaker:\nCreate an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll), return void","prefix":"SpawnEntityAtLocation"},
"CDOTA_PlayerResource_GetNthCourierForTeam":{"body":"GetNthCourierForTeam(${nCourierIndex}, ${nTeamNumber})","description":"CDOTA_PlayerResource:\n, return handle","prefix":"GetNthCourierForTeam"},
"CDotaQuest_AddSubquest":{"body":"AddSubquest(${hSubquest})","description":"CDotaQuest:\nAdd a subquest to this quest, return void","prefix":"AddSubquest"},
"CScriptKeyValues_GetValue":{"body":"GetValue(${string_1})","description":"CScriptKeyValues:\nReads a spawn key, return table","prefix":"GetValue"},
"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK":{"body":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK","description":"","prefix":"DOTA_MINIMAP_EVENT_ANCIENT_UNDER_ATTACK"},
"MODIFIER_EVENT_ON_ATTACKED":{"body":"MODIFIER_EVENT_ON_ATTACKED","description":"Value[134]modifierfunction->OnAttacked","prefix":"MODIFIER_EVENT_ON_ATTACKED"},
"CScriptHeroList_GetHeroCount":{"body":"GetHeroCount()","description":"CScriptHeroList:\nReturns the number of heroes in the world, return int","prefix":"GetHeroCount"},
"DebugDrawLine":{"body":"DebugDrawLine(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${bool_6}, ${float_7})","description":"Draw a debug overlay line (origin, target, r, g, b, ztest, duration), return void","prefix":"DebugDrawLine"},
"ACT_DOTA_TAUNT_SNIPER":{"body":"ACT_DOTA_TAUNT_SNIPER","description":"","prefix":"ACT_DOTA_TAUNT_SNIPER"},
"CSceneEntity_FindCamera":{"body":"FindCamera()","description":"CSceneEntity:\nGet the camera, return handle","prefix":"FindCamera"},
"CDOTA_BaseNPC_IsSilenced":{"body":"IsSilenced()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsSilenced"},
"CSceneEntity_LoadSceneFromString":{"body":"LoadSceneFromString(${string_1}, ${string_2})","description":"CSceneEntity:\ngiven a dummy scene name and a vcd string, load the scene, return bool","prefix":"LoadSceneFromString"},
"CSceneEntity_IsPaused":{"body":"IsPaused()","description":"CSceneEntity:\nIf this scene is currently paused., return bool","prefix":"IsPaused"},
"CSceneEntity_FindNamedEntity":{"body":"FindNamedEntity(${string_1})","description":"CSceneEntity:\ngiven an entity reference, such as !target, get actual entity from scene object, return handle","prefix":"FindNamedEntity"},
"DOTA_UNIT_TARGET_CREEP":{"body":"DOTA_UNIT_TARGET_CREEP","description":"","prefix":"DOTA_UNIT_TARGET_CREEP"},
"CDOTABaseAbility_IsTrained":{"body":"IsTrained()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsTrained"},
"CScriptHeroList_GetHero":{"body":"GetHero(${int_1})","description":"CScriptHeroList:\nGet the Nth hero in the Hero List, return handle","prefix":"GetHero"},
"MODIFIER_STATE_FAKE_ALLY":{"body":"MODIFIER_STATE_FAKE_ALLY","description":"","prefix":"MODIFIER_STATE_FAKE_ALLY"},
"ACT_DOTA_CHANNEL_ABILITY_1":{"body":"ACT_DOTA_CHANNEL_ABILITY_1","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_1"},
"CSceneEntity_AddBroadcastTeamTarget":{"body":"AddBroadcastTeamTarget(${int_1})","description":"CSceneEntity:\nAdds a team (by index) to the broadcast list, return void","prefix":"AddBroadcastTeamTarget"},
"CPropVRHand_SetHandAttachment":{"body":"SetHandAttachment(${hAttachment})","description":"CPropVRHand:\nSet the attachment for this hand, return void","prefix":"SetHandAttachment"},
"CDOTABaseAbility_OnOwnerSpawned":{"body":"OnOwnerSpawned()","description":"CDOTABaseAbility:\n, return void","prefix":"OnOwnerSpawned"},
"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE"},
"CPropVRHand_FireHapticPulse":{"body":"FireHapticPulse(${nStrength})","description":"CPropVRHand:\nFire a haptic pulse on this hand. [0,2] for strength., return void","prefix":"FireHapticPulse"},
"CPropVRHand_AddHandAttachment":{"body":"AddHandAttachment(${hAttachment})","description":"CPropVRHand:\nAdd the attachment to this hand, return void","prefix":"AddHandAttachment"},
"CDOTABaseAbility_UseResources":{"body":"UseResources(${bMana}, ${bGold}, ${bCooldown})","description":"CDOTABaseAbility:\n, return void","prefix":"UseResources"},
"CPropHMDAvatar_GetVRHand":{"body":"GetVRHand(${nHandID})","description":"CPropHMDAvatar:\nGet VR hand by ID, return handle","prefix":"GetVRHand"},
"CEntityInstance_DisconnectOutput":{"body":"DisconnectOutput(${string_1}, ${string_2})","description":"CEntityInstance:\nRemoves a connected script function from an I/O event on this entity., return void","prefix":"DisconnectOutput"},
"CDOTA_Modifier_Lua_IsHidden":{"body":"IsHidden()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier should be displayed on the buff bar., return bool","prefix":"IsHidden"},
"CDOTABaseGameMode_SetDamageFilter":{"body":"SetDamageFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetDamageFilter"},
"CPointTemplate_GetSpawnedEntities":{"body":"GetSpawnedEntities()","description":"CPointTemplate:\nGetSpawnedEntities() : Get the list of the most recent spawned entities, return handle","prefix":"GetSpawnedEntities"},
"ACT_DOTA_WHEEL_LAYER":{"body":"ACT_DOTA_WHEEL_LAYER","description":"","prefix":"ACT_DOTA_WHEEL_LAYER"},
"CPointTemplate_ForceSpawn":{"body":"ForceSpawn()","description":"CPointTemplate:\nForceSpawn() : Spawns all of the entities the point_template is pointing at., return void","prefix":"ForceSpawn"},
"CDOTA_BaseNPC_IsMoving":{"body":"IsMoving()","description":"CDOTA_BaseNPC:\nIs this unit moving?, return bool","prefix":"IsMoving"},
"CNativeOutputs_AddOutput":{"body":"AddOutput(${string_1}, ${string_2})","description":"CNativeOutputs:\nAdd an output, return void","prefix":"AddOutput"},
"CDOTA_BaseNPC_Hero_GetLastHits":{"body":"GetLastHits()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return int","prefix":"GetLastHits"},
"ACT_DOTA_CAST_LIFE_BREAK_END":{"body":"ACT_DOTA_CAST_LIFE_BREAK_END","description":"","prefix":"ACT_DOTA_CAST_LIFE_BREAK_END"},
"CInfoData_QueryNumber":{"body":"QueryNumber(${tok}, ${flDefault})","description":"CInfoData:\nQuery number data for this key, return float","prefix":"QueryNumber"},
"CDOTABaseGameMode_ClearRuneSpawnFilter":{"body":"ClearRuneSpawnFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls what rune spawns., return void","prefix":"ClearRuneSpawnFilter"},
"CInfoData_QueryFloat":{"body":"QueryFloat(${tok}, ${flDefault})","description":"CInfoData:\nQuery float data for this key, return float","prefix":"QueryFloat"},
"CEnvProjectedTexture_SetQuadraticAttenuation":{"body":"SetQuadraticAttenuation(${flAtten})","description":"CEnvProjectedTexture:\nSet light quadratic attenuation value, return void","prefix":"SetQuadraticAttenuation"},
"CEnvProjectedTexture_SetFarRange":{"body":"SetFarRange(${flRange})","description":"CEnvProjectedTexture:\nSet light maximum range, return void","prefix":"SetFarRange"},
"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER":{"body":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER","description":"Value[113]modifierfunction->GetModifierBountyOtherMultiplier","prefix":"MODIFIER_PROPERTY_BOUNTY_OTHER_MULTIPLIER"},
"ACT_DOTA_TELEPORT_COOP_START":{"body":"ACT_DOTA_TELEPORT_COOP_START","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_START"},
"CEnvEntityMaker_SpawnEntity":{"body":"SpawnEntity()","description":"CEnvEntityMaker:\nCreate an entity at the location of the maker, return void","prefix":"SpawnEntity"},
"CBaseEntity_GatherCriteria":{"body":"GatherCriteria(${hResult})","description":"CBaseEntity:\nReturns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks., return void","prefix":"GatherCriteria"},
"DOTA_ABILITY_BEHAVIOR_AUTOCAST":{"body":"DOTA_ABILITY_BEHAVIOR_AUTOCAST","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_AUTOCAST"},
"CEntityInstance_entindex":{"body":"entindex()","description":"CEntityInstance:\n, return int","prefix":"entindex"},
"ACT_DOTA_ITEM_DROP":{"body":"ACT_DOTA_ITEM_DROP","description":"","prefix":"ACT_DOTA_ITEM_DROP"},
"CEntityInstance_SetIntAttr":{"body":"SetIntAttr(${string_1}, ${int_2})","description":"CEntityInstance:\nSet Integer Attribute, return void","prefix":"SetIntAttr"},
"CEntityInstance_RedirectOutput":{"body":"RedirectOutput(${string_1}, ${string_2}, ${handle_3})","description":"CEntityInstance:\nAdds an I/O connection that will call the named function on the passed entity when the specified output fires., return void","prefix":"RedirectOutput"},
"CEntityInstance_GetPrivateScriptScope":{"body":"GetPrivateScriptScope()","description":"CEntityInstance:\nRetrieve the private per-instance script-side data associated with an entity, return handle","prefix":"GetPrivateScriptScope"},
"CEntityInstance_GetOrCreatePublicScriptScope":{"body":"GetOrCreatePublicScriptScope()","description":"CEntityInstance:\nRetrieve, creating if necessary, the public script-side data associated with an entity, return handle","prefix":"GetOrCreatePublicScriptScope"},
"CEntityInstance_GetOrCreatePrivateScriptScope":{"body":"GetOrCreatePrivateScriptScope()","description":"CEntityInstance:\nRetrieve, creating if necessary, the private per-instance script-side data associated with an entity, return handle","prefix":"GetOrCreatePrivateScriptScope"},
"CEntityInstance_GetIntAttr":{"body":"GetIntAttr(${string_1})","description":"CEntityInstance:\nGet Integer Attribute, return int","prefix":"GetIntAttr"},
"CDOTA_BaseNPC_PerformAttack":{"body":"PerformAttack(${hTarget}, ${bUseCastAttackOrb}, ${bProcessProcs}, ${bSkipCooldown}, ${bIgnoreInvis}, ${bUseProjectile})","description":"CDOTA_BaseNPC:\nPerforms an attack on a target., return void","prefix":"PerformAttack"},
"CEntityInstance_GetEntityIndex":{"body":"GetEntityIndex()","description":"CEntityInstance:\n, return int","prefix":"GetEntityIndex"},
"CEntityInstance_GetEntityHandle":{"body":"GetEntityHandle()","description":"CEntityInstance:\nGet the entity as an EHANDLE, return ehandle","prefix":"GetEntityHandle"},
"ACT_DOTA_TELEPORT_END":{"body":"ACT_DOTA_TELEPORT_END","description":"","prefix":"ACT_DOTA_TELEPORT_END"},
"ACT_DOTA_VICTORY":{"body":"ACT_DOTA_VICTORY","description":"","prefix":"ACT_DOTA_VICTORY"},
"CEntityInstance_FireOutput":{"body":"FireOutput(${string_1}, ${handle_2}, ${handle_3}, ${table_4}, ${float_5})","description":"CEntityInstance:\nFire an entity output, return void","prefix":"FireOutput"},
"CEntityInstance_DisconnectRedirectedOutput":{"body":"DisconnectRedirectedOutput(${string_1}, ${string_2}, ${handle_3})","description":"CEntityInstance:\nRemoves a connected script function from an I/O event on the passed entity., return void","prefix":"DisconnectRedirectedOutput"},
"CPointWorldText_SetMessage":{"body":"SetMessage(${pMessage})","description":"CPointWorldText:\nSet the message on this entity., return void","prefix":"SetMessage"},
"CDOTA_BaseNPC_Hero_GetBaseDamageMax":{"body":"GetBaseDamageMax()","description":"CDOTA_BaseNPC_Hero:\nHero damage is also affected by attributes., return int","prefix":"GetBaseDamageMax"},
"CEntities_Next":{"body":"Next(${handle_1})","description":"CEntities:\nContinue an iteration over the list of entities, providing reference to a previously found entity, return handle","prefix":"Next"},
"CDOTA_PlayerResource_ClearRawPlayerDamageMatrix":{"body":"ClearRawPlayerDamageMatrix(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearRawPlayerDamageMatrix"},
"DOTA_TEAM_GOODGUYS":{"body":"DOTA_TEAM_GOODGUYS","description":"","prefix":"DOTA_TEAM_GOODGUYS"},
"CEntities_First":{"body":"First()","description":"CEntities:\nBegin an iteration over the list of entities, return handle","prefix":"First"},
"MODIFIER_STATE_ATTACK_IMMUNE":{"body":"MODIFIER_STATE_ATTACK_IMMUNE","description":"","prefix":"MODIFIER_STATE_ATTACK_IMMUNE"},
"CDOTABaseGameMode_SetBotThinkingEnabled":{"body":"SetBotThinkingEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnables/Disables bots in custom games. Note: this will only work with default heroes in the dota map., return void","prefix":"SetBotThinkingEnabled"},
"CDOTA_Buff_GetAbility":{"body":"GetAbility()","description":"CDOTA_Buff:\nGet the ability that generated the modifier., return handle","prefix":"GetAbility"},
"PATTACH_OVERHEAD_FOLLOW":{"body":"PATTACH_OVERHEAD_FOLLOW","description":"","prefix":"PATTACH_OVERHEAD_FOLLOW"},
"CEntities_FindByName":{"body":"FindByName(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByName"},
"CEntities_FindByModelWithin":{"body":"FindByModelWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})","description":"CEntities:\nFind entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByModelWithin"},
"CEntities_FindByClassnameWithin":{"body":"FindByClassnameWithin(${handle_1}, ${string_2}, ${Vector_3}, ${float_4})","description":"CEntities:\nFind entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByClassnameWithin"},
"CEntities_FindByClassname":{"body":"FindByClassname(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByClassname"},
"ACT_DOTA_UNDYING_DECAY":{"body":"ACT_DOTA_UNDYING_DECAY","description":"","prefix":"ACT_DOTA_UNDYING_DECAY"},
"MODIFIER_PROPERTY_RESPAWNTIME_STACKING":{"body":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING","description":"Value[74]modifierfunction->GetModifierStackingRespawnTime","prefix":"MODIFIER_PROPERTY_RESPAWNTIME_STACKING"},
"CDOTA_BaseNPC_HasModifier":{"body":"HasModifier(${pszScriptName})","description":"CDOTA_BaseNPC:\nSees if this unit has a given modifier., return bool","prefix":"HasModifier"},
"CEntities_FindAllByTarget":{"body":"FindAllByTarget(${string_1})","description":"CEntities:\nFind entities by targetname., return table","prefix":"FindAllByTarget"},
"CEntities_FindAllByNameWithin":{"body":"FindAllByNameWithin(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by name within a radius., return table","prefix":"FindAllByNameWithin"},
"CEntities_FindAllByName":{"body":"FindAllByName(${string_1})","description":"CEntities:\nFind all entities by name. Returns an array containing all the found entities in it., return table","prefix":"FindAllByName"},
"CDOTA_Item_Lua_GetPlaybackRateOverride":{"body":"GetPlaybackRateOverride()","description":"CDOTA_Item_Lua:\nReturn the animation rate of the cast animation., return float","prefix":"GetPlaybackRateOverride"},
"GetPhysAngularVelocity":{"body":"GetPhysAngularVelocity(${handle_1})","description":"Get Angular Velocity for VPHYS or normal object, return Vector","prefix":"GetPhysAngularVelocity"},
"CEntities_FindAllByClassnameWithin":{"body":"FindAllByClassnameWithin(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by class name within a radius., return table","prefix":"FindAllByClassnameWithin"},
"CDotaSubquestBase_SetTextReplaceValue":{"body":"SetTextReplaceValue(${valueSlot}, ${value})","description":"CDotaSubquestBase:\nSet a subquest value, return void","prefix":"SetTextReplaceValue"},
"CEntities_FindInSphere":{"body":"FindInSphere(${handle_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindInSphere"},
"CDOTABaseAbility_GetStolenActivityModifier":{"body":"GetStolenActivityModifier()","description":"CDOTABaseAbility:\n, return string","prefix":"GetStolenActivityModifier"},
"MODIFIER_PROPERTY_MANACOST_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE","description":"Value[78]modifierfunction->GetModifierPercentageManacost","prefix":"MODIFIER_PROPERTY_MANACOST_PERCENTAGE"},
"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_ANCIENTS"},
"CDOTA_BaseNPC_Hero_UnitCanRespawn":{"body":"UnitCanRespawn()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"UnitCanRespawn"},
"CDOTA_Item_Lua_OnHeroLevelUp":{"body":"OnHeroLevelUp()","description":"CDOTA_Item_Lua:\nCaster gained a level., return void","prefix":"OnHeroLevelUp"},
"DAMAGE_TYPE_HP_REMOVAL":{"body":"DAMAGE_TYPE_HP_REMOVAL","description":"","prefix":"DAMAGE_TYPE_HP_REMOVAL"},
"CDOTA_BaseNPC_FindModifierByName":{"body":"FindModifierByName(${pszScriptName})","description":"CDOTA_BaseNPC:\nReturn a handle to the modifier of the given name if found, else nil (string Name ), return handle","prefix":"FindModifierByName"},
"CDotaQuest_GetSubquest":{"body":"GetSubquest(${nIndex})","description":"CDotaQuest:\nFinds a subquest from this quest by index, return handle","prefix":"GetSubquest"},
"CDOTA_BaseNPC_IsClone":{"body":"IsClone()","description":"CDOTA_BaseNPC:\nIs this unit a clone? (Meepo), return bool","prefix":"IsClone"},
"MODIFIER_PROPERTY_MAGICDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MAGICDAMAGEOUTGOING_PERCENTAGE","description":"Value[31]modifierfunction->GetModifierMagicDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_MAGICDAMAGEOUTGOING_PERCENTAGE"},
"CDebugOverlayScriptHelper_YawArrow":{"body":"YawArrow(${Vector_1}, ${float_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a arrow associated with a specific yaw. Specify endpoints in world space., return void","prefix":"YawArrow"},
"DOTA_MUSIC_STATUS_LAST":{"body":"DOTA_MUSIC_STATUS_LAST","description":"","prefix":"DOTA_MUSIC_STATUS_LAST"},
"CDOTA_BaseNPC_Creature_SetHPRegenGain":{"body":"SetHPRegenGain(${flHPRegenGain})","description":"CDOTA_BaseNPC_Creature:\nSet the hit points regen gained per level on this creature., return void","prefix":"SetHPRegenGain"},
"TraceLine":{"body":"TraceLine(${handle_1})","description":"Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid, return bool","prefix":"TraceLine"},
"CDebugOverlayScriptHelper_VertArrow":{"body":"VertArrow(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a vertical arrow. Specify endpoints in world space., return void","prefix":"VertArrow"},
"MODIFIER_STATE_LAST":{"body":"MODIFIER_STATE_LAST","description":"","prefix":"MODIFIER_STATE_LAST"},
"CDebugOverlayScriptHelper_Triangle":{"body":"Triangle(${Vector_1}, ${Vector_2}, ${Vector_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a filled triangle. Specify vertices in world space., return void","prefix":"Triangle"},
"CDebugOverlayScriptHelper_Texture":{"body":"Texture(${string_1}, ${Vector2D_2}, ${Vector2D_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${Vector2D_8}, ${Vector2D_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a screen-space texture. Coordinates are in pixels., return void","prefix":"Texture"},
"CDebugOverlayScriptHelper_Text":{"body":"Text(${Vector_1}, ${int_2}, ${string_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws 2D text. Specify origin in world space., return void","prefix":"Text"},
"CDebugOverlayScriptHelper_SweptBox":{"body":"SweptBox(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Vector_4}, ${Quaternion_5}, ${int_6}, ${int_7}, ${int_8}, ${int_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a swept box. Specify endpoints in world space and the bounds in local space., return void","prefix":"SweptBox"},
"CDOTABaseGameMode_SetFogOfWarDisabled":{"body":"SetFogOfWarDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn the fog of war on or off., return void","prefix":"SetFogOfWarDisabled"},
"CreateModifierThinker":{"body":"CreateModifierThinker(${handle_1}, ${handle_2}, ${string_3}, ${handle_4}, ${Vector_5}, ${int_6}, ${bool_7})","description":"Create a modifier not associated with an NPC. ( hCaster, hAbility, modifierName, paramTable, vOrigin, nTeamNumber, bPhantomBlocker ), return handle","prefix":"CreateModifierThinker"},
"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT":{"body":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT","description":"Value[1]modifierfunction->GetModifierPreAttack_BonusDamagePostCrit","prefix":"MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE_POST_CRIT"},
"CBaseFlex_ScriptPlayScene":{"body":"ScriptPlayScene(${pszScene}, ${flDelay})","description":"CBaseFlex:\n( vcd file, delay ) - play specified vcd file, return float","prefix":"ScriptPlayScene"},
"CBaseEntity_EyePosition":{"body":"EyePosition()","description":"CBaseEntity:\nGet vector to eye position - absolute coords., return Vector","prefix":"EyePosition"},
"CDebugOverlayScriptHelper_PushDebugOverlayScope":{"body":"PushDebugOverlayScope(${utlstringtoken_1})","description":"CDebugOverlayScriptHelper:\nPushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch., return void","prefix":"PushDebugOverlayScope"},
"DOTA_DAMAGE_FLAG_NONE":{"body":"DOTA_DAMAGE_FLAG_NONE","description":"","prefix":"DOTA_DAMAGE_FLAG_NONE"},
"CDOTATutorial_SetItemGuide":{"body":"SetItemGuide(${string_1})","description":"CDOTATutorial:\nSet the current item guide., return void","prefix":"SetItemGuide"},
"ACT_DOTA_SHAKE":{"body":"ACT_DOTA_SHAKE","description":"","prefix":"ACT_DOTA_SHAKE"},
"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE","description":"Value[45]modifierfunction->GetModifierPhysicalArmorBonusUnique","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_UNIQUE"},
"CDOTABaseGameMode_SetStickyItemDisabled":{"body":"SetStickyItemDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nHide the sticky item in the quickbuy., return void","prefix":"SetStickyItemDisabled"},
"CDOTA_PlayerResource_GetTotalEarnedXP":{"body":"GetTotalEarnedXP(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTotalEarnedXP"},
"DOTA_HEROPICK_STATE_CD_SELECT4":{"body":"DOTA_HEROPICK_STATE_CD_SELECT4","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT4"},
"MakeStringToken":{"body":"MakeStringToken(${string_1})","description":"Checks to see if the given hScript is a valid entity, return int","prefix":"MakeStringToken"},
"CancelEntityIOEvents":{"body":"CancelEntityIOEvents(${ehandle_1})","description":"Create all I/O events for a particular entity, return void","prefix":"CancelEntityIOEvents"},
"CBaseEntity_GetBounds":{"body":"GetBounds()","description":"CBaseEntity:\nGet a table containing the 'Mins' & 'Maxs' vector bounds, centered on object., return table","prefix":"GetBounds"},
"CDOTA_BaseNPC_GetMagicalArmorValue":{"body":"GetMagicalArmorValue()","description":"CDOTA_BaseNPC:\nReturns current magical armor value., return float","prefix":"GetMagicalArmorValue"},
"CDebugOverlayScriptHelper_EntitySkeleton":{"body":"EntitySkeleton(${ehandle_1}, ${float_2})","description":"CDebugOverlayScriptHelper:\nDraws the skeleton of the entity, return void","prefix":"EntitySkeleton"},
"MODIFIER_EVENT_ON_REFRESH":{"body":"MODIFIER_EVENT_ON_REFRESH","description":"","prefix":"MODIFIER_EVENT_ON_REFRESH"},
"CDebugOverlayScriptHelper_DrawTickMarkedLine":{"body":"DrawTickMarkedLine(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a dashed line. Specify endpoints in world space., return void","prefix":"DrawTickMarkedLine"},
"CDebugOverlayScriptHelper_CircleScreenOriented":{"body":"CircleScreenOriented(${Vector_1}, ${float_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a circle oriented to the screen. Specify center in world space., return void","prefix":"CircleScreenOriented"},
"CDebugOverlayScriptHelper_Circle":{"body":"Circle(${Vector_1}, ${Quaternion_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a circle. Specify center in world space., return void","prefix":"Circle"},
"ACT_DOTA_TELEPORT":{"body":"ACT_DOTA_TELEPORT","description":"","prefix":"ACT_DOTA_TELEPORT"},
"CDOTA_BaseNPC_IsDominated":{"body":"IsDominated()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsDominated"},
"CDebugOverlayScriptHelper_Capsule":{"body":"Capsule(${Vector_1}, ${Quaternion_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a capsule. Specify base in world space., return void","prefix":"Capsule"},
"CDebugOverlayScriptHelper_BoxAngles":{"body":"BoxAngles(${Vector_1}, ${Vector_2}, ${Vector_3}, ${Quaternion_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws an oriented box at the origin. Specify bounds in local space., return void","prefix":"BoxAngles"},
"CDOTA_Buff_GetCreationTime":{"body":"GetCreationTime()","description":"CDOTA_Buff:\n, return float","prefix":"GetCreationTime"},
"CDebugOverlayScriptHelper_Box":{"body":"Box(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a world-space axis-aligned box. Specify bounds in world space., return void","prefix":"Box"},
"CDOTA_Unit_Nian_IsTailAlive":{"body":"IsTailAlive()","description":"CDOTA_Unit_Nian:\nIs the Nian's tail broken?, return bool","prefix":"IsTailAlive"},
"CDOTA_BaseNPC_GetProjectileSpeed":{"body":"GetProjectileSpeed()","description":"CDOTA_BaseNPC:\n, return int","prefix":"GetProjectileSpeed"},
"CDOTA_Unit_Nian_GetHorn":{"body":"GetHorn()","description":"CDOTA_Unit_Nian:\nIs the Nian horn?, return handle","prefix":"GetHorn"},
"DOTA_ABILITY_LAST_BEHAVIOR":{"body":"DOTA_ABILITY_LAST_BEHAVIOR","description":"","prefix":"DOTA_ABILITY_LAST_BEHAVIOR"},
"ACT_DOTA_ATTACK2":{"body":"ACT_DOTA_ATTACK2","description":"","prefix":"ACT_DOTA_ATTACK2"},
"CDOTA_PlayerResource_WhoSelectedHero":{"body":"WhoSelectedHero(${pHeroFilename})","description":"CDOTA_PlayerResource:\n, return int","prefix":"WhoSelectedHero"},
"CDOTA_PlayerResource_UpdateTeamSlot":{"body":"UpdateTeamSlot(${iPlayerID}, ${iTeamNumber}, ${desiredSlot})","description":"CDOTA_PlayerResource:\n, return void","prefix":"UpdateTeamSlot"},
"CDOTA_Item_DataDriven_ApplyDataDrivenThinker":{"body":"ApplyDataDrivenThinker(${hCaster}, ${vLocation}, ${pszModifierName}, ${hModifierTable})","description":"CDOTA_Item_DataDriven:\nApplies a data driven thinker at the location, return handle","prefix":"ApplyDataDrivenThinker"},
"CDOTA_PlayerResource_SetPlayerReservedState":{"body":"SetPlayerReservedState(${iPlayerID}, ${bReserved})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetPlayerReservedState"},
"CDOTA_PlayerResource_GetPlayerCount":{"body":"GetPlayerCount()","description":"CDOTA_PlayerResource:\nIncludes spectators and players not assigned to a team, return int","prefix":"GetPlayerCount"},
"MODIFIER_EVENT_ON_ATTACK":{"body":"MODIFIER_EVENT_ON_ATTACK","description":"Value[117]modifierfunction->OnAttack","prefix":"MODIFIER_EVENT_ON_ATTACK"},
"UF_FAIL_CREEP":{"body":"UF_FAIL_CREEP","description":"","prefix":"UF_FAIL_CREEP"},
"CDOTA_PlayerResource_SetGold":{"body":"SetGold(${iPlayerID}, ${iGold}, ${bReliable})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetGold"},
"CDOTA_PlayerResource_SetCameraTarget":{"body":"SetCameraTarget(${nPlayerID}, ${hTarget})","description":"CDOTA_PlayerResource:\n(playerID, entity) - force the given player's camera to follow the given entity, return void","prefix":"SetCameraTarget"},
"FireEntityIOInputString":{"body":"FireEntityIOInputString(${ehandle_1}, ${string_2}, ${string_3})","description":"Fire Entity's Action Input with passed String - you own the memory, return void","prefix":"FireEntityIOInputString"},
"CDOTA_PlayerResource_SetBuybackCooldownTime":{"body":"SetBuybackCooldownTime(${nPlayerID}, ${flBuybackCooldown})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetBuybackCooldownTime"},
"CDOTA_MapTree_GrowBack":{"body":"GrowBack()","description":"CDOTA_MapTree:\nGrows back the tree if it was cut down., return void","prefix":"GrowBack"},
"CDOTA_BaseNPC_GetModifierStackCount":{"body":"GetModifierStackCount(${pszScriptName}, ${hCaster})","description":"CDOTA_BaseNPC:\nGets the stack count of a given modifier., return int","prefix":"GetModifierStackCount"},
"CDOTA_PlayerResource_ResetTotalEarnedGold":{"body":"ResetTotalEarnedGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ResetTotalEarnedGold"},
"CPointTemplate_DeleteCreatedSpawnGroups":{"body":"DeleteCreatedSpawnGroups()","description":"CPointTemplate:\nDeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this., return void","prefix":"DeleteCreatedSpawnGroups"},
"CDOTA_PlayerResource_IsHeroSharedWithPlayerID":{"body":"IsHeroSharedWithPlayerID(${nUnitOwnerPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"IsHeroSharedWithPlayerID"},
"CScriptParticleManager_CreateParticleForPlayer":{"body":"CreateParticleForPlayer(${string_1}, ${int_2}, ${handle_3}, ${handle_4})","description":"CScriptParticleManager:\nCreates a new particle effect that only plays for the specified player, return int","prefix":"CreateParticleForPlayer"},
"CDOTABaseGameMode_SetTopBarTeamValue":{"body":"SetTopBarTeamValue(${iTeam}, ${nValue})","description":"CDOTABaseGameMode:\nSet the team values on the top game bar., return void","prefix":"SetTopBarTeamValue"},
"CDOTA_PlayerResource_GetSteamAccountID":{"body":"GetSteamAccountID(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return unsigned","prefix":"GetSteamAccountID"},
"ACT_DOTA_AW_MAGNETIC_FIELD":{"body":"ACT_DOTA_AW_MAGNETIC_FIELD","description":"","prefix":"ACT_DOTA_AW_MAGNETIC_FIELD"},
"CDOTA_PlayerResource_IncrementStreak":{"body":"IncrementStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementStreak"},
"CDOTA_PlayerResource_IncrementNearbyCreepDeaths":{"body":"IncrementNearbyCreepDeaths(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementNearbyCreepDeaths"},
"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT":{"body":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT","description":"Value[51]modifierfunction->GetModifierConstantManaRegen","prefix":"MODIFIER_PROPERTY_MANA_REGEN_CONSTANT"},
"CDOTA_Item_Lua_GetGoldCost":{"body":"GetGoldCost(${iLevel})","description":"CDOTA_Item_Lua:\nReturn gold cost at the given level (-1 is current)., return int","prefix":"GetGoldCost"},
"CDOTA_BaseNPC_HasItemInInventory":{"body":"HasItemInInventory(${pItemName})","description":"CDOTA_BaseNPC:\nSee whether this unit has an item by name., return bool","prefix":"HasItemInInventory"},
"CDOTA_BaseNPC_FindAllModifiersByName":{"body":"FindAllModifiersByName(${pszScriptName})","description":"CDOTA_BaseNPC:\nReturns a table of all of the modifiers on the NPC with the passed name (modifierName), return table","prefix":"FindAllModifiersByName"},
"CDOTA_PlayerResource_IncrementKills":{"body":"IncrementKills(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementKills"},
"CDOTA_PlayerResource_IncrementDenies":{"body":"IncrementDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementDenies"},
"CDOTA_PlayerResource_IncrementClaimedDenies":{"body":"IncrementClaimedDenies(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementClaimedDenies"},
"CDOTA_Item_Lua_IsHiddenWhenStolen":{"body":"IsHiddenWhenStolen()","description":"CDOTA_Item_Lua:\nReturns true if this ability is hidden when stolen by Spell Steal., return bool","prefix":"IsHiddenWhenStolen"},
"CDOTABaseAbility_GetIntrinsicModifierName":{"body":"GetIntrinsicModifierName()","description":"CDOTABaseAbility:\n, return string","prefix":"GetIntrinsicModifierName"},
"CDOTA_PlayerResource_HaveAllPlayersJoined":{"body":"HaveAllPlayersJoined()","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HaveAllPlayersJoined"},
"CDOTA_PlayerResource_HasRepicked":{"body":"HasRepicked(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"HasRepicked"},
"CDOTA_PlayerResource_ClearStreak":{"body":"ClearStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"ClearStreak"},
"CDOTA_PlayerResource_HasCustomGameTicketForPlayerID":{"body":"HasCustomGameTicketForPlayerID(${iPlayerID})","description":"CDOTA_PlayerResource:\nDoes this player have a custom game ticket for this game?, return bool","prefix":"HasCustomGameTicketForPlayerID"},
"CDOTA_PlayerResource_GetXPPerMin":{"body":"GetXPPerMin(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetXPPerMin"},
"CDOTABaseAbility_SetStolen":{"body":"SetStolen(${bStolen})","description":"CDOTABaseAbility:\n, return void","prefix":"SetStolen"},
"DOTA_ModifyGold_GameTick":{"body":"DOTA_ModifyGold_GameTick","description":"","prefix":"DOTA_ModifyGold_GameTick"},
"CDOTA_PlayerResource_GetTowerKills":{"body":"GetTowerKills(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTowerKills"},
"InitLogFile":{"body":"InitLogFile(${string_1}, ${string_2})","description":"If the given file doesn't exist, creates it with the given contents; does nothing if it exists, return void","prefix":"InitLogFile"},
"CDOTA_PlayerResource_GetTowerDamageTaken":{"body":"GetTowerDamageTaken(${iPlayerID}, ${bTotal})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTowerDamageTaken"},
"CDOTA_BaseNPC_DropItemAtPosition":{"body":"DropItemAtPosition(${vDest}, ${hItem})","description":"CDOTA_BaseNPC:\nDrop an item at a given point., return void","prefix":"DropItemAtPosition"},
"CDOTA_PlayerResource_GetTotalEarnedGold":{"body":"GetTotalEarnedGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTotalEarnedGold"},
"CBaseEntity_GetBoundingMaxs":{"body":"GetBoundingMaxs()","description":"CBaseEntity:\nGet a vector containing max bounds, centered on object., return Vector","prefix":"GetBoundingMaxs"},
"CDOTA_Ability_Lua_OnProjectileHit":{"body":"OnProjectileHit(${hTarget}, ${vLocation})","description":"CDOTA_Ability_Lua:\n(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid)., return bool","prefix":"OnProjectileHit"},
"CDOTA_PlayerResource_GetTimeOfLastDeath":{"body":"GetTimeOfLastDeath(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetTimeOfLastDeath"},
"CDOTA_PlayerResource_GetTeamKills":{"body":"GetTeamKills(${iTeam})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTeamKills"},
"CDOTA_PlayerResource_GetTeam":{"body":"GetTeam(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTeam"},
"CDOTA_BaseNPC_TriggerSpellAbsorb":{"body":"TriggerSpellAbsorb(${hAbility})","description":"CDOTA_BaseNPC:\n, return bool","prefix":"TriggerSpellAbsorb"},
"CDOTAGamerules_ResetDefeated":{"body":"ResetDefeated()","description":"CDOTAGamerules:\nRestart after killing the ancient, etc., return void","prefix":"ResetDefeated"},
"CDOTA_PlayerResource_GetStreak":{"body":"GetStreak(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetStreak"},
"CDOTA_Item_Physical_GetCreationTime":{"body":"GetCreationTime()","description":"CDOTA_Item_Physical:\nReturns the game time when this item was created in the world, return float","prefix":"GetCreationTime"},
"CDOTA_BaseNPC_Hero_SetBaseStrength":{"body":"SetBaseStrength(${flStrength})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBaseStrength"},
"ACT_DOTA_CAST_ABILITY_4":{"body":"ACT_DOTA_CAST_ABILITY_4","description":"","prefix":"ACT_DOTA_CAST_ABILITY_4"},
"CDOTA_PlayerResource_GetSelectedHeroEntity":{"body":"GetSelectedHeroEntity(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return handle","prefix":"GetSelectedHeroEntity"},
"CDOTA_BaseNPC_IsAncient":{"body":"IsAncient()","description":"CDOTA_BaseNPC:\nIs this unit an Ancient?, return bool","prefix":"IsAncient"},
"CDOTA_PlayerResource_GetRespawnSeconds":{"body":"GetRespawnSeconds(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRespawnSeconds"},
"CDOTA_PlayerResource_GetRawPlayerDamage":{"body":"GetRawPlayerDamage(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRawPlayerDamage"},
"CDOTA_PlayerResource_GetPlayerLoadedCompletely":{"body":"GetPlayerLoadedCompletely(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return bool","prefix":"GetPlayerLoadedCompletely"},
"CDOTA_PlayerResource_GetPlayerCountForTeam":{"body":"GetPlayerCountForTeam(${iTeam})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetPlayerCountForTeam"},
"CDOTA_PlayerResource_SetLastBuybackTime":{"body":"SetLastBuybackTime(${iPlayerID}, ${iLastBuybackTime})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetLastBuybackTime"},
"CDOTA_PlayerResource_GetPlayer":{"body":"GetPlayer(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return handle","prefix":"GetPlayer"},
"CDOTA_BaseNPC_AddNoDraw":{"body":"AddNoDraw()","description":"CDOTA_BaseNPC:\nAdds the no draw flag., return void","prefix":"AddNoDraw"},
"CDOTA_PlayerResource_GetNumCouriersForTeam":{"body":"GetNumCouriersForTeam(${nTeamNumber})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNumCouriersForTeam"},
"CDOTA_PlayerResource_GetNumConsumablesPurchased":{"body":"GetNumConsumablesPurchased(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNumConsumablesPurchased"},
"CDOTA_PlayerResource_GetNthPlayerIDOnTeam":{"body":"GetNthPlayerIDOnTeam(${iTeamNumber}, ${iNthPlayer})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetNthPlayerIDOnTeam"},
"GetTreeIdForEntityIndex":{"body":"GetTreeIdForEntityIndex(${int_1})","description":"Given and entity index of a tree, get the tree id for use for use with with unit orders., return int","prefix":"GetTreeIdForEntityIndex"},
"CScriptParticleManager_CreateParticle":{"body":"CreateParticle(${string_1}, ${int_2}, ${handle_3})","description":"CScriptParticleManager:\nCreates a new particle effect, return int","prefix":"CreateParticle"},
"CDOTA_PlayerResource_GetLastHits":{"body":"GetLastHits(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetLastHits"},
"CBaseEntity_GetRightVector":{"body":"GetRightVector()","description":"CBaseEntity:\nGet the right vector of the entity., return Vector","prefix":"GetRightVector"},
"CDOTA_PlayerResource_GetKills":{"body":"GetKills(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetKills"},
"CDOTA_PlayerResource_GetGoldSpentOnSupport":{"body":"GetGoldSpentOnSupport(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnSupport"},
"ACT_DOTA_CHANNEL_END_ABILITY_3":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_3","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_3"},
"CDOTA_PlayerResource_GetGoldSpentOnItems":{"body":"GetGoldSpentOnItems(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnItems"},
"CDOTA_PlayerResource_GetGoldSpentOnConsumables":{"body":"GetGoldSpentOnConsumables(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnConsumables"},
"CDOTA_PlayerResource_GetGoldSpentOnBuybacks":{"body":"GetGoldSpentOnBuybacks(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGoldSpentOnBuybacks"},
"CDOTA_PlayerResource_GetGoldPerMin":{"body":"GetGoldPerMin(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetGoldPerMin"},
"CDOTA_PlayerResource_GetConnectionState":{"body":"GetConnectionState(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return <unknown>","prefix":"GetConnectionState"},
"CDOTA_PlayerResource_AddClaimedFarm":{"body":"AddClaimedFarm(${iPlayerID}, ${flFarmValue}, ${bEarnedValue})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddClaimedFarm"},
"CDOTA_Modifier_Lua_Motion_Both_GetPriority":{"body":"GetPriority()","description":"CDOTA_Modifier_Lua_Motion_Both:\nGet the priority, return int","prefix":"GetPriority"},
"MODIFIER_STATE_INVULNERABLE":{"body":"MODIFIER_STATE_INVULNERABLE","description":"","prefix":"MODIFIER_STATE_INVULNERABLE"},
"CDOTABaseGameMode_SetKillingSpreeAnnouncerDisabled":{"body":"SetKillingSpreeAnnouncerDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nMutes the in-game killing spree announcer., return void","prefix":"SetKillingSpreeAnnouncerDisabled"},
"TraceHull":{"body":"TraceHull(${handle_1})","description":"Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid, return bool","prefix":"TraceHull"},
"CDOTA_BaseNPC_CastAbilityOnTarget":{"body":"CastAbilityOnTarget(${hTarget}, ${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability on a target entity., return void","prefix":"CastAbilityOnTarget"},
"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE","description":"Value[32]modifierfunction->GetModifierBaseDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE"},
"CDOTA_PlayerResource_IncrementAssists":{"body":"IncrementAssists(${iPlayerID}, ${iVictimID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementAssists"},
"CDOTABaseGameMode_ClearTrackingProjectileFilter":{"body":"ClearTrackingProjectileFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls when tracking projectiles are launched., return void","prefix":"ClearTrackingProjectileFilter"},
"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE","description":"Value[12]modifierfunction->GetModifierMoveSpeedBonus_Percentage","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE"},
"CDOTA_Item_Lua_GetAssociatedSecondaryAbilities":{"body":"GetAssociatedSecondaryAbilities()","description":"CDOTA_Item_Lua:\nReturns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities., return string","prefix":"GetAssociatedSecondaryAbilities"},
"CDOTA_BaseNPC_Hero_GetRespawnsDisabled":{"body":"GetRespawnsDisabled()","description":"CDOTA_BaseNPC_Hero:\nIs this hero prevented from respawning?, return bool","prefix":"GetRespawnsDisabled"},
"ACT_DOTA_CAST_ABILITY_2_ES_ROLL":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL"},
"CDOTABaseGameMode_SetBountyRunePickupFilter":{"body":"SetBountyRunePickupFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetBountyRunePickupFilter"},
"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP":{"body":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP","description":"","prefix":"ACT_DOTA_JAKIRO_LIQUIDFIRE_LOOP"},
"CDOTA_Ability_Lua_OnAbilityPhaseStart":{"body":"OnAbilityPhaseStart()","description":"CDOTA_Ability_Lua:\nCast time begins (return true for successful cast)., return bool","prefix":"OnAbilityPhaseStart"},
"MODIFIER_EVENT_ON_DEATH":{"body":"MODIFIER_EVENT_ON_DEATH","description":"Value[135]modifierfunction->OnDeath","prefix":"MODIFIER_EVENT_ON_DEATH"},
"CDOTA_BaseNPC_GetConstantBasedManaRegen":{"body":"GetConstantBasedManaRegen()","description":"CDOTA_BaseNPC:\nThis Mana regen is derived from constant bonuses like Basilius., return float","prefix":"GetConstantBasedManaRegen"},
"MODIFIER_STATE_HEXED":{"body":"MODIFIER_STATE_HEXED","description":"","prefix":"MODIFIER_STATE_HEXED"},
"DOTA_HEROPICK_STATE_CM_INTRO":{"body":"DOTA_HEROPICK_STATE_CM_INTRO","description":"","prefix":"DOTA_HEROPICK_STATE_CM_INTRO"},
"PrecacheUnitByNameAsync":{"body":"PrecacheUnitByNameAsync(${string_1}, ${handle_2}, ${int_3})","description":"Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished., return void","prefix":"PrecacheUnitByNameAsync"},
"CDOTA_PlayerResource_IncrementMisses":{"body":"IncrementMisses(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementMisses"},
"DOTA_LOADOUT_TYPE_SHAPESHIFT":{"body":"DOTA_LOADOUT_TYPE_SHAPESHIFT","description":"","prefix":"DOTA_LOADOUT_TYPE_SHAPESHIFT"},
"CDOTABaseAbility_IsActivated":{"body":"IsActivated()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsActivated"},
"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE":{"body":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE","description":"Value[159]modifierfunction->GetModifierIgnoreCastAngle","prefix":"MODIFIER_PROPERTY_IGNORE_CAST_ANGLE"},
"MODIFIER_EVENT_ON_PROJECTILE_DODGE":{"body":"MODIFIER_EVENT_ON_PROJECTILE_DODGE","description":"Value[121]modifierfunction->OnProjectileDodge","prefix":"MODIFIER_EVENT_ON_PROJECTILE_DODGE"},
"UF_FAIL_MAGIC_IMMUNE_ENEMY":{"body":"UF_FAIL_MAGIC_IMMUNE_ENEMY","description":"","prefix":"UF_FAIL_MAGIC_IMMUNE_ENEMY"},
"DOTA_UNIT_TARGET_COURIER":{"body":"DOTA_UNIT_TARGET_COURIER","description":"","prefix":"DOTA_UNIT_TARGET_COURIER"},
"DOTA_INVENTORY_ALLOW_NONE":{"body":"DOTA_INVENTORY_ALLOW_NONE","description":"","prefix":"DOTA_INVENTORY_ALLOW_NONE"},
"DOTA_ABILITY_BEHAVIOR_AURA":{"body":"DOTA_ABILITY_BEHAVIOR_AURA","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_AURA"},
"CDOTA_Buff_GetRemainingTime":{"body":"GetRemainingTime()","description":"CDOTA_Buff:\n, return float","prefix":"GetRemainingTime"},
"FrameTime":{"body":"FrameTime()","description":"Get the time spent on the server in the last frame, return float","prefix":"FrameTime"},
"CDOTA_BaseNPC_Hero_SetBaseAgility":{"body":"SetBaseAgility(${flAgility})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetBaseAgility"},
"CDOTA_BaseNPC_PatrolToPosition":{"body":"PatrolToPosition(${vDest})","description":"CDOTA_BaseNPC:\nIssue a Patrol-To command., return void","prefix":"PatrolToPosition"},
"MODIFIER_PROPERTY_DISABLE_AUTOATTACK":{"body":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK","description":"Value[92]modifierfunction->GetDisableAutoAttack","prefix":"MODIFIER_PROPERTY_DISABLE_AUTOATTACK"},
"DOTA_UNIT_CAP_MELEE_ATTACK":{"body":"DOTA_UNIT_CAP_MELEE_ATTACK","description":"","prefix":"DOTA_UNIT_CAP_MELEE_ATTACK"},
"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_MOVEMENT"},
"CBaseAnimating_SetBodygroup":{"body":"SetBodygroup(${iGroup}, ${iValue})","description":"CBaseAnimating:\nSets a bodygroup., return void","prefix":"SetBodygroup"},
"GetTeamName":{"body":"GetTeamName(${int_1})","description":"( int teamID ), return string","prefix":"GetTeamName"},
"DOTA_HEROPICK_STATE_CD_BAN3":{"body":"DOTA_HEROPICK_STATE_CD_BAN3","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN3"},
"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_SUMMONED"},
"ACT_DOTA_LEAP_SWIPE":{"body":"ACT_DOTA_LEAP_SWIPE","description":"","prefix":"ACT_DOTA_LEAP_SWIPE"},
"CDOTAGamerules_IsGamePaused":{"body":"IsGamePaused()","description":"CDOTAGamerules:\nReturns whether the game is paused., return bool","prefix":"IsGamePaused"},
"CDOTAGamerules_SetGoldPerTick":{"body":"SetGoldPerTick(${int_1})","description":"CDOTAGamerules:\nSet the auto gold increase per timed interval., return void","prefix":"SetGoldPerTick"},
"QUEST_NUM_TEXT_REPLACE_VALUES":{"body":"QUEST_NUM_TEXT_REPLACE_VALUES","description":"","prefix":"QUEST_NUM_TEXT_REPLACE_VALUES"},
"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL":{"body":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"},
"CDOTA_BaseNPC_NoUnitCollision":{"body":"NoUnitCollision()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoUnitCollision"},
"EmitSoundOn":{"body":"EmitSoundOn(${string_1}, ${handle_2})","description":"Play named sound on Entity, return void","prefix":"EmitSoundOn"},
"rr_GetResponseTargets":{"body":"rr_GetResponseTargets()","description":"Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }., return handle","prefix":"rr_GetResponseTargets"},
"ACT_DOTA_OVERRIDE_ABILITY_4":{"body":"ACT_DOTA_OVERRIDE_ABILITY_4","description":"","prefix":"ACT_DOTA_OVERRIDE_ABILITY_4"},
"UnitFilter":{"body":"UnitFilter(${handle_1}, ${int_2}, ${int_3}, ${int_4}, ${int_5})","description":"Check if a unit passes a set of filters. (hNPC, nTargetTeam, nTargetType, nTargetFlags, nTeam, return int","prefix":"UnitFilter"},
"CDOTABaseAbility_HeroXPChange":{"body":"HeroXPChange(${flXP})","description":"CDOTABaseAbility:\n, return bool","prefix":"HeroXPChange"},
"DOTA_ModifyGold_AbandonedRedistribute":{"body":"DOTA_ModifyGold_AbandonedRedistribute","description":"","prefix":"DOTA_ModifyGold_AbandonedRedistribute"},
"CDOTA_BaseNPC_GetUnitLabel":{"body":"GetUnitLabel()","description":"CDOTA_BaseNPC:\n, return string","prefix":"GetUnitLabel"},
"MODIFIER_EVENT_ON_ORDER":{"body":"MODIFIER_EVENT_ON_ORDER","description":"Value[122]modifierfunction->OnOrder","prefix":"MODIFIER_EVENT_ON_ORDER"},
"CDOTATutorial_SetQuickBuy":{"body":"SetQuickBuy(${string_1})","description":"CDOTATutorial:\nSet players quick buy item., return void","prefix":"SetQuickBuy"},
"CDOTA_BaseNPC_FadeGesture":{"body":"FadeGesture(${nActivity})","description":"CDOTA_BaseNPC:\nFade and remove the given gesture activity., return void","prefix":"FadeGesture"},
"CBaseCombatCharacter_GetFaction":{"body":"GetFaction()","description":"CBaseCombatCharacter:\nGet the combat character faction., return int","prefix":"GetFaction"},
"CDOTABaseGameMode_SetRuneSpawnFilter":{"body":"SetRuneSpawnFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetRuneSpawnFilter"},
"UF_FAIL_NIGHTMARED":{"body":"UF_FAIL_NIGHTMARED","description":"","prefix":"UF_FAIL_NIGHTMARED"},
"CDOTA_BaseNPC_Hero_GetAbilityPoints":{"body":"GetAbilityPoints()","description":"CDOTA_BaseNPC_Hero:\nGets the current unspent ability points., return int","prefix":"GetAbilityPoints"},
"PrecacheModel":{"body":"PrecacheModel(${string_1}, ${handle_2})","description":"( modelName, context ) - Manually precache a single model, return void","prefix":"PrecacheModel"},
"CDOTA_BaseNPC_Hero_ClearStreak":{"body":"ClearStreak()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"ClearStreak"},
"CDOTATutorial_AddBot":{"body":"AddBot(${string_1}, ${string_2}, ${string_3}, ${bool_4})","description":"CDOTATutorial:\nAdd a computer controlled bot., return bool","prefix":"AddBot"},
"CBaseCombatCharacter_GetEquippedWeapons":{"body":"GetEquippedWeapons()","description":"CBaseCombatCharacter:\nGetEquippedWeapons() : Returns an array of all the equipped weapons, return table","prefix":"GetEquippedWeapons"},
"CDOTA_BaseNPC_Creature_SetXPGain":{"body":"SetXPGain(${nXPGain})","description":"CDOTA_BaseNPC_Creature:\nSet the xp reward gained per level on this creature., return void","prefix":"SetXPGain"},
"UF_FAIL_OUT_OF_WORLD":{"body":"UF_FAIL_OUT_OF_WORLD","description":"","prefix":"UF_FAIL_OUT_OF_WORLD"},
"CDOTAGamerules_SetCreepMinimapIconScale":{"body":"SetCreepMinimapIconScale(${float_1})","description":"CDOTAGamerules:\n(flMinimapCreepIconScale) - Scale the creep icons on the minimap., return void","prefix":"SetCreepMinimapIconScale"},
"CDOTA_BaseNPC_GetLastAttackTime":{"body":"GetLastAttackTime()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetLastAttackTime"},
"DOTA_SPEECH_RECIPIENT_TYPE_MAX":{"body":"DOTA_SPEECH_RECIPIENT_TYPE_MAX","description":"","prefix":"DOTA_SPEECH_RECIPIENT_TYPE_MAX"},
"StartSoundEventFromPosition":{"body":"StartSoundEventFromPosition(${string_1}, ${Vector_2})","description":"Start a sound event from position, return void","prefix":"StartSoundEventFromPosition"},
"DOTA_UNIT_CAP_MOVE_GROUND":{"body":"DOTA_UNIT_CAP_MOVE_GROUND","description":"","prefix":"DOTA_UNIT_CAP_MOVE_GROUND"},
"FindUnitsInRadius":{"body":"FindUnitsInRadius(${int_1}, ${Vector_2}, ${handle_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9})","description":"Finds the units in a given radius with the given flags., return table","prefix":"FindUnitsInRadius"},
"DOTA_LOADOUT_TYPE_MISC":{"body":"DOTA_LOADOUT_TYPE_MISC","description":"","prefix":"DOTA_LOADOUT_TYPE_MISC"},
"UF_FAIL_MAGIC_IMMUNE_ALLY":{"body":"UF_FAIL_MAGIC_IMMUNE_ALLY","description":"","prefix":"UF_FAIL_MAGIC_IMMUNE_ALLY"},
"ACT_DOTA_FLINCH":{"body":"ACT_DOTA_FLINCH","description":"","prefix":"ACT_DOTA_FLINCH"},
"CDOTA_BaseNPC_Creature_AddItemDrop":{"body":"AddItemDrop(${hDropData})","description":"CDOTA_BaseNPC_Creature:\nAdd the specified item drop to this creature, return void","prefix":"AddItemDrop"},
"CDOTA_Buff_AddParticle":{"body":"AddParticle(${i}, ${bDestroyImmediately}, ${bStatusEffect}, ${iPriority}, ${bHeroEffect}, ${bOverheadEffect})","description":"CDOTA_Buff:\n(index, bDestroyImmediately, bStatusEffect, priority, bHeroEffect, bOverheadEffect, return void","prefix":"AddParticle"},
"UF_FAIL_DISABLE_HELP":{"body":"UF_FAIL_DISABLE_HELP","description":"","prefix":"UF_FAIL_DISABLE_HELP"},
"CEntities_FindAllByModel":{"body":"FindAllByModel(${string_1})","description":"CEntities:\nFind entities by model name., return table","prefix":"FindAllByModel"},
"CDOTA_BaseNPC_TimeUntilNextAttack":{"body":"TimeUntilNextAttack()","description":"CDOTA_BaseNPC:\n, return float","prefix":"TimeUntilNextAttack"},
"UF_FAIL_BUILDING":{"body":"UF_FAIL_BUILDING","description":"","prefix":"UF_FAIL_BUILDING"},
"ACT_DOTA_CAST_ABILITY_6":{"body":"ACT_DOTA_CAST_ABILITY_6","description":"","prefix":"ACT_DOTA_CAST_ABILITY_6"},
"CDOTA_BaseNPC_GetAttackDamage":{"body":"GetAttackDamage()","description":"CDOTA_BaseNPC:\nReturns a random integer between the minimum and maximum base damage of the unit., return int","prefix":"GetAttackDamage"},
"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP":{"body":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP","description":"","prefix":"ACT_DOTA_IDLE_IMPATIENT_SWORD_TAP"},
"MODIFIER_STATE_STUNNED":{"body":"MODIFIER_STATE_STUNNED","description":"","prefix":"MODIFIER_STATE_STUNNED"},
"CDOTA_BaseNPC_SetAggroTarget":{"body":"SetAggroTarget(${hAggroTarget})","description":"CDOTA_BaseNPC:\nSet this unit's aggro target to a specified unit., return void","prefix":"SetAggroTarget"},
"CDOTA_BaseNPC_SetPhysicalArmorBaseValue":{"body":"SetPhysicalArmorBaseValue(${flPhysicalArmorValue})","description":"CDOTA_BaseNPC:\nSets base physical armor value., return void","prefix":"SetPhysicalArmorBaseValue"},
"MODIFIER_STATE_EVADE_DISABLED":{"body":"MODIFIER_STATE_EVADE_DISABLED","description":"","prefix":"MODIFIER_STATE_EVADE_DISABLED"},
"CDOTA_BaseNPC_SetMaximumGoldBounty":{"body":"SetMaximumGoldBounty(${iGoldBountyMax})","description":"CDOTA_BaseNPC:\nSet the maximum gold bounty for this unit., return void","prefix":"SetMaximumGoldBounty"},
"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE":{"body":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY_ULTIMATE"},
"CDOTA_BaseNPC_Hero_IncrementDeaths":{"body":"IncrementDeaths(${iKillerID})","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementDeaths"},
"LoadKeyValuesFromString":{"body":"LoadKeyValuesFromString(${string_1})","description":"Creates a table from the specified keyvalues string, return table","prefix":"LoadKeyValuesFromString"},
"ACT_DOTA_THUNDER_STRIKE":{"body":"ACT_DOTA_THUNDER_STRIKE","description":"","prefix":"ACT_DOTA_THUNDER_STRIKE"},
"CBaseEntity_SetTeam":{"body":"SetTeam(${iTeamNum})","description":"CBaseEntity:\n, return void","prefix":"SetTeam"},
"CBaseEntity_SetOwner":{"body":"SetOwner(${pOwner})","description":"CBaseEntity:\nSets this entity's owner, return void","prefix":"SetOwner"},
"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD":{"body":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD"},
"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE","description":"Value[13]modifierfunction->GetModifierMoveSpeedBonus_Percentage_Unique","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE_UNIQUE"},
"MAX_PATTACH_TYPES":{"body":"MAX_PATTACH_TYPES","description":"","prefix":"MAX_PATTACH_TYPES"},
"DOTA_HEROPICK_STATE_CD_BAN4":{"body":"DOTA_HEROPICK_STATE_CD_BAN4","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN4"},
"LUA_MODIFIER_MOTION_HORIZONTAL":{"body":"LUA_MODIFIER_MOTION_HORIZONTAL","description":"","prefix":"LUA_MODIFIER_MOTION_HORIZONTAL"},
"MODIFIER_PROPERTY_MISS_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MISS_PERCENTAGE","description":"Value[42]modifierfunction->GetModifierMiss_Percentage","prefix":"MODIFIER_PROPERTY_MISS_PERCENTAGE"},
"ACT_TINY_GROWL":{"body":"ACT_TINY_GROWL","description":"","prefix":"ACT_TINY_GROWL"},
"CDOTA_BaseNPC_PickupDroppedItem":{"body":"PickupDroppedItem(${hItem})","description":"CDOTA_BaseNPC:\nPick up a dropped item., return void","prefix":"PickupDroppedItem"},
"CDOTAGamerules_SetStartingGold":{"body":"SetStartingGold(${int_1})","description":"CDOTAGamerules:\nSet the starting gold amount., return void","prefix":"SetStartingGold"},
"CDOTABaseGameMode_SetMaximumAttackSpeed":{"body":"SetMaximumAttackSpeed(${nMaxSpeed})","description":"CDOTABaseGameMode:\nSet the maximum attack speed for units., return void","prefix":"SetMaximumAttackSpeed"},
"ACT_DOTA_WHIRLING_AXES_RANGED":{"body":"ACT_DOTA_WHIRLING_AXES_RANGED","description":"","prefix":"ACT_DOTA_WHIRLING_AXES_RANGED"},
"DOTA_HEROPICK_STATE_CM_SELECT6":{"body":"DOTA_HEROPICK_STATE_CM_SELECT6","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT6"},
"CDOTA_BaseNPC_NotifyWearablesOfModelChange":{"body":"NotifyWearablesOfModelChange(${bOriginalModel})","description":"CDOTA_BaseNPC:\n, return void","prefix":"NotifyWearablesOfModelChange"},
"CDOTA_BaseNPC_NoTeamMoveTo":{"body":"NoTeamMoveTo()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"NoTeamMoveTo"},
"CDOTA_BaseNPC_MoveToPosition":{"body":"MoveToPosition(${vDest})","description":"CDOTA_BaseNPC:\nIssue a Move-To command., return void","prefix":"MoveToPosition"},
"LoadKeyValues":{"body":"LoadKeyValues(${string_1})","description":"Creates a table from the specified keyvalues text file, return table","prefix":"LoadKeyValues"},
"CDOTA_BaseNPC_CastAbilityOnPosition":{"body":"CastAbilityOnPosition(${vPosition}, ${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability on a position., return void","prefix":"CastAbilityOnPosition"},
"ACT_DOTA_RELAX_LOOP_END":{"body":"ACT_DOTA_RELAX_LOOP_END","description":"","prefix":"ACT_DOTA_RELAX_LOOP_END"},
"DOTA_GAMERULES_STATE_PRE_GAME":{"body":"DOTA_GAMERULES_STATE_PRE_GAME","description":"","prefix":"DOTA_GAMERULES_STATE_PRE_GAME"},
"CDOTABaseAbility_IsOwnersGoldEnough":{"body":"IsOwnersGoldEnough(${nIssuerPlayerID})","description":"CDOTABaseAbility:\n, return bool","prefix":"IsOwnersGoldEnough"},
"DOTA_HEROPICK_STATE_COUNT":{"body":"DOTA_HEROPICK_STATE_COUNT","description":"","prefix":"DOTA_HEROPICK_STATE_COUNT"},
"CDOTAGameManager_GetHeroIDByName":{"body":"GetHeroIDByName(${string_1})","description":"CDOTAGameManager:\nGet the hero ID given the hero name., return int","prefix":"GetHeroIDByName"},
"CDOTA_BaseNPC_RemoveModifierByNameAndCaster":{"body":"RemoveModifierByNameAndCaster(${pszScriptName}, ${hCaster})","description":"CDOTA_BaseNPC:\nRemoves a modifier that was cast by the given caster., return void","prefix":"RemoveModifierByNameAndCaster"},
"PrecacheUnitFromTableAsync":{"body":"PrecacheUnitFromTableAsync(${handle_1}, ${handle_2})","description":"Precaches a DOTA unit from a table of entity key values., return void","prefix":"PrecacheUnitFromTableAsync"},
"CDOTA_BaseNPC_IsMuted":{"body":"IsMuted()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsMuted"},
"ACT_DOTA_NIAN_PIN_LOOP":{"body":"ACT_DOTA_NIAN_PIN_LOOP","description":"","prefix":"ACT_DOTA_NIAN_PIN_LOOP"},
"CDOTABaseGameMode_GetAlwaysShowPlayerNames":{"body":"GetAlwaysShowPlayerNames()","description":"CDOTABaseGameMode:\nGet whether player names are always shown, regardless of client setting., return bool","prefix":"GetAlwaysShowPlayerNames"},
"MODIFIER_PROPERTY_MODEL_CHANGE":{"body":"MODIFIER_PROPERTY_MODEL_CHANGE","description":"Value[149]modifierfunction->GetModifierModelChange","prefix":"MODIFIER_PROPERTY_MODEL_CHANGE"},
"EmitSoundOnLocationForAllies":{"body":"EmitSoundOnLocationForAllies(${Vector_1}, ${string_2}, ${handle_3})","description":"Emit a sound on a location from a unit, only for players allied with that unit (vLocation, soundName, hCaster, return void","prefix":"EmitSoundOnLocationForAllies"},
"DOTA_MAX_TEAM":{"body":"DOTA_MAX_TEAM","description":"Value[24]DOTALimits_t->Max number of players per team.","prefix":"DOTA_MAX_TEAM"},
"DOTA_UNIT_TARGET_FLAG_MANA_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_MANA_ONLY"},
"ACT_DOTA_NIAN_INTRO_LEAP":{"body":"ACT_DOTA_NIAN_INTRO_LEAP","description":"","prefix":"ACT_DOTA_NIAN_INTRO_LEAP"},
"Msg":{"body":"Msg(${string_1})","description":"Print a message, return void","prefix":"Msg"},
"UF_FAIL_ATTACK_IMMUNE":{"body":"UF_FAIL_ATTACK_IMMUNE","description":"","prefix":"UF_FAIL_ATTACK_IMMUNE"},
"GetWorldMinY":{"body":"GetWorldMinY()","description":"Gets the world's minimum Y position., return float","prefix":"GetWorldMinY"},
"UF_FAIL_MELEE":{"body":"UF_FAIL_MELEE","description":"","prefix":"UF_FAIL_MELEE"},
"ACT_DOTA_LOADOUT":{"body":"ACT_DOTA_LOADOUT","description":"","prefix":"ACT_DOTA_LOADOUT"},
"CBaseModelEntity_SetModel":{"body":"SetModel(${pModelName})","description":"CBaseModelEntity:\n, return void","prefix":"SetModel"},
"ACT_DOTA_CAST_TORNADO":{"body":"ACT_DOTA_CAST_TORNADO","description":"","prefix":"ACT_DOTA_CAST_TORNADO"},
"DOTA_UNIT_TARGET_TEAM_ENEMY":{"body":"DOTA_UNIT_TARGET_TEAM_ENEMY","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_ENEMY"},
"CDOTA_Ability_Lua_GetCastAnimation":{"body":"GetCastAnimation()","description":"CDOTA_Ability_Lua:\nReturn casting animation of this ability., return int","prefix":"GetCastAnimation"},
"ACT_DOTA_LOADOUT_RARE":{"body":"ACT_DOTA_LOADOUT_RARE","description":"","prefix":"ACT_DOTA_LOADOUT_RARE"},
"CBaseModelEntity_GetRenderAlpha":{"body":"GetRenderAlpha()","description":"CBaseModelEntity:\nGetRenderAlpha(): Get the alpha modulation of this entity., return int","prefix":"GetRenderAlpha"},
"CDOTA_BaseNPC_Hero_GetNumAttackers":{"body":"GetNumAttackers()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetNumAttackers"},
"ACT_DOTA_ICE_VORTEX":{"body":"ACT_DOTA_ICE_VORTEX","description":"","prefix":"ACT_DOTA_ICE_VORTEX"},
"MODIFIER_PROPERTY_TEMPEST_DOUBLE":{"body":"MODIFIER_PROPERTY_TEMPEST_DOUBLE","description":"Value[163]modifierfunction->GetModifierTempestDouble","prefix":"MODIFIER_PROPERTY_TEMPEST_DOUBLE"},
"ExponentialDecay":{"body":"ExponentialDecay(${float_1}, ${float_2}, ${float_3})","description":"Smooth curve decreasing slower as it approaches zero, return float","prefix":"ExponentialDecay"},
"CDOTA_BaseNPC_GetModifierNameByIndex":{"body":"GetModifierNameByIndex(${nIndex})","description":"CDOTA_BaseNPC:\nGet a modifier name by index., return string","prefix":"GetModifierNameByIndex"},
"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"},
"CDOTA_Buff_DecrementStackCount":{"body":"DecrementStackCount()","description":"CDOTA_Buff:\nDecrease this modifier's stack count by 1., return void","prefix":"DecrementStackCount"},
"DOTA_TEAM_BADGUYS":{"body":"DOTA_TEAM_BADGUYS","description":"","prefix":"DOTA_TEAM_BADGUYS"},
"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK":{"body":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK","description":"","prefix":"ACT_DOTA_EARTHSHAKER_TOTEM_ATTACK"},
"CreateTriggerRadiusApproximate":{"body":"CreateTriggerRadiusApproximate(${Vector_1}, ${float_2})","description":"CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided, return handle","prefix":"CreateTriggerRadiusApproximate"},
"ACT_DOTA_DP_SPIRIT_SIPHON":{"body":"ACT_DOTA_DP_SPIRIT_SIPHON","description":"","prefix":"ACT_DOTA_DP_SPIRIT_SIPHON"},
"MODIFIER_ATTRIBUTE_PERMANENT":{"body":"MODIFIER_ATTRIBUTE_PERMANENT","description":"","prefix":"MODIFIER_ATTRIBUTE_PERMANENT"},
"DOTA_HEROPICK_STATE_SD_SELECT":{"body":"DOTA_HEROPICK_STATE_SD_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_SD_SELECT"},
"ACT_DOTA_CHANNEL_END_ABILITY_2":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_2","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_2"},
"ACT_DOTA_CAST_DEAFENING_BLAST":{"body":"ACT_DOTA_CAST_DEAFENING_BLAST","description":"","prefix":"ACT_DOTA_CAST_DEAFENING_BLAST"},
"ACT_DOTA_SHOPKEEPER_PET_INTERACT":{"body":"ACT_DOTA_SHOPKEEPER_PET_INTERACT","description":"","prefix":"ACT_DOTA_SHOPKEEPER_PET_INTERACT"},
"CDOTAGamerules_GetGameTime":{"body":"GetGameTime()","description":"CDOTAGamerules:\nReturns the number of seconds elapsed since map start. This time doesn't count up when the game is paused, return float","prefix":"GetGameTime"},
"DOTA_TEAM_CUSTOM_8":{"body":"DOTA_TEAM_CUSTOM_8","description":"","prefix":"DOTA_TEAM_CUSTOM_8"},
"DOTA_ModifyGold_Death":{"body":"DOTA_ModifyGold_Death","description":"","prefix":"DOTA_ModifyGold_Death"},
"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE":{"body":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE","description":"Value[164]modifierfunction->PreserveParticlesOnModelChanged","prefix":"MODIFIER_PROPERTY_PRESERVE_PARTICLES_ON_MODEL_CHANGE"},
"CDOTA_Ability_Lua_CastFilterResultLocation":{"body":"CastFilterResultLocation(${vLocation})","description":"CDOTA_Ability_Lua:\n(Vector vLocation) Determine whether an issued command on a location is valid., return int","prefix":"CastFilterResultLocation"},
"ACT_DOTA_CAST_ABILITY_ROT":{"body":"ACT_DOTA_CAST_ABILITY_ROT","description":"","prefix":"ACT_DOTA_CAST_ABILITY_ROT"},
"CDOTA_PlayerResource_GetGold":{"body":"GetGold(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetGold"},
"UTIL_ResetMessageText":{"body":"UTIL_ResetMessageText(${int_1})","description":"Clear all message text on one client., return void","prefix":"UTIL_ResetMessageText"},
"CDOTA_BaseNPC_GetModelRadius":{"body":"GetModelRadius()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetModelRadius"},
"CDOTABaseAbility_GetSpecialValueFor":{"body":"GetSpecialValueFor(${szName})","description":"CDOTABaseAbility:\nGets a value from this ability's special value block for its current level., return table","prefix":"GetSpecialValueFor"},
"CDOTA_Modifier_Lua_IsAura":{"body":"IsAura()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is an aura., return bool","prefix":"IsAura"},
"ACT_DOTA_SHARPEN_WEAPON":{"body":"ACT_DOTA_SHARPEN_WEAPON","description":"","prefix":"ACT_DOTA_SHARPEN_WEAPON"},
"CDOTA_BaseNPC_GetManaRegen":{"body":"GetManaRegen()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetManaRegen"},
"DOTA_ModifyXP_CreepKill":{"body":"DOTA_ModifyXP_CreepKill","description":"","prefix":"DOTA_ModifyXP_CreepKill"},
"CBaseEntity_Attribute_GetFloatValue":{"body":"Attribute_GetFloatValue(${pName}, ${flDefault})","description":"CBaseEntity:\nGet float value for an entity attribute., return float","prefix":"Attribute_GetFloatValue"},
"ACT_DOTA_CHANNEL_ABILITY_4":{"body":"ACT_DOTA_CHANNEL_ABILITY_4","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_4"},
"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK":{"body":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK","description":"Value[83]modifierfunction->GetModifierPhysical_ConstantBlock","prefix":"MODIFIER_PROPERTY_PHYSICAL_CONSTANT_BLOCK"},
"CDOTA_BaseNPC_Hero_SetBuybackGoldLimitTime":{"body":"SetBuybackGoldLimitTime(${flTime})","description":"CDOTA_BaseNPC_Hero:\nSet the amount of time gold gain is limited after buying back., return void","prefix":"SetBuybackGoldLimitTime"},
"DOTA_ABILITY_SPEAK_START_ACTION_PHASE":{"body":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE","description":"","prefix":"DOTA_ABILITY_SPEAK_START_ACTION_PHASE"},
"CDOTAPlayer_MakeRandomHeroSelection":{"body":"MakeRandomHeroSelection()","description":"CDOTAPlayer:\nRandoms this player's hero., return void","prefix":"MakeRandomHeroSelection"},
"CDOTA_BaseNPC_GetDeathXP":{"body":"GetDeathXP()","description":"CDOTA_BaseNPC:\nGet the XP bounty on this unit., return int","prefix":"GetDeathXP"},
"CDOTABaseAbility_OnAbilityPinged":{"body":"OnAbilityPinged(${nPlayerID})","description":"CDOTABaseAbility:\n, return void","prefix":"OnAbilityPinged"},
"CDOTATutorial_IsItemInWhiteList":{"body":"IsItemInWhiteList(${string_1})","description":"CDOTATutorial:\nIs this item currently in the white list., return bool","prefix":"IsItemInWhiteList"},
"CDOTA_BaseNPC_IsBoss":{"body":"IsBoss()","description":"CDOTA_BaseNPC:\nIs this unit a boss?, return bool","prefix":"IsBoss"},
"CDOTA_Modifier_Lua_Motion_Both_ApplyHorizontalMotionController":{"body":"ApplyHorizontalMotionController()","description":"CDOTA_Modifier_Lua_Motion_Both:\nStarts the horizontal motion controller effects for this buff.  Returns true if successful., return bool","prefix":"ApplyHorizontalMotionController"},
"RotatePosition":{"body":"RotatePosition(${Vector_1}, ${QAngle_2}, ${Vector_3})","description":"Rotate a Vector around a point., return Vector","prefix":"RotatePosition"},
"DOTA_HEROPICK_STATE_CM_SELECT8":{"body":"DOTA_HEROPICK_STATE_CM_SELECT8","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT8"},
"CDOTABaseAbility_CastAbility":{"body":"CastAbility()","description":"CDOTABaseAbility:\n, return void","prefix":"CastAbility"},
"CDOTA_BaseNPC_IsPhantom":{"body":"IsPhantom()","description":"CDOTA_BaseNPC:\nIs this a phantom unit?, return bool","prefix":"IsPhantom"},
"CDOTA_BaseNPC_GetAbilityByIndex":{"body":"GetAbilityByIndex(${iIndex})","description":"CDOTA_BaseNPC:\nRetrieve an ability by index from the unit., return handle","prefix":"GetAbilityByIndex"},
"MODIFIER_EVENT_ON_ATTACK_ALLIED":{"body":"MODIFIER_EVENT_ON_ATTACK_ALLIED","description":"Value[120]modifierfunction->OnAttackAllied","prefix":"MODIFIER_EVENT_ON_ATTACK_ALLIED"},
"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY":{"body":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY","description":"","prefix":"DOTA_DAMAGE_FLAG_USE_COMBAT_PROFICIENCY"},
"CDOTA_BaseNPC_DropItemAtPositionImmediate":{"body":"DropItemAtPositionImmediate(${hItem}, ${vPosition})","description":"CDOTA_BaseNPC:\nImmediately drop a carried item at a given position., return void","prefix":"DropItemAtPositionImmediate"},
"CDOTA_BaseNPC_GetAttackRangeBuffer":{"body":"GetAttackRangeBuffer()","description":"CDOTA_BaseNPC:\nGets the attack range buffer., return float","prefix":"GetAttackRangeBuffer"},
"CDOTA_BaseNPC_CastAbilityNoTarget":{"body":"CastAbilityNoTarget(${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nCast an ability with no target., return void","prefix":"CastAbilityNoTarget"},
"CDOTABaseAbility_PlaysDefaultAnimWhenStolen":{"body":"PlaysDefaultAnimWhenStolen()","description":"CDOTABaseAbility:\n, return bool","prefix":"PlaysDefaultAnimWhenStolen"},
"CDOTA_Item_Lua_OnOwnerDied":{"body":"OnOwnerDied()","description":"CDOTA_Item_Lua:\nCaster died., return void","prefix":"OnOwnerDied"},
"GetMaxOutputDelay":{"body":"GetMaxOutputDelay(${ehandle_1}, ${string_2})","description":"Get the longest delay for all events attached to an output, return float","prefix":"GetMaxOutputDelay"},
"CDOTA_BaseNPC_StartGesture":{"body":"StartGesture(${nActivity})","description":"CDOTA_BaseNPC:\nAdd the given gesture activity., return void","prefix":"StartGesture"},
"CDOTA_Ability_Lua_GetPlaybackRateOverride":{"body":"GetPlaybackRateOverride()","description":"CDOTA_Ability_Lua:\nReturn the animation rate of the cast animation., return float","prefix":"GetPlaybackRateOverride"},
"UpdateEventPoints":{"body":"UpdateEventPoints(${handle_1})","description":", return void","prefix":"UpdateEventPoints"},
"SetOpvarFloatPlayer":{"body":"SetOpvarFloatPlayer(${string_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5})","description":"Sets an opvar value for a single player, return void","prefix":"SetOpvarFloatPlayer"},
"CDOTA_PlayerResource_GetCustomBuybackCooldown":{"body":"GetCustomBuybackCooldown(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetCustomBuybackCooldown"},
"CDOTABaseGameMode_GetTopBarTeamValuesOverride":{"body":"GetTopBarTeamValuesOverride()","description":"CDOTABaseGameMode:\nOverride the values of the team values on the top game bar., return bool","prefix":"GetTopBarTeamValuesOverride"},
"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE","description":"Value[15]modifierfunction->GetModifierMoveSpeedBonus_Special_Boots","prefix":"MODIFIER_PROPERTY_MOVESPEED_BONUS_UNIQUE"},
"CDOTAGamerules_SetCustomGameEndDelay":{"body":"SetCustomGameEndDelay(${float_1})","description":"CDOTAGamerules:\nSets the game end delay., return void","prefix":"SetCustomGameEndDelay"},
"CDOTATutorial_RemoveShopWhitelistItem":{"body":"RemoveShopWhitelistItem(${string_1})","description":"CDOTATutorial:\nRemove an item from the shop whitelist., return void","prefix":"RemoveShopWhitelistItem"},
"CDOTA_Ability_Lua_OnProjectileThink":{"body":"OnProjectileThink(${vLocation})","description":"CDOTA_Ability_Lua:\n(Vector vLocation) Projectile is actively moving., return void","prefix":"OnProjectileThink"},
"CDOTA_BaseNPC_GetItemInSlot":{"body":"GetItemInSlot(${i})","description":"CDOTA_BaseNPC:\nReturns nth item in inventory slot (index is zero based)., return handle","prefix":"GetItemInSlot"},
"ACT_DOTA_CAST_ABILITY_3_END":{"body":"ACT_DOTA_CAST_ABILITY_3_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_3_END"},
"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING":{"body":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_VECTOR_TARGETING"},
"ACT_DOTA_CAST_ABILITY_4_END":{"body":"ACT_DOTA_CAST_ABILITY_4_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_4_END"},
"CDOTA_BaseNPC_IsFrozen":{"body":"IsFrozen()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsFrozen"},
"DOTA_HEROPICK_STATE_CD_BAN1":{"body":"DOTA_HEROPICK_STATE_CD_BAN1","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN1"},
"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL":{"body":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL","description":"Value[101]modifierfunction->GetAbsoluteNoDamageMagical","prefix":"MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL"},
"DOTA_LOADOUT_TYPE_ANNOUNCER":{"body":"DOTA_LOADOUT_TYPE_ANNOUNCER","description":"","prefix":"DOTA_LOADOUT_TYPE_ANNOUNCER"},
"ACT_DOTA_ENFEEBLE":{"body":"ACT_DOTA_ENFEEBLE","description":"","prefix":"ACT_DOTA_ENFEEBLE"},
"DOTA_INVENTORY_ALLOW_MAIN":{"body":"DOTA_INVENTORY_ALLOW_MAIN","description":"","prefix":"DOTA_INVENTORY_ALLOW_MAIN"},
"DOTA_HEROPICK_STATE_BD_SELECT":{"body":"DOTA_HEROPICK_STATE_BD_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_BD_SELECT"},
"DebugDrawLine_vCol":{"body":"DebugDrawLine_vCol(${Vector_1}, ${Vector_2}, ${Vector_3}, ${bool_4}, ${float_5})","description":"Draw a debug line using color vec (start, end, vRgb, a, ztest, duration), return void","prefix":"DebugDrawLine_vCol"},
"MODIFIER_PROPERTY_MOVESPEED_MAX":{"body":"MODIFIER_PROPERTY_MOVESPEED_MAX","description":"Value[20]modifierfunction->GetModifierMoveSpeed_Max","prefix":"MODIFIER_PROPERTY_MOVESPEED_MAX"},
"ACT_DOTA_DEATH_BY_SNIPER":{"body":"ACT_DOTA_DEATH_BY_SNIPER","description":"","prefix":"ACT_DOTA_DEATH_BY_SNIPER"},
"CEntities_FindByNameNearest":{"body":"FindByNameNearest(${string_1}, ${Vector_2}, ${float_3})","description":"CEntities:\nFind entities by name nearest to a point., return handle","prefix":"FindByNameNearest"},
"CDOTA_BaseNPC_Creature_SetManaRegenGain":{"body":"SetManaRegenGain(${flManaRegenGain})","description":"CDOTA_BaseNPC_Creature:\nSet the mana points regen gained per level on this creature., return void","prefix":"SetManaRegenGain"},
"CDOTA_BaseNPC_Hero_SetPlayerID":{"body":"SetPlayerID(${iPlayerID})","description":"CDOTA_BaseNPC_Hero:\n, return void","prefix":"SetPlayerID"},
"ACT_DOTA_CHANNEL_END_ABILITY_4":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_4","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_4"},
"ACT_DOTA_CAST_COLD_SNAP":{"body":"ACT_DOTA_CAST_COLD_SNAP","description":"","prefix":"ACT_DOTA_CAST_COLD_SNAP"},
"CDOTA_Modifier_Lua_Horizontal_Motion_OnHorizontalMotionInterrupted":{"body":"OnHorizontalMotionInterrupted()","description":"CDOTA_Modifier_Lua_Horizontal_Motion:\nCalled when the motion gets interrupted., return void","prefix":"OnHorizontalMotionInterrupted"},
"DOTA_MUSIC_STATUS_DEAD":{"body":"DOTA_MUSIC_STATUS_DEAD","description":"","prefix":"DOTA_MUSIC_STATUS_DEAD"},
"DOTA_TEAM_FIRST":{"body":"DOTA_TEAM_FIRST","description":"","prefix":"DOTA_TEAM_FIRST"},
"Convars_GetBool":{"body":"GetBool(${string_1})","description":"Convars:\nGetBool(name) : returns the convar as a boolean flag., return table","prefix":"GetBool"},
"CDOTATutorial_EnableTowerAggroViz":{"body":"EnableTowerAggroViz(${bool_1})","description":"CDOTATutorial:\nAlert the player when a tower becomes agro to their hero., return void","prefix":"EnableTowerAggroViz"},
"DOTA_HEROPICK_STATE_CM_BAN5":{"body":"DOTA_HEROPICK_STATE_CM_BAN5","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN5"},
"DoEntFireByInstanceHandle":{"body":"DoEntFireByInstanceHandle(${handle_1}, ${string_2}, ${string_3}, ${float_4}, ${handle_5}, ${handle_6})","description":"#EntFireByHandle:Generate and entity i/o event, return void","prefix":"DoEntFireByInstanceHandle"},
"MODIFIER_STATE_SPECIALLY_DENIABLE":{"body":"MODIFIER_STATE_SPECIALLY_DENIABLE","description":"","prefix":"MODIFIER_STATE_SPECIALLY_DENIABLE"},
"FindUnitsInLine":{"body":"FindUnitsInLine(${int_1}, ${Vector_2}, ${Vector_3}, ${handle_4}, ${float_5}, ${int_6}, ${int_7}, ${int_8})","description":"Find units that intersect the given line with the given flags., return table","prefix":"FindUnitsInLine"},
"ACT_DOTA_CAST_ABILITY_3":{"body":"ACT_DOTA_CAST_ABILITY_3","description":"","prefix":"ACT_DOTA_CAST_ABILITY_3"},
"DOTA_RUNE_HASTE":{"body":"DOTA_RUNE_HASTE","description":"","prefix":"DOTA_RUNE_HASTE"},
"CDOTA_Item_Think":{"body":"Think()","description":"CDOTA_Item:\nThink this item, return void","prefix":"Think"},
"CDOTA_Ability_Nian_Roar_GetCastCount":{"body":"GetCastCount()","description":"CDOTA_Ability_Nian_Roar:\nNumber of times Nian has used the roar, return int","prefix":"GetCastCount"},
"CDOTA_BaseNPC_GetCloneSource":{"body":"GetCloneSource()","description":"CDOTA_BaseNPC:\nGet clone source (Meepo Prime, if this is a Meepo), return handle","prefix":"GetCloneSource"},
"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE":{"body":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"},
"ACT_DOTA_MIDNIGHT_PULSE":{"body":"ACT_DOTA_MIDNIGHT_PULSE","description":"","prefix":"ACT_DOTA_MIDNIGHT_PULSE"},
"MODIFIER_PROPERTY_DISABLE_HEALING":{"body":"MODIFIER_PROPERTY_DISABLE_HEALING","description":"Value[108]modifierfunction->GetDisableHealing","prefix":"MODIFIER_PROPERTY_DISABLE_HEALING"},
"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING":{"body":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING","description":"Value[76]modifierfunction->GetModifierPercentageCooldownStacking","prefix":"MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING"},
"CBaseEntity_SetAbsOrigin":{"body":"SetAbsOrigin(${origin})","description":"CBaseEntity:\n, return void","prefix":"SetAbsOrigin"},
"GlobalSys_CommandLineInt":{"body":"CommandLineInt(${string_1}, ${int_2})","description":"GlobalSys:\nCommandLineInt(name) : returns the command line param as an int., return table","prefix":"CommandLineInt"},
"CDOTA_BaseNPC_GetHullRadius":{"body":"GetHullRadius()","description":"CDOTA_BaseNPC:\nGet the collision hull radius of this NPC., return float","prefix":"GetHullRadius"},
"CDOTA_BaseNPC_GetForceAttackTarget":{"body":"GetForceAttackTarget()","description":"CDOTA_BaseNPC:\n, return handle","prefix":"GetForceAttackTarget"},
"DOTA_RUNE_DOUBLEDAMAGE":{"body":"DOTA_RUNE_DOUBLEDAMAGE","description":"","prefix":"DOTA_RUNE_DOUBLEDAMAGE"},
"ACT_DOTA_NIAN_PIN_START":{"body":"ACT_DOTA_NIAN_PIN_START","description":"","prefix":"ACT_DOTA_NIAN_PIN_START"},
"DOTA_UNIT_TARGET_CUSTOM":{"body":"DOTA_UNIT_TARGET_CUSTOM","description":"","prefix":"DOTA_UNIT_TARGET_CUSTOM"},
"ACT_DOTA_PET_WARD_OBSERVER":{"body":"ACT_DOTA_PET_WARD_OBSERVER","description":"","prefix":"ACT_DOTA_PET_WARD_OBSERVER"},
"MODIFIER_EVENT_ON_BUILDING_KILLED":{"body":"MODIFIER_EVENT_ON_BUILDING_KILLED","description":"Value[146]modifierfunction->OnBuildingKilled","prefix":"MODIFIER_EVENT_ON_BUILDING_KILLED"},
"CDOTA_BaseNPC_SetNightTimeVisionRange":{"body":"SetNightTimeVisionRange(${iRange})","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return void","prefix":"SetNightTimeVisionRange"},
"ACT_DOTA_SAND_KING_BURROW_IN":{"body":"ACT_DOTA_SAND_KING_BURROW_IN","description":"","prefix":"ACT_DOTA_SAND_KING_BURROW_IN"},
"CDOTA_BaseNPC_IsMagicImmune":{"body":"IsMagicImmune()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsMagicImmune"},
"DOTA_ITEM_SLOT_4":{"body":"DOTA_ITEM_SLOT_4","description":"","prefix":"DOTA_ITEM_SLOT_4"},
"EmitGlobalSound":{"body":"EmitGlobalSound(${string_1})","description":"Play named sound for all players, return void","prefix":"EmitGlobalSound"},
"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING":{"body":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING","description":"","prefix":"DOTA_MINIMAP_EVENT_CANCEL_TELEPORTING"},
"CDOTA_Buff_SetDuration":{"body":"SetDuration(${flDuration}, ${bInformClient})","description":"CDOTA_Buff:\n(flTime, bInformClients), return void","prefix":"SetDuration"},
"DOTA_LOADOUT_TYPE_ABILITY1":{"body":"DOTA_LOADOUT_TYPE_ABILITY1","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY1"},
"GetFrostyBoostAmount":{"body":"GetFrostyBoostAmount(${int_1}, ${int_2})","description":", return float","prefix":"GetFrostyBoostAmount"},
"DOTA_RUNE_ILLUSION":{"body":"DOTA_RUNE_ILLUSION","description":"","prefix":"DOTA_RUNE_ILLUSION"},
"ACT_DOTA_GESTURE_POINT":{"body":"ACT_DOTA_GESTURE_POINT","description":"","prefix":"ACT_DOTA_GESTURE_POINT"},
"ACT_DOTA_DISABLED":{"body":"ACT_DOTA_DISABLED","description":"","prefix":"ACT_DOTA_DISABLED"},
"DebugBreak":{"body":"DebugBreak()","description":"Breaks in the debugger, return void","prefix":"DebugBreak"},
"CDOTA_BaseNPC_GetRangeToUnit":{"body":"GetRangeToUnit(${hNPC})","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetRangeToUnit"},
"DOTA_LOADOUT_TYPE_GLOVES":{"body":"DOTA_LOADOUT_TYPE_GLOVES","description":"","prefix":"DOTA_LOADOUT_TYPE_GLOVES"},
"CDOTAGamerules_LockCustomGameSetupTeamAssignment":{"body":"LockCustomGameSetupTeamAssignment(${bool_1})","description":"CDOTAGamerules:\nLock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams., return void","prefix":"LockCustomGameSetupTeamAssignment"},
"CDOTABaseAbility_GetLevel":{"body":"GetLevel()","description":"CDOTABaseAbility:\nGet the current level of the ability., return int","prefix":"GetLevel"},
"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS","description":"Value[59]modifierfunction->GetModifierExtraStrengthBonus","prefix":"MODIFIER_PROPERTY_EXTRA_STRENGTH_BONUS"},
"MODIFIER_PROPERTY_CAST_RANGE_BONUS":{"body":"MODIFIER_PROPERTY_CAST_RANGE_BONUS","description":"Value[66]modifierfunction->GetModifierCastRangeBonus","prefix":"MODIFIER_PROPERTY_CAST_RANGE_BONUS"},
"CDOTA_BaseNPC_FindModifierByNameAndCaster":{"body":"FindModifierByNameAndCaster(${pszScriptName}, ${hCaster})","description":"CDOTA_BaseNPC:\nReturn a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster ), return handle","prefix":"FindModifierByNameAndCaster"},
"CDOTA_Ability_Lua_GetManaCost":{"body":"GetManaCost(${iLevel})","description":"CDOTA_Ability_Lua:\nReturn mana cost at the given level (-1 is current)., return int","prefix":"GetManaCost"},
"CDOTAGamerules_GetMatchSignoutComplete":{"body":"GetMatchSignoutComplete()","description":"CDOTAGamerules:\nHave we received the post match signout message that includes reward information, return bool","prefix":"GetMatchSignoutComplete"},
"PrecacheResource":{"body":"PrecacheResource(${string_1}, ${string_2}, ${handle_3})","description":"Manually precache a single resource, return void","prefix":"PrecacheResource"},
"SetQuestName":{"body":"SetQuestName(${string_1})","description":"Set the current quest name., return void","prefix":"SetQuestName"},
"DOTA_DAMAGE_FLAG_HPLOSS":{"body":"DOTA_DAMAGE_FLAG_HPLOSS","description":"","prefix":"DOTA_DAMAGE_FLAG_HPLOSS"},
"DOTA_LOADOUT_TYPE_MOUNT":{"body":"DOTA_LOADOUT_TYPE_MOUNT","description":"","prefix":"DOTA_LOADOUT_TYPE_MOUNT"},
"CDotaQuest_SetTextReplaceString":{"body":"SetTextReplaceString(${pszString})","description":"CDotaQuest:\nSet the text replace string for this quest, return void","prefix":"SetTextReplaceString"},
"ACT_DOTA_CANCEL_SIREN_SONG":{"body":"ACT_DOTA_CANCEL_SIREN_SONG","description":"","prefix":"ACT_DOTA_CANCEL_SIREN_SONG"},
"CDOTAGamerules_SetPreGameTime":{"body":"SetPreGameTime(${float_1})","description":"CDOTAGamerules:\nSets the amount of time players have between picking their hero and game start., return void","prefix":"SetPreGameTime"},
"CDOTA_BaseNPC_SetModifierStackCount":{"body":"SetModifierStackCount(${pszScriptName}, ${hCaster}, ${nStackCount})","description":"CDOTA_BaseNPC:\nSets the stack count of a given modifier., return void","prefix":"SetModifierStackCount"},
"CDOTABaseGameMode_GetMaximumAttackSpeed":{"body":"GetMaximumAttackSpeed()","description":"CDOTABaseGameMode:\nGet the maximum attack speed for units., return int","prefix":"GetMaximumAttackSpeed"},
"DOTA_SPEECH_GOOD_TEAM":{"body":"DOTA_SPEECH_GOOD_TEAM","description":"","prefix":"DOTA_SPEECH_GOOD_TEAM"},
"CDOTA_MapTree_CutDownRegrowAfter":{"body":"CutDownRegrowAfter(${flRegrowAfter}, ${nTeamNumberKnownTo})","description":"CDOTA_MapTree:\nCuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team), return void","prefix":"CutDownRegrowAfter"},
"ACT_DOTA_TAUNT":{"body":"ACT_DOTA_TAUNT","description":"","prefix":"ACT_DOTA_TAUNT"},
"DOTA_ModifyGold_Buyback":{"body":"DOTA_ModifyGold_Buyback","description":"","prefix":"DOTA_ModifyGold_Buyback"},
"DOTA_STASH_SLOT_5":{"body":"DOTA_STASH_SLOT_5","description":"","prefix":"DOTA_STASH_SLOT_5"},
"CDOTA_BaseNPC_GetBaseDamageMin":{"body":"GetBaseDamageMin()","description":"CDOTA_BaseNPC:\nGet the minimum attack damage of this unit., return int","prefix":"GetBaseDamageMin"},
"UF_FAIL_INVALID_LOCATION":{"body":"UF_FAIL_INVALID_LOCATION","description":"","prefix":"UF_FAIL_INVALID_LOCATION"},
"CDOTABaseAbility_GetAutoCastState":{"body":"GetAutoCastState()","description":"CDOTABaseAbility:\n, return bool","prefix":"GetAutoCastState"},
"CDOTA_BaseNPC_Hero_GetMultipleKillCount":{"body":"GetMultipleKillCount()","description":"CDOTA_BaseNPC_Hero:\n, return int","prefix":"GetMultipleKillCount"},
"CDOTABaseAbility_GetAssociatedSecondaryAbilities":{"body":"GetAssociatedSecondaryAbilities()","description":"CDOTABaseAbility:\n, return string","prefix":"GetAssociatedSecondaryAbilities"},
"CDOTA_PlayerResource_GetCreepDamageTaken":{"body":"GetCreepDamageTaken(${iPlayerID}, ${bTotal})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetCreepDamageTaken"},
"CDOTABaseGameMode_SetRecommendedItemsDisabled":{"body":"SetRecommendedItemsDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn the panel for showing recommended items at the shop off/on., return void","prefix":"SetRecommendedItemsDisabled"},
"CDOTABaseGameMode_SetCustomBuybackCostEnabled":{"body":"SetCustomBuybackCostEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback costs., return void","prefix":"SetCustomBuybackCostEnabled"},
"CDOTABaseGameMode_GetGoldSoundDisabled":{"body":"GetGoldSoundDisabled()","description":"CDOTABaseGameMode:\nTurn the sound when gold is acquired off/on., return bool","prefix":"GetGoldSoundDisabled"},
"DoScriptAssert":{"body":"DoScriptAssert(${bool_1}, ${string_2})","description":"#ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog., return void","prefix":"DoScriptAssert"},
"CDOTABaseGameMode_GetCustomBuybackCostEnabled":{"body":"GetCustomBuybackCostEnabled()","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback costs., return bool","prefix":"GetCustomBuybackCostEnabled"},
"CreateHeroForPlayer":{"body":"CreateHeroForPlayer(${string_1}, ${handle_2})","description":"Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero, return handle","prefix":"CreateHeroForPlayer"},
"DOTA_HEROPICK_STATE_CD_BAN5":{"body":"DOTA_HEROPICK_STATE_CD_BAN5","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN5"},
"SetTeamCustomHealthbarColor":{"body":"SetTeamCustomHealthbarColor(${int_1}, ${int_2}, ${int_3}, ${int_4})","description":"( teamNumber, r, g, b ), return void","prefix":"SetTeamCustomHealthbarColor"},
"CreateUnitFromTable":{"body":"CreateUnitFromTable(${handle_1}, ${Vector_2})","description":"Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at., return handle","prefix":"CreateUnitFromTable"},
"DOTA_ModifyGold_CourierKill":{"body":"DOTA_ModifyGold_CourierKill","description":"","prefix":"DOTA_ModifyGold_CourierKill"},
"CBaseEntity_SetContextThink":{"body":"SetContextThink(${pszContextName}, ${hThinkFunc}, ${flInterval})","description":"CBaseEntity:\nSet a think function on this entity., return void","prefix":"SetContextThink"},
"CDOTA_Item_IsPurchasable":{"body":"IsPurchasable()","description":"CDOTA_Item:\n, return bool","prefix":"IsPurchasable"},
"CDOTA_BaseNPC_IsUnableToMiss":{"body":"IsUnableToMiss()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsUnableToMiss"},
"CDOTA_Ability_Lua_GetChannelledManaCostPerSecond":{"body":"GetChannelledManaCostPerSecond(${iLevel})","description":"CDOTA_Ability_Lua:\nReturn mana cost at the given level per second while channeling (-1 is current)., return int","prefix":"GetChannelledManaCostPerSecond"},
"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL":{"body":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL","description":"Value[4]modifierfunction->GetModifierProcAttack_BonusDamage_Magical","prefix":"MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_MAGICAL"},
"MODIFIER_STATE_MAGIC_IMMUNE":{"body":"MODIFIER_STATE_MAGIC_IMMUNE","description":"","prefix":"MODIFIER_STATE_MAGIC_IMMUNE"},
"CDOTAGamerules_GetDOTATime":{"body":"GetDOTATime(${bool_1}, ${bool_2})","description":"CDOTAGamerules:\n(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time., return float","prefix":"GetDOTATime"},
"DOTA_ABILITY_BEHAVIOR_HIDDEN":{"body":"DOTA_ABILITY_BEHAVIOR_HIDDEN","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_HIDDEN"},
"MODIFIER_EVENT_ON_UNIT_MOVED":{"body":"MODIFIER_EVENT_ON_UNIT_MOVED","description":"Value[123]modifierfunction->OnUnitMoved","prefix":"MODIFIER_EVENT_ON_UNIT_MOVED"},
"DOTA_HEROPICK_STATE_CD_SELECT9":{"body":"DOTA_HEROPICK_STATE_CD_SELECT9","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT9"},
"CBaseEntity_Trigger":{"body":"Trigger()","description":"CBaseEntity:\nFires off this entity's OnTrigger responses., return void","prefix":"Trigger"},
"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT":{"body":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT","description":"Value[55]modifierfunction->GetModifierConstantHealthRegen","prefix":"MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT"},
"CDOTABaseGameMode_SetCameraDistanceOverride":{"body":"SetCameraDistanceOverride(${flCameraDistanceOverride})","description":"CDOTABaseGameMode:\nSet a different camera distance; dota default is 1134., return void","prefix":"SetCameraDistanceOverride"},
"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"},
"CDOTA_BaseNPC_Hero_GetMostRecentDamageTime":{"body":"GetMostRecentDamageTime()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetMostRecentDamageTime"},
"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"},
"CBaseEntity_GetChildren":{"body":"GetChildren()","description":"CBaseEntity:\nGet the entities parented to this entity., return handle","prefix":"GetChildren"},
"DOTA_STASH_SLOT_6":{"body":"DOTA_STASH_SLOT_6","description":"","prefix":"DOTA_STASH_SLOT_6"},
"EmitSoundOnLocationWithCaster":{"body":"EmitSoundOnLocationWithCaster(${Vector_1}, ${string_2}, ${handle_3})","description":"Emit a sound on a location from a unit. (vLocation, soundName, hCaster)., return void","prefix":"EmitSoundOnLocationWithCaster"},
"CBaseTrigger_Disable":{"body":"Disable()","description":"CBaseTrigger:\nDisable's the trigger, return void","prefix":"Disable"},
"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE":{"body":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE","description":"Value[96]modifierfunction->GetBonusVisionPercentage","prefix":"MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE"},
"DOTA_ABILITY_BEHAVIOR_CHANNELLED":{"body":"DOTA_ABILITY_BEHAVIOR_CHANNELLED","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_CHANNELLED"},
"ABILITY_NOT_LEARNABLE":{"body":"ABILITY_NOT_LEARNABLE","description":"","prefix":"ABILITY_NOT_LEARNABLE"},
"UF_FAIL_ANCIENT":{"body":"UF_FAIL_ANCIENT","description":"","prefix":"UF_FAIL_ANCIENT"},
"DOTA_HEROPICK_STATE_AP_SELECT":{"body":"DOTA_HEROPICK_STATE_AP_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_AP_SELECT"},
"ResolveNPCPositions":{"body":"ResolveNPCPositions(${Vector_1}, ${float_2})","description":"Check and fix units that have been assigned a position inside collision radius of other NPCs., return void","prefix":"ResolveNPCPositions"},
"CBaseAnimating_IsSequenceFinished":{"body":"IsSequenceFinished()","description":"CBaseAnimating:\nAsk whether the main sequence is done playing., return bool","prefix":"IsSequenceFinished"},
"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP":{"body":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP","description":"","prefix":"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP"},
"DOTA_GAMERULES_STATE_STRATEGY_TIME":{"body":"DOTA_GAMERULES_STATE_STRATEGY_TIME","description":"","prefix":"DOTA_GAMERULES_STATE_STRATEGY_TIME"},
"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES":{"body":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"},
"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END":{"body":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END","description":"","prefix":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_END"},
"DOTA_HEROPICK_STATE_CD_SELECT7":{"body":"DOTA_HEROPICK_STATE_CD_SELECT7","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT7"},
"CDOTABaseGameMode_ClearModifierGainedFilter":{"body":"ClearModifierGainedFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls the modifier filter., return void","prefix":"ClearModifierGainedFilter"},
"DOTA_HEROPICK_STATE_AR_SELECT":{"body":"DOTA_HEROPICK_STATE_AR_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_AR_SELECT"},
"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE","description":"Value[56]modifierfunction->GetModifierHealthRegenPercentage","prefix":"MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE"},
"CDOTA_BaseNPC_Hero_GetHealthRegen":{"body":"GetHealthRegen()","description":"CDOTA_BaseNPC_Hero:\nHero health regen is affected by attributes., return float","prefix":"GetHealthRegen"},
"CDOTA_PlayerResource_AddAegisPickup":{"body":"AddAegisPickup(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"AddAegisPickup"},
"DOTA_HEROPICK_STATE_CD_SELECT2":{"body":"DOTA_HEROPICK_STATE_CD_SELECT2","description":"","prefix":"DOTA_HEROPICK_STATE_CD_SELECT2"},
"ACT_DOTA_TROT":{"body":"ACT_DOTA_TROT","description":"","prefix":"ACT_DOTA_TROT"},
"MODIFIER_EVENT_ON_ATTACK_FINISHED":{"body":"MODIFIER_EVENT_ON_ATTACK_FINISHED","description":"Value[165]modifierfunction->OnAttackFinished","prefix":"MODIFIER_EVENT_ON_ATTACK_FINISHED"},
"CDOTA_Item_Lua_GetBehavior":{"body":"GetBehavior()","description":"CDOTA_Item_Lua:\nReturn cast behavior type of this ability., return int","prefix":"GetBehavior"},
"CDOTA_BaseNPC_Hero_GetTimeUntilRespawn":{"body":"GetTimeUntilRespawn()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetTimeUntilRespawn"},
"CDOTA_BaseNPC_Hero_IncrementStreak":{"body":"IncrementStreak()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return void","prefix":"IncrementStreak"},
"CBaseEntity_StopSound":{"body":"StopSound(${soundname})","description":"CBaseEntity:\nStops a named sound playing from this entity., return void","prefix":"StopSound"},
"PATTACH_POINT":{"body":"PATTACH_POINT","description":"","prefix":"PATTACH_POINT"},
"CDOTA_Buff_GetParent":{"body":"GetParent()","description":"CDOTA_Buff:\nGet the unit the modifier is parented to., return handle","prefix":"GetParent"},
"DOTA_RUNE_INVISIBILITY":{"body":"DOTA_RUNE_INVISIBILITY","description":"","prefix":"DOTA_RUNE_INVISIBILITY"},
"DOTA_UNIT_TARGET_FLAG_NO_INVIS":{"body":"DOTA_UNIT_TARGET_FLAG_NO_INVIS","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NO_INVIS"},
"AxisAngleToQuaternion":{"body":"AxisAngleToQuaternion(${Vector_1}, ${float_2})","description":"(vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis, return Quaternion","prefix":"AxisAngleToQuaternion"},
"DOTA_HEROPICK_STATE_CD_CAPTAINPICK":{"body":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK","description":"","prefix":"DOTA_HEROPICK_STATE_CD_CAPTAINPICK"},
"CDebugOverlayScriptHelper_Line":{"body":"Line(${Vector_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${bool_7}, ${float_8})","description":"CDebugOverlayScriptHelper:\nDraws a line between two points, return void","prefix":"Line"},
"CDOTA_BaseNPC_IsCommandRestricted":{"body":"IsCommandRestricted()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsCommandRestricted"},
"DOTA_HEROPICK_STATE_CM_SELECT5":{"body":"DOTA_HEROPICK_STATE_CM_SELECT5","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT5"},
"CBaseEntity_GetSoundDuration":{"body":"GetSoundDuration(${soundname}, ${actormodel})","description":"CBaseEntity:\nReturns float duration of the sound. Takes soundname and optional actormodelname., return float","prefix":"GetSoundDuration"},
"SendToServerConsole":{"body":"SendToServerConsole(${string_1})","description":"Send a string to the console as a server command, return void","prefix":"SendToServerConsole"},
"MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE":{"body":"MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE","description":"Value[53]modifierfunction->GetModifierPercentageManaRegen","prefix":"MODIFIER_PROPERTY_MANA_REGEN_PERCENTAGE"},
"DOTA_HEROPICK_STATE_CM_BAN7":{"body":"DOTA_HEROPICK_STATE_CM_BAN7","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN7"},
"ACT_DOTA_ANCESTRAL_SPIRIT":{"body":"ACT_DOTA_ANCESTRAL_SPIRIT","description":"","prefix":"ACT_DOTA_ANCESTRAL_SPIRIT"},
"CDOTABaseAbility_IsToggle":{"body":"IsToggle()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsToggle"},
"ACT_DOTA_LASSO_LOOP":{"body":"ACT_DOTA_LASSO_LOOP","description":"","prefix":"ACT_DOTA_LASSO_LOOP"},
"DOTA_UNIT_TARGET_FLAG_NONE":{"body":"DOTA_UNIT_TARGET_FLAG_NONE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NONE"},
"CDOTA_BaseNPC_GiveMana":{"body":"GiveMana(${flMana})","description":"CDOTA_BaseNPC:\nGive mana to this unit, this can be used for mana gained by abilities or item usage., return void","prefix":"GiveMana"},
"DOTA_HEROPICK_STATE_CM_SELECT1":{"body":"DOTA_HEROPICK_STATE_CM_SELECT1","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT1"},
"ACT_DOTA_CAST_ABILITY_5":{"body":"ACT_DOTA_CAST_ABILITY_5","description":"","prefix":"ACT_DOTA_CAST_ABILITY_5"},
"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER":{"body":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER","description":"","prefix":"DOTA_LOADOUT_TYPE_MULTIKILL_BANNER"},
"DOTA_HEROPICK_STATE_CM_SELECT10":{"body":"DOTA_HEROPICK_STATE_CM_SELECT10","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT10"},
"DOTA_HEROPICK_STATE_CM_SELECT2":{"body":"DOTA_HEROPICK_STATE_CM_SELECT2","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT2"},
"ACT_DOTA_UNDYING_SOUL_RIP":{"body":"ACT_DOTA_UNDYING_SOUL_RIP","description":"","prefix":"ACT_DOTA_UNDYING_SOUL_RIP"},
"CDOTABaseGameMode_IsDaynightCycleDisabled":{"body":"IsDaynightCycleDisabled()","description":"CDOTABaseGameMode:\nIs the day/night cycle disabled?, return bool","prefix":"IsDaynightCycleDisabled"},
"CDOTABaseGameMode_GetAnnouncerDisabled":{"body":"GetAnnouncerDisabled()","description":"CDOTABaseGameMode:\nAre in-game announcers disabled?, return bool","prefix":"GetAnnouncerDisabled"},
"CDOTA_Modifier_Lua_IsPurgeException":{"body":"IsPurgeException()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier can be purged by strong dispels., return bool","prefix":"IsPurgeException"},
"DOTA_HEROPICK_STATE_RD_SELECT":{"body":"DOTA_HEROPICK_STATE_RD_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_RD_SELECT"},
"RollPercentage":{"body":"RollPercentage(${int_1})","description":"(int nPct), return bool","prefix":"RollPercentage"},
"DOTA_ABILITY_SPEAK_CAST":{"body":"DOTA_ABILITY_SPEAK_CAST","description":"","prefix":"DOTA_ABILITY_SPEAK_CAST"},
"CDOTA_BaseNPC_Hero_ShouldDoFlyHeightVisual":{"body":"ShouldDoFlyHeightVisual()","description":"CDOTA_BaseNPC_Hero:\n, return bool","prefix":"ShouldDoFlyHeightVisual"},
"ACT_DOTA_POOF_END":{"body":"ACT_DOTA_POOF_END","description":"","prefix":"ACT_DOTA_POOF_END"},
"CBaseEntity_GetTeamNumber":{"body":"GetTeamNumber()","description":"CBaseEntity:\nGet the team number of this entity., return int","prefix":"GetTeamNumber"},
"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY":{"body":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_RANGED_ONLY"},
"CDOTA_BaseNPC_Hero_GetPhysicalArmorValue":{"body":"GetPhysicalArmorValue()","description":"CDOTA_BaseNPC_Hero:\nHero armor is affected by attributes., return float","prefix":"GetPhysicalArmorValue"},
"MODIFIER_STATE_NO_TEAM_MOVE_TO":{"body":"MODIFIER_STATE_NO_TEAM_MOVE_TO","description":"","prefix":"MODIFIER_STATE_NO_TEAM_MOVE_TO"},
"CDotaSubquestBase_CompleteSubquest":{"body":"CompleteSubquest()","description":"CDotaSubquestBase:\nMark this subquest complete, return void","prefix":"CompleteSubquest"},
"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT":{"body":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT","description":"","prefix":"DOTA_HERO_PICK_STATE_ABILITY_DRAFT_SELECT"},
"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER":{"body":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER","description":"Value[112]modifierfunction->GetModifierBountyCreepMultiplier","prefix":"MODIFIER_PROPERTY_BOUNTY_CREEP_MULTIPLIER"},
"FireEntityIOInputNameOnly":{"body":"FireEntityIOInputNameOnly(${ehandle_1}, ${string_2})","description":"Fire Entity's Action Input w/no data, return void","prefix":"FireEntityIOInputNameOnly"},
"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD":{"body":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD","description":"","prefix":"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD"},
"CDOTA_BaseNPC_IsAttackImmune":{"body":"IsAttackImmune()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsAttackImmune"},
"DOTA_LOADOUT_TYPE_ABILITY3":{"body":"DOTA_LOADOUT_TYPE_ABILITY3","description":"","prefix":"DOTA_LOADOUT_TYPE_ABILITY3"},
"CDOTA_BaseNPC_GetStatsBasedManaRegen":{"body":"GetStatsBasedManaRegen()","description":"CDOTA_BaseNPC:\nReturns mana regen rate per intelligence., return float","prefix":"GetStatsBasedManaRegen"},
"FindClearSpaceForUnit":{"body":"FindClearSpaceForUnit(${handle_1}, ${Vector_2}, ${bool_3})","description":"Place a unit somewhere not already occupied., return bool","prefix":"FindClearSpaceForUnit"},
"CBaseEntity_Attribute_GetIntValue":{"body":"Attribute_GetIntValue(${pName}, ${nDefault})","description":"CBaseEntity:\nGet int value for an entity attribute., return float","prefix":"Attribute_GetIntValue"},
"CBaseEntity_Attribute_SetFloatValue":{"body":"Attribute_SetFloatValue(${pName}, ${flValue})","description":"CBaseEntity:\nSet float value for an entity attribute., return void","prefix":"Attribute_SetFloatValue"},
"MODIFIER_EVENT_ON_HERO_KILLED":{"body":"MODIFIER_EVENT_ON_HERO_KILLED","description":"Value[144]modifierfunction->OnHeroKilled","prefix":"MODIFIER_EVENT_ON_HERO_KILLED"},
"CBaseEntity_GetVelocity":{"body":"GetVelocity()","description":"CBaseEntity:\n, return Vector","prefix":"GetVelocity"},
"DOTA_HEROPICK_STATE_CM_SELECT3":{"body":"DOTA_HEROPICK_STATE_CM_SELECT3","description":"","prefix":"DOTA_HEROPICK_STATE_CM_SELECT3"},
"CBaseEntity_EyeAngles":{"body":"EyeAngles()","description":"CBaseEntity:\nGet the qangles that this entity is looking at., return QAngle","prefix":"EyeAngles"},
"CDOTABaseAbility_GetAbilityDamage":{"body":"GetAbilityDamage()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityDamage"},
"CDOTABaseAbility_EndCooldown":{"body":"EndCooldown()","description":"CDOTABaseAbility:\nClear the cooldown remaining on this ability., return void","prefix":"EndCooldown"},
"CBaseAnimating_SetModelScale":{"body":"SetModelScale(${flScale})","description":"CBaseAnimating:\nSet scale of entity's model., return void","prefix":"SetModelScale"},
"CBaseEntity_GetAnglesAsVector":{"body":"GetAnglesAsVector()","description":"CBaseEntity:\nGet entity pitch, yaw, roll as a vector., return Vector","prefix":"GetAnglesAsVector"},
"CDOTABaseAbility_DecrementModifierRefCount":{"body":"DecrementModifierRefCount()","description":"CDOTABaseAbility:\n, return void","prefix":"DecrementModifierRefCount"},
"DOTA_UNIT_TARGET_OTHER":{"body":"DOTA_UNIT_TARGET_OTHER","description":"","prefix":"DOTA_UNIT_TARGET_OTHER"},
"MODIFIER_PROPERTY_FIXED_DAY_VISION":{"body":"MODIFIER_PROPERTY_FIXED_DAY_VISION","description":"Value[97]modifierfunction->GetFixedDayVision","prefix":"MODIFIER_PROPERTY_FIXED_DAY_VISION"},
"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE","description":"Value[68]modifierfunction->GetModifierAttackRangeBonusUnique","prefix":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS_UNIQUE"},
"CBaseEntity_GetAngularVelocity":{"body":"GetAngularVelocity()","description":"CBaseEntity:\nGet the local angular velocity - returns a vector of pitch,yaw,roll, return Vector","prefix":"GetAngularVelocity"},
"IsMarkedForDeletion":{"body":"IsMarkedForDeletion(${handle_1})","description":"Returns true if the entity is valid and marked for deletion., return bool","prefix":"IsMarkedForDeletion"},
"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP":{"body":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP","description":"Value[157]modifierfunction->GetForceDrawOnMinimap","prefix":"MODIFIER_PROPERTY_FORCE_DRAW_MINIMAP"},
"CDOTABaseAbility_CanAbilityBeUpgraded":{"body":"CanAbilityBeUpgraded()","description":"CDOTABaseAbility:\n, return <unknown>","prefix":"CanAbilityBeUpgraded"},
"CBaseEntity_GetCenter":{"body":"GetCenter()","description":"CBaseEntity:\nGet vector to center of object - absolute coords, return Vector","prefix":"GetCenter"},
"DAMAGE_TYPE_NONE":{"body":"DAMAGE_TYPE_NONE","description":"","prefix":"DAMAGE_TYPE_NONE"},
"CCustomNetTableManager_GetTableValue":{"body":"GetTableValue(${string_1}, ${string_2})","description":"CCustomNetTableManager:\n( string TableName, string KeyName ), return handle","prefix":"GetTableValue"},
"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES":{"body":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"},
"UnloadSpawnGroupByHandle":{"body":"UnloadSpawnGroupByHandle(${int_1})","description":"Unload a spawn group by handle, return void","prefix":"UnloadSpawnGroupByHandle"},
"CDOTABaseAbility_SetRefCountsModifiers":{"body":"SetRefCountsModifiers(${bRefCounts})","description":"CDOTABaseAbility:\n, return void","prefix":"SetRefCountsModifiers"},
"CBaseEntity_GetHealth":{"body":"GetHealth()","description":"CBaseEntity:\nGet the health of this entity., return int","prefix":"GetHealth"},
"CBaseEntity_GetLocalAngularVelocity":{"body":"GetLocalAngularVelocity()","description":"CBaseEntity:\nMaybe local angvel, return QAngle","prefix":"GetLocalAngularVelocity"},
"CBaseAnimating_SetBodygroupByName":{"body":"SetBodygroupByName(${pName}, ${iValue})","description":"CBaseAnimating:\nSets a bodygroup by name., return void","prefix":"SetBodygroupByName"},
"CDOTA_BaseNPC_SetCursorCastTarget":{"body":"SetCursorCastTarget(${hEntity})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetCursorCastTarget"},
"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START":{"body":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START","description":"","prefix":"ACT_DOTA_ALCHEMIST_CHEMICAL_RAGE_START"},
"UF_SUCCESS":{"body":"UF_SUCCESS","description":"","prefix":"UF_SUCCESS"},
"CBaseEntity_GetModelName":{"body":"GetModelName()","description":"CBaseEntity:\nReturns the name of the model., return string","prefix":"GetModelName"},
"CBaseEntity_GetForwardVector":{"body":"GetForwardVector()","description":"CBaseEntity:\nGet the forward vector of the entity., return Vector","prefix":"GetForwardVector"},
"MODIFIER_PROPERTY_IGNORE_COOLDOWN":{"body":"MODIFIER_PROPERTY_IGNORE_COOLDOWN","description":"Value[166]modifierfunction->GetModifierIgnoreCooldown","prefix":"MODIFIER_PROPERTY_IGNORE_COOLDOWN"},
"PATTACH_ABSORIGIN":{"body":"PATTACH_ABSORIGIN","description":"","prefix":"PATTACH_ABSORIGIN"},
"CBasePlayer_GetHMDAnchor":{"body":"GetHMDAnchor()","description":"CBasePlayer:\nReturns the HMD anchor entity for this player if it exists., return handle","prefix":"GetHMDAnchor"},
"ACT_DOTA_CAST_BURROW_END":{"body":"ACT_DOTA_CAST_BURROW_END","description":"","prefix":"ACT_DOTA_CAST_BURROW_END"},
"CDOTA_Item_IsDroppable":{"body":"IsDroppable()","description":"CDOTA_Item:\n, return bool","prefix":"IsDroppable"},
"ReloadMOTD":{"body":"ReloadMOTD()","description":"Reloads the MotD file, return void","prefix":"ReloadMOTD"},
"CBaseModelEntity_SetLightGroup":{"body":"SetLightGroup(${pLightGroup})","description":"CBaseModelEntity:\nSetLightGroup( string ): Sets the light group of the entity., return void","prefix":"SetLightGroup"},
"DOTA_ABILITY_BEHAVIOR_ITEM":{"body":"DOTA_ABILITY_BEHAVIOR_ITEM","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_ITEM"},
"ACT_DOTA_CHANNEL_END_ABILITY_5":{"body":"ACT_DOTA_CHANNEL_END_ABILITY_5","description":"","prefix":"ACT_DOTA_CHANNEL_END_ABILITY_5"},
"TraceCollideable":{"body":"TraceCollideable(${handle_1})","description":"Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal, return bool","prefix":"TraceCollideable"},
"IsInToolsMode":{"body":"IsInToolsMode()","description":"Returns true if this is lua running within tools mode., return bool","prefix":"IsInToolsMode"},
"CDOTA_BaseNPC_CastAbilityToggle":{"body":"CastAbilityToggle(${hAbility}, ${iPlayerIndex})","description":"CDOTA_BaseNPC:\nToggle an ability., return void","prefix":"CastAbilityToggle"},
"DOTA_ABILITY_BEHAVIOR_ATTACK":{"body":"DOTA_ABILITY_BEHAVIOR_ATTACK","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_ATTACK"},
"CBaseEntity_SetVelocity":{"body":"SetVelocity(${vecVelocity})","description":"CBaseEntity:\n, return void","prefix":"SetVelocity"},
"RotateQuaternionByAxisAngle":{"body":"RotateQuaternionByAxisAngle(${Quaternion_1}, ${Vector_2}, ${float_3})","description":"(quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis, return Quaternion","prefix":"RotateQuaternionByAxisAngle"},
"DOTA_ModifyGold_CreepKill":{"body":"DOTA_ModifyGold_CreepKill","description":"","prefix":"DOTA_ModifyGold_CreepKill"},
"ACT_DOTA_FRUSTRATION":{"body":"ACT_DOTA_FRUSTRATION","description":"","prefix":"ACT_DOTA_FRUSTRATION"},
"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE":{"body":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE","description":"","prefix":"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"},
"CBaseEntity_RemoveEffects":{"body":"RemoveEffects(${nFlags})","description":"CBaseEntity:\nRemoveEffects( int ): Removes the render effect flag., return void","prefix":"RemoveEffects"},
"DebugDrawBox":{"body":"DebugDrawBox(${Vector_1}, ${Vector_2}, ${Vector_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${float_8})","description":"Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration ), return void","prefix":"DebugDrawBox"},
"CDOTABaseAbility_GetCastPoint":{"body":"GetCastPoint()","description":"CDOTABaseAbility:\n, return float","prefix":"GetCastPoint"},
"AddFOWViewer":{"body":"AddFOWViewer(${int_1}, ${Vector_2}, ${float_3}, ${float_4}, ${bool_5})","description":"Add temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision), return void","prefix":"AddFOWViewer"},
"CBaseEntity_SetHealth":{"body":"SetHealth(${nHealth})","description":"CBaseEntity:\nSet the health of this entity., return void","prefix":"SetHealth"},
"CDOTA_BaseNPC_GetPaddedCollisionRadius":{"body":"GetPaddedCollisionRadius()","description":"CDOTA_BaseNPC:\nGet the collision hull radius (including padding) of this NPC., return float","prefix":"GetPaddedCollisionRadius"},
"CDOTABaseAbility_GetBehavior":{"body":"GetBehavior()","description":"CDOTABaseAbility:\n, return int","prefix":"GetBehavior"},
"CBaseFlex_GetSceneByIndex":{"body":"GetSceneByIndex(${index})","description":"CBaseFlex:\nReturns the instance of the scene entity at the specified index., return handle","prefix":"GetSceneByIndex"},
"DOTA_STASH_SLOT_3":{"body":"DOTA_STASH_SLOT_3","description":"","prefix":"DOTA_STASH_SLOT_3"},
"CBaseModelEntity_SetRenderAlpha":{"body":"SetRenderAlpha(${nAlpha})","description":"CBaseModelEntity:\nSetRenderAlpha( int ): Set the alpha modulation of this entity., return void","prefix":"SetRenderAlpha"},
"CBaseEntity_GetAngles":{"body":"GetAngles()","description":"CBaseEntity:\n, return QAngle","prefix":"GetAngles"},
"CreateHTTPRequest":{"body":"CreateHTTPRequest(${string_1}, ${string_2})","description":"Create an HTTP request., return handle","prefix":"CreateHTTPRequest"},
"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE":{"body":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE","description":"Value[160]modifierfunction->GetModifierChangeAbilityValue","prefix":"MODIFIER_PROPERTY_CHANGE_ABILITY_VALUE"},
"DOTA_LOADOUT_TYPE_ARMOR":{"body":"DOTA_LOADOUT_TYPE_ARMOR","description":"","prefix":"DOTA_LOADOUT_TYPE_ARMOR"},
"CDOTABaseAbility_SetChanneling":{"body":"SetChanneling(${bChanneling})","description":"CDOTABaseAbility:\n, return void","prefix":"SetChanneling"},
"CBasePlayer_GetUserID":{"body":"GetUserID()","description":"CBasePlayer:\nReturns the player's user id., return int","prefix":"GetUserID"},
"CBasePlayer_IsUsePressed":{"body":"IsUsePressed()","description":"CBasePlayer:\nReturns true if the use key is pressed., return bool","prefix":"IsUsePressed"},
"CBasePlayer_Quit":{"body":"Quit()","description":"CBasePlayer:\nQuit the game from script., return void","prefix":"Quit"},
"CDOTA_BaseNPC_HasScepter":{"body":"HasScepter()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasScepter"},
"CBodyComponent_LookupSequence":{"body":"LookupSequence(${string_1})","description":"CBodyComponent:\nReturns a sequence id given a name\n, return <unknown>","prefix":"LookupSequence"},
"CDOTA_BaseNPC_Creature_SetBountyGain":{"body":"SetBountyGain(${nBountyGain})","description":"CDOTA_BaseNPC_Creature:\nSet the bounty gold gained per level on this creature., return void","prefix":"SetBountyGain"},
"ShowGenericPopupToPlayer":{"body":"ShowGenericPopupToPlayer(${handle_1}, ${string_2}, ${string_3}, ${string_4}, ${string_5}, ${int_6})","description":"Show a generic popup dialog to a specific player., return void","prefix":"ShowGenericPopupToPlayer"},
"CBodyComponent_SetAnimation":{"body":"SetAnimation(${string_1})","description":"CBodyComponent:\nPass string for the animation to play on this model, return void","prefix":"SetAnimation"},
"CBaseEntity_GetOwnerEntity":{"body":"GetOwnerEntity()","description":"CBaseEntity:\nGet the owner entity, if there is one, return handle","prefix":"GetOwnerEntity"},
"CBodyComponent_SetVelocity":{"body":"SetVelocity(${Vector_1})","description":"CBodyComponent:\n, return void","prefix":"SetVelocity"},
"ACT_WAVEFORM_START":{"body":"ACT_WAVEFORM_START","description":"","prefix":"ACT_WAVEFORM_START"},
"CDOTATutorial_ForceGameStart":{"body":"ForceGameStart()","description":"CDOTATutorial:\nForce the start of the game., return void","prefix":"ForceGameStart"},
"CCustomNetTableManager_SetTableValue":{"body":"SetTableValue(${string_1}, ${string_2}, ${handle_3})","description":"CCustomNetTableManager:\n( string TableName, string KeyName, script_table Value ), return bool","prefix":"SetTableValue"},
"CDOTAGamerules_SetHeroRespawnEnabled":{"body":"SetHeroRespawnEnabled(${bool_1})","description":"CDOTAGamerules:\nControl if the normal DOTA hero respawn rules apply., return void","prefix":"SetHeroRespawnEnabled"},
"DOTA_UNIT_TARGET_TEAM_NONE":{"body":"DOTA_UNIT_TARGET_TEAM_NONE","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_NONE"},
"MODIFIER_EVENT_ON_RESPAWN":{"body":"MODIFIER_EVENT_ON_RESPAWN","description":"Value[136]modifierfunction->OnRespawn","prefix":"MODIFIER_EVENT_ON_RESPAWN"},
"DAMAGE_TYPE_ALL":{"body":"DAMAGE_TYPE_ALL","description":"","prefix":"DAMAGE_TYPE_ALL"},
"CDOTABaseGameMode_GetTopBarTeamValuesVisible":{"body":"GetTopBarTeamValuesVisible()","description":"CDOTABaseGameMode:\nTurning on/off the team values on the top game bar., return bool","prefix":"GetTopBarTeamValuesVisible"},
"CBaseModelEntity_SetRenderMode":{"body":"SetRenderMode(${nMode})","description":"CBaseModelEntity:\nSetRenderMode( int ): Sets the render mode of the entity., return void","prefix":"SetRenderMode"},
"CDOTABaseAbility_GetAbilityTargetFlags":{"body":"GetAbilityTargetFlags()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityTargetFlags"},
"CDOTA_BaseNPC_RemoveVerticalMotionController":{"body":"RemoveVerticalMotionController(${hBuff})","description":"CDOTA_BaseNPC:\n, return void","prefix":"RemoveVerticalMotionController"},
"StartSoundEventReliable":{"body":"StartSoundEventReliable(${string_1}, ${handle_2})","description":"Start a sound event with reliable delivery, return void","prefix":"StartSoundEventReliable"},
"CDOTABaseAbility_GetAbilityName":{"body":"GetAbilityName()","description":"CDOTABaseAbility:\nReturns the name of this ability., return string","prefix":"GetAbilityName"},
"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS","description":"Value[47]modifierfunction->GetModifierMagicalResistanceBonus","prefix":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS"},
"CDOTABaseAbility_GetAbilityTargetType":{"body":"GetAbilityTargetType()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityTargetType"},
"StopListeningToAllGameEvents":{"body":"StopListeningToAllGameEvents(${handle_1})","description":"Stop listening to all game events within a specific context., return void","prefix":"StopListeningToAllGameEvents"},
"CDOTA_Item_GetCost":{"body":"GetCost()","description":"CDOTA_Item:\n, return int","prefix":"GetCost"},
"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK":{"body":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK","description":"Value[109]modifierfunction->GetAlwaysAllowAttack","prefix":"MODIFIER_PROPERTY_ALWAYS_ALLOW_ATTACK"},
"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL":{"body":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_DONT_CANCEL_CHANNEL"},
"CDOTABaseAbility_GetCastRange":{"body":"GetCastRange(${vLocation}, ${hTarget})","description":"CDOTABaseAbility:\nGets the cast range of the ability., return int","prefix":"GetCastRange"},
"CDOTA_BaseNPC_GetUnitName":{"body":"GetUnitName()","description":"CDOTA_BaseNPC:\nGet the name of this unit., return string","prefix":"GetUnitName"},
"CDOTA_Item_Lua_OnSpellStart":{"body":"OnSpellStart()","description":"CDOTA_Item_Lua:\nCast time finished, spell effects begin., return void","prefix":"OnSpellStart"},
"CDOTABaseAbility_GetCursorTargetingNothing":{"body":"GetCursorTargetingNothing()","description":"CDOTABaseAbility:\n, return bool","prefix":"GetCursorTargetingNothing"},
"CBodyComponent_IsAttachedToParent":{"body":"IsAttachedToParent()","description":"CBodyComponent:\nIs attached to parent, return bool","prefix":"IsAttachedToParent"},
"CDOTATutorial_FinishTutorial":{"body":"FinishTutorial()","description":"CDOTATutorial:\nEnd the tutorial., return void","prefix":"FinishTutorial"},
"CDOTABaseAbility_GetGoldCost":{"body":"GetGoldCost(${iLevel})","description":"CDOTABaseAbility:\n, return int","prefix":"GetGoldCost"},
"CBaseAnimating_ScriptLookupAttachment":{"body":"ScriptLookupAttachment(${pAttachmentName})","description":"CBaseAnimating:\nGet the named attachement id., return int","prefix":"ScriptLookupAttachment"},
"CDOTA_BaseNPC_IsHero":{"body":"IsHero()","description":"CDOTA_BaseNPC:\nIs this a hero or hero illusion?, return bool","prefix":"IsHero"},
"CDOTABaseAbility_GetManaCost":{"body":"GetManaCost(${iLevel})","description":"CDOTABaseAbility:\n, return int","prefix":"GetManaCost"},
"CDOTABaseAbility_GetPlaybackRateOverride":{"body":"GetPlaybackRateOverride()","description":"CDOTABaseAbility:\n, return float","prefix":"GetPlaybackRateOverride"},
"Warning":{"body":"Warning(${string_1})","description":"Print a warning, return void","prefix":"Warning"},
"CDOTA_BaseNPC_IsMovementImpaired":{"body":"IsMovementImpaired()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsMovementImpaired"},
"GetFrameCount":{"body":"GetFrameCount()","description":"Returns the engines current frame count, return int","prefix":"GetFrameCount"},
"DOTA_HUD_VISIBILITY_COUNT":{"body":"DOTA_HUD_VISIBILITY_COUNT","description":"","prefix":"DOTA_HUD_VISIBILITY_COUNT"},
"CScriptParticleManager_DestroyParticle":{"body":"DestroyParticle(${int_1}, ${bool_2})","description":"CScriptParticleManager:\n(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps., return void","prefix":"DestroyParticle"},
"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH":{"body":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH","description":"Value[111]modifierfunction->GetModifierUnitStatsNeedsRefresh","prefix":"MODIFIER_PROPERTY_UNIT_STATS_NEEDS_REFRESH"},
"CBaseEntity_EmitSoundParams":{"body":"EmitSoundParams(${soundname}, ${nPitch}, ${flVolume}, ${flDelay})","description":"CBaseEntity:\nPlays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0., return void","prefix":"EmitSoundParams"},
"CDOTABaseAbility_IsItem":{"body":"IsItem()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsItem"},
"ACT_DOTA_CAST_GHOST_SHIP":{"body":"ACT_DOTA_CAST_GHOST_SHIP","description":"","prefix":"ACT_DOTA_CAST_GHOST_SHIP"},
"CDOTA_BaseNPC_SetOrigin":{"body":"SetOrigin(${vLocation})","description":"CDOTA_BaseNPC:\nSet the unit's origin., return void","prefix":"SetOrigin"},
"ACT_DOTA_CHANNEL_ABILITY_6":{"body":"ACT_DOTA_CHANNEL_ABILITY_6","description":"","prefix":"ACT_DOTA_CHANNEL_ABILITY_6"},
"DoIncludeScript":{"body":"DoIncludeScript(${string_1}, ${handle_2})","description":"Execute a script (internal), return bool","prefix":"DoIncludeScript"},
"DOTA_UNIT_TARGET_HERO":{"body":"DOTA_UNIT_TARGET_HERO","description":"","prefix":"DOTA_UNIT_TARGET_HERO"},
"CDOTA_BaseNPC_Purge":{"body":"Purge(${bRemovePositiveBuffs}, ${bRemoveDebuffs}, ${bFrameOnly}, ${bRemoveStuns}, ${bRemoveExceptions})","description":"CDOTA_BaseNPC:\n(bool RemovePositiveBuffs, bool RemoveDebuffs, bool BuffsCreatedThisFrameOnly, bool RemoveStuns, bool RemoveExceptions, return void","prefix":"Purge"},
"CDOTABaseAbility_OnAbilityPhaseInterrupted":{"body":"OnAbilityPhaseInterrupted()","description":"CDOTABaseAbility:\n, return void","prefix":"OnAbilityPhaseInterrupted"},
"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND":{"body":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND","description":"","prefix":"DOTA_INVENTORY_ALLOW_DROP_ON_GROUND"},
"DOTA_INVENTORY_ALL_ACCESS":{"body":"DOTA_INVENTORY_ALL_ACCESS","description":"","prefix":"DOTA_INVENTORY_ALL_ACCESS"},
"CDOTABaseAbility_OnChannelFinish":{"body":"OnChannelFinish(${bInterrupted})","description":"CDOTABaseAbility:\n, return void","prefix":"OnChannelFinish"},
"CDOTABaseAbility_OnChannelThink":{"body":"OnChannelThink(${flInterval})","description":"CDOTABaseAbility:\n, return void","prefix":"OnChannelThink"},
"DOTA_MUSIC_STATUS_NONE":{"body":"DOTA_MUSIC_STATUS_NONE","description":"","prefix":"DOTA_MUSIC_STATUS_NONE"},
"CDOTA_BaseNPC_RemoveHorizontalMotionController":{"body":"RemoveHorizontalMotionController(${hBuff})","description":"CDOTA_BaseNPC:\n, return void","prefix":"RemoveHorizontalMotionController"},
"CDOTABaseAbility_OnOwnerDied":{"body":"OnOwnerDied()","description":"CDOTABaseAbility:\n, return void","prefix":"OnOwnerDied"},
"ACT_DOTA_UNDYING_TOMBSTONE":{"body":"ACT_DOTA_UNDYING_TOMBSTONE","description":"","prefix":"ACT_DOTA_UNDYING_TOMBSTONE"},
"DOTA_UNIT_CAP_RANGED_ATTACK":{"body":"DOTA_UNIT_CAP_RANGED_ATTACK","description":"","prefix":"DOTA_UNIT_CAP_RANGED_ATTACK"},
"CDOTABaseAbility_OnUpgrade":{"body":"OnUpgrade()","description":"CDOTABaseAbility:\n, return void","prefix":"OnUpgrade"},
"CDOTABaseAbility_PayGoldCost":{"body":"PayGoldCost()","description":"CDOTABaseAbility:\n, return void","prefix":"PayGoldCost"},
"CDOTA_BaseNPC_GetMustReachEachGoalEntity":{"body":"GetMustReachEachGoalEntity()","description":"CDOTA_BaseNPC:\nSet whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path., return bool","prefix":"GetMustReachEachGoalEntity"},
"CBasePlayer_IsNoclipping":{"body":"IsNoclipping()","description":"CBasePlayer:\nReturns true if the player is in noclip mode., return bool","prefix":"IsNoclipping"},
"CDOTABaseAbility_SetInAbilityPhase":{"body":"SetInAbilityPhase(${bInAbilityPhase})","description":"CDOTABaseAbility:\n, return void","prefix":"SetInAbilityPhase"},
"DOTA_LOADOUT_TYPE_HEROIC_STATUE":{"body":"DOTA_LOADOUT_TYPE_HEROIC_STATUE","description":"","prefix":"DOTA_LOADOUT_TYPE_HEROIC_STATUE"},
"CDOTA_BaseNPC_Hero_GetPlayerID":{"body":"GetPlayerID()","description":"CDOTA_BaseNPC_Hero:\nReturns player ID of the player owning this hero, return int","prefix":"GetPlayerID"},
"CDOTA_Ability_Lua_OnStolen":{"body":"OnStolen(${hSourceAbility})","description":"CDOTA_Ability_Lua:\n( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal., return void","prefix":"OnStolen"},
"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY":{"body":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY","description":"Value[9]modifierfunction->GetModifierPersistentInvisibility","prefix":"MODIFIER_PROPERTY_PERSISTENT_INVISIBILITY"},
"CDOTABaseAbility_StartCooldown":{"body":"StartCooldown(${flCooldown})","description":"CDOTABaseAbility:\n, return void","prefix":"StartCooldown"},
"CDOTABaseGameMode_ClearItemAddedToInventoryFilter":{"body":"ClearItemAddedToInventoryFilter()","description":"CDOTABaseGameMode:\nClear the script filter that controls the item added to inventory filter., return void","prefix":"ClearItemAddedToInventoryFilter"},
"MODIFIER_EVENT_ON_MODEL_CHANGED":{"body":"MODIFIER_EVENT_ON_MODEL_CHANGED","description":"Value[147]modifierfunction->OnModelChanged","prefix":"MODIFIER_EVENT_ON_MODEL_CHANGED"},
"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT":{"body":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT","description":"Value[37]modifierfunction->GetModifierIncomingSpellDamageConstant","prefix":"MODIFIER_PROPERTY_INCOMING_SPELL_DAMAGE_CONSTANT"},
"DOTA_ModifyGold_PurchaseItem":{"body":"DOTA_ModifyGold_PurchaseItem","description":"","prefix":"DOTA_ModifyGold_PurchaseItem"},
"ACT_DOTA_CAST_ABILITY_1_END":{"body":"ACT_DOTA_CAST_ABILITY_1_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_1_END"},
"ACT_DOTA_TELEPORT_COOP_WAIT":{"body":"ACT_DOTA_TELEPORT_COOP_WAIT","description":"","prefix":"ACT_DOTA_TELEPORT_COOP_WAIT"},
"CDebugOverlayScriptHelper_HorzArrow":{"body":"HorzArrow(${Vector_1}, ${Vector_2}, ${float_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws a horizontal arrow. Specify endpoints in world space., return void","prefix":"HorzArrow"},
"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES":{"body":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_PREFER_ENEMIES"},
"CDOTA_Item_Lua_ProcsMagicStick":{"body":"ProcsMagicStick()","description":"CDOTA_Item_Lua:\nReturns true if this ability will generate magic stick charges for nearby enemies., return bool","prefix":"ProcsMagicStick"},
"CDOTABaseGameMode_GetUseCustomHeroLevels":{"body":"GetUseCustomHeroLevels()","description":"CDOTABaseGameMode:\nAre custom-defined XP values for hero level ups in use?, return bool","prefix":"GetUseCustomHeroLevels"},
"ACT_DOTA_FORCESTAFF_END":{"body":"ACT_DOTA_FORCESTAFF_END","description":"","prefix":"ACT_DOTA_FORCESTAFF_END"},
"CDOTA_BaseNPC_Hero_GetDeaths":{"body":"GetDeaths()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return int","prefix":"GetDeaths"},
"CDOTABaseGameMode_GetStickyItemDisabled":{"body":"GetStickyItemDisabled()","description":"CDOTABaseGameMode:\nHide the sticky item in the quickbuy., return bool","prefix":"GetStickyItemDisabled"},
"CDOTABaseAbility_EndChannel":{"body":"EndChannel(${bInterrupted})","description":"CDOTABaseAbility:\n, return void","prefix":"EndChannel"},
"CBaseEntity_GetMoveParent":{"body":"GetMoveParent()","description":"CBaseEntity:\nIf in hierarchy, retrieves the entity's parent., return handle","prefix":"GetMoveParent"},
"DOTA_MAX_SPECTATOR_TEAM_SIZE":{"body":"DOTA_MAX_SPECTATOR_TEAM_SIZE","description":"Value[40]DOTALimits_t->How many spectators can watch.","prefix":"DOTA_MAX_SPECTATOR_TEAM_SIZE"},
"CDOTABaseGameMode_SetAlwaysShowPlayerInventory":{"body":"SetAlwaysShowPlayerInventory(${bAlwaysShow})","description":"CDOTABaseGameMode:\nShow the player hero's inventory in the HUD, regardless of what unit is selected., return void","prefix":"SetAlwaysShowPlayerInventory"},
"CDOTABaseGameMode_SetAlwaysShowPlayerNames":{"body":"SetAlwaysShowPlayerNames(${bEnabled})","description":"CDOTABaseGameMode:\nSet whether player names are always shown, regardless of client setting., return void","prefix":"SetAlwaysShowPlayerNames"},
"DOTA_UNIT_TARGET_FLAG_DEAD":{"body":"DOTA_UNIT_TARGET_FLAG_DEAD","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_DEAD"},
"CDOTA_BaseNPC_AttackNoEarlierThan":{"body":"AttackNoEarlierThan(${flTime})","description":"CDOTA_BaseNPC:\n, return void","prefix":"AttackNoEarlierThan"},
"CDOTAGamerules_IsHeroRespawnEnabled":{"body":"IsHeroRespawnEnabled()","description":"CDOTAGamerules:\nReturns whether hero respawn is enabled., return bool","prefix":"IsHeroRespawnEnabled"},
"CDOTABaseGameMode_SetBuybackEnabled":{"body":"SetBuybackEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnables or disables buyback completely., return void","prefix":"SetBuybackEnabled"},
"CDOTA_BaseNPC_SetHullRadius":{"body":"SetHullRadius(${flHullRadius})","description":"CDOTA_BaseNPC:\nSet the collision hull radius of this NPC., return void","prefix":"SetHullRadius"},
"UF_FAIL_INVISIBLE":{"body":"UF_FAIL_INVISIBLE","description":"","prefix":"UF_FAIL_INVISIBLE"},
"CDOTABaseGameMode_SetFixedRespawnTime":{"body":"SetFixedRespawnTime(${flFixedRespawnTime})","description":"CDOTABaseGameMode:\nSet a fixed delay for all players to respawn after., return void","prefix":"SetFixedRespawnTime"},
"CDOTA_BaseNPC_IsNeutralUnitType":{"body":"IsNeutralUnitType()","description":"CDOTA_BaseNPC:\nIs this a neutral?, return bool","prefix":"IsNeutralUnitType"},
"CDOTA_Ability_Lua_IsHiddenAbilityCastable":{"body":"IsHiddenAbilityCastable()","description":"CDOTA_Ability_Lua:\nReturns true if this ability can be used when not on the action panel., return bool","prefix":"IsHiddenAbilityCastable"},
"CDOTA_Ability_Lua_IsStealable":{"body":"IsStealable()","description":"CDOTA_Ability_Lua:\nReturns true if this ability can be stolen by Spell Steal., return bool","prefix":"IsStealable"},
"ACT_DOTA_BRIDGE_THREAT":{"body":"ACT_DOTA_BRIDGE_THREAT","description":"","prefix":"ACT_DOTA_BRIDGE_THREAT"},
"MODIFIER_PROPERTY_TOOLTIP":{"body":"MODIFIER_PROPERTY_TOOLTIP","description":"Value[148]modifierfunction->OnTooltip","prefix":"MODIFIER_PROPERTY_TOOLTIP"},
"CDOTA_BaseNPC_MakeVisibleToTeam":{"body":"MakeVisibleToTeam(${iTeam}, ${flDuration})","description":"CDOTA_BaseNPC:\n, return void","prefix":"MakeVisibleToTeam"},
"CDOTABaseAbility_GetCursorTarget":{"body":"GetCursorTarget()","description":"CDOTABaseAbility:\n, return handle","prefix":"GetCursorTarget"},
"CDOTABaseGameMode_SetGoldSoundDisabled":{"body":"SetGoldSoundDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn the sound when gold is acquired off/on., return void","prefix":"SetGoldSoundDisabled"},
"CDOTA_Item_Lua_OnAbilityPhaseInterrupted":{"body":"OnAbilityPhaseInterrupted()","description":"CDOTA_Item_Lua:\nCast time did not complete successfully., return void","prefix":"OnAbilityPhaseInterrupted"},
"CDOTA_PlayerResource_GetStuns":{"body":"GetStuns(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return float","prefix":"GetStuns"},
"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS":{"body":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS","description":"Value[22]modifierfunction->GetModifierAttackSpeedBonus_Constant_PowerTreads","prefix":"MODIFIER_PROPERTY_ATTACKSPEED_BONUS_CONSTANT_POWER_TREADS"},
"CBaseModelEntity_SetSize":{"body":"SetSize(${mins}, ${maxs})","description":"CBaseModelEntity:\n, return void","prefix":"SetSize"},
"GetListenServerHost":{"body":"GetListenServerHost()","description":"Get the local player on a listen server., return handle","prefix":"GetListenServerHost"},
"DOTA_DEFAULT_MAX_TEAM":{"body":"DOTA_DEFAULT_MAX_TEAM","description":"Value[5]DOTALimits_t->Default number of players per team.","prefix":"DOTA_DEFAULT_MAX_TEAM"},
"CDOTABaseGameMode_SetModifierGainedFilter":{"body":"SetModifierGainedFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control modifiers that are gained, return false to destroy modifier., return void","prefix":"SetModifierGainedFilter"},
"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE":{"body":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE"},
"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND":{"body":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND","description":"Value[153]modifierfunction->GetAttackSound","prefix":"MODIFIER_PROPERTY_TRANSLATE_ATTACK_SOUND"},
"CDOTABaseGameMode_SetCustomHeroMaxLevel":{"body":"SetCustomHeroMaxLevel(${int_1})","description":"CDOTABaseGameMode:\nAllows definition of the max level heroes can achieve (default is 25)., return void","prefix":"SetCustomHeroMaxLevel"},
"CBodyComponent_DetachFromParent":{"body":"DetachFromParent()","description":"CBodyComponent:\nDetach from its parent, return void","prefix":"DetachFromParent"},
"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT":{"body":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT","description":"","prefix":"DOTA_HERO_PICK_STATE_CUSTOMGAME_SELECT"},
"DOTA_TEAM_CUSTOM_5":{"body":"DOTA_TEAM_CUSTOM_5","description":"","prefix":"DOTA_TEAM_CUSTOM_5"},
"PATTACH_WORLDORIGIN":{"body":"PATTACH_WORLDORIGIN","description":"","prefix":"PATTACH_WORLDORIGIN"},
"CDOTABaseGameMode_SetStashPurchasingDisabled":{"body":"SetStashPurchasingDisabled(${bDisabled})","description":"CDOTABaseGameMode:\nTurn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items., return void","prefix":"SetStashPurchasingDisabled"},
"CDOTABaseAbility_IsStealable":{"body":"IsStealable()","description":"CDOTABaseAbility:\n, return bool","prefix":"IsStealable"},
"ACT_TINY_AVALANCHE":{"body":"ACT_TINY_AVALANCHE","description":"","prefix":"ACT_TINY_AVALANCHE"},
"MODIFIER_STATE_NO_HEALTH_BAR":{"body":"MODIFIER_STATE_NO_HEALTH_BAR","description":"","prefix":"MODIFIER_STATE_NO_HEALTH_BAR"},
"CDOTABaseGameMode_SetTopBarTeamValuesOverride":{"body":"SetTopBarTeamValuesOverride(${bOverride})","description":"CDOTABaseGameMode:\nOverride the values of the team values on the top game bar., return void","prefix":"SetTopBarTeamValuesOverride"},
"CDOTABaseGameMode_SetTrackingProjectileFilter":{"body":"SetTrackingProjectileFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event), return void","prefix":"SetTrackingProjectileFilter"},
"DOTA_HEROPICK_STATE_CD_PICK":{"body":"DOTA_HEROPICK_STATE_CD_PICK","description":"","prefix":"DOTA_HEROPICK_STATE_CD_PICK"},
"CDOTABaseGameMode_GetRecommendedItemsDisabled":{"body":"GetRecommendedItemsDisabled()","description":"CDOTABaseGameMode:\nTurn the panel for showing recommended items at the shop off/on., return bool","prefix":"GetRecommendedItemsDisabled"},
"CDOTA_CustomUIManager_DynamicHud_SetDialogVariables":{"body":"DynamicHud_SetDialogVariables(${int_1}, ${string_2}, ${handle_3})","description":"CDOTA_CustomUIManager:\nAdd or modify dialog variables for an existing custom hud element ( int PlayerID /*-1 means everyone*/, string ElementID, table DialogVariables ), return void","prefix":"DynamicHud_SetDialogVariables"},
"CDOTABaseGameMode_SetTowerBackdoorProtectionEnabled":{"body":"SetTowerBackdoorProtectionEnabled(${bEnabled})","description":"CDOTABaseGameMode:\nEnables/Disables tower backdoor protection., return void","prefix":"SetTowerBackdoorProtectionEnabled"},
"CDOTAGameManager_GetHeroNameByID":{"body":"GetHeroNameByID(${int_1})","description":"CDOTAGameManager:\nGet the hero name given a hero ID., return string","prefix":"GetHeroNameByID"},
"CDOTAGamerules_AddMinimapDebugPoint":{"body":"AddMinimapDebugPoint(${int_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7})","description":"CDOTAGamerules:\nAdd a point on the minimap., return void","prefix":"AddMinimapDebugPoint"},
"CDOTA_BaseNPC_Hero_Buyback":{"body":"Buyback()","description":"CDOTA_BaseNPC_Hero:\nSpend the gold and buyback with this hero., return void","prefix":"Buyback"},
"CDOTAGamerules_GetDifficulty":{"body":"GetDifficulty()","description":"CDOTAGamerules:\nReturns difficulty level of the custom game mode, return int","prefix":"GetDifficulty"},
"CDOTAGamerules_GetGameModeEntity":{"body":"GetGameModeEntity()","description":"CDOTAGamerules:\nGet the game mode entity, return handle","prefix":"GetGameModeEntity"},
"CDOTA_BaseNPC_GetMinimumGoldBounty":{"body":"GetMinimumGoldBounty()","description":"CDOTA_BaseNPC:\nGet the minimum gold bounty for this unit., return int","prefix":"GetMinimumGoldBounty"},
"DOTA_ATTRIBUTE_INTELLECT":{"body":"DOTA_ATTRIBUTE_INTELLECT","description":"","prefix":"DOTA_ATTRIBUTE_INTELLECT"},
"DOTA_ABILITY_BEHAVIOR_NO_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_NO_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NO_TARGET"},
"CDOTAGamerules_SetOverlayHealthBarUnit":{"body":"SetOverlayHealthBarUnit(${handle_1}, ${int_2})","description":"CDOTAGamerules:\nShow this unit's health on the overlay health bar, return void","prefix":"SetOverlayHealthBarUnit"},
"CDOTAGamerules_GetTimeOfDay":{"body":"GetTimeOfDay()","description":"CDOTAGamerules:\nGet the time of day, return float","prefix":"GetTimeOfDay"},
"UF_FAIL_FRIENDLY":{"body":"UF_FAIL_FRIENDLY","description":"","prefix":"UF_FAIL_FRIENDLY"},
"CDOTABaseAbility_SetLevel":{"body":"SetLevel(${iLevel})","description":"CDOTABaseAbility:\nSets the level of this ability., return void","prefix":"SetLevel"},
"CDOTA_Modifier_Lua_Vertical_Motion_OnVerticalMotionInterrupted":{"body":"OnVerticalMotionInterrupted()","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nCalled when the motion gets interrupted., return void","prefix":"OnVerticalMotionInterrupted"},
"CDOTAGamerules_NumDroppedItems":{"body":"NumDroppedItems()","description":"CDOTAGamerules:\nReturns the number of items currently dropped on the ground, return int","prefix":"NumDroppedItems"},
"EmitAnnouncerSoundForTeamOnLocation":{"body":"EmitAnnouncerSoundForTeamOnLocation(${string_1}, ${int_2}, ${Vector_3})","description":"Emit an announcer sound for a team at a specific location., return void","prefix":"EmitAnnouncerSoundForTeamOnLocation"},
"CDOTA_BaseNPC_GetBaseAttackTime":{"body":"GetBaseAttackTime()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetBaseAttackTime"},
"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN":{"body":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"},
"ACT_DOTA_BRIDGE_DESTROY":{"body":"ACT_DOTA_BRIDGE_DESTROY","description":"","prefix":"ACT_DOTA_BRIDGE_DESTROY"},
"CDOTAGamerules_SetCustomGameAccountRecordSaveFunction":{"body":"SetCustomGameAccountRecordSaveFunction(${handle_1}, ${handle_2})","description":"CDOTAGamerules:\n(Preview/Unreleased) Sets a callback to handle saving custom game account records (callback is passed a Player ID and should return a flat simple table), return void","prefix":"SetCustomGameAccountRecordSaveFunction"},
"CDOTAGamerules_SetCustomGameDifficulty":{"body":"SetCustomGameDifficulty(${int_1})","description":"CDOTAGamerules:\nSet the difficulty level of the custom game mode, return void","prefix":"SetCustomGameDifficulty"},
"CDOTAGamerules_SetCustomGameSetupAutoLaunchDelay":{"body":"SetCustomGameSetupAutoLaunchDelay(${float_1})","description":"CDOTAGamerules:\nSet the amount of time to wait for auto launch., return void","prefix":"SetCustomGameSetupAutoLaunchDelay"},
"CDOTAGamerules_SetCustomGameSetupRemainingTime":{"body":"SetCustomGameSetupRemainingTime(${float_1})","description":"CDOTAGamerules:\nSet the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever, return void","prefix":"SetCustomGameSetupRemainingTime"},
"CDOTAGamerules_SetCustomGameSetupTimeout":{"body":"SetCustomGameSetupTimeout(${float_1})","description":"CDOTAGamerules:\nSetup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called), return void","prefix":"SetCustomGameSetupTimeout"},
"CDOTAGamerules_SetCustomGameTeamMaxPlayers":{"body":"SetCustomGameTeamMaxPlayers(${int_1}, ${int_2})","description":"CDOTAGamerules:\nSet whether a team is selectable during game setup, return void","prefix":"SetCustomGameTeamMaxPlayers"},
"CDOTAGamerules_SetCustomVictoryMessage":{"body":"SetCustomVictoryMessage(${string_1})","description":"CDOTAGamerules:\nSets the victory message., return void","prefix":"SetCustomVictoryMessage"},
"MODIFIER_EVENT_ON_SET_LOCATION":{"body":"MODIFIER_EVENT_ON_SET_LOCATION","description":"Value[140]modifierfunction->OnSetLocation","prefix":"MODIFIER_EVENT_ON_SET_LOCATION"},
"MODIFIER_PROPERTY_VISUAL_Z_DELTA":{"body":"MODIFIER_PROPERTY_VISUAL_Z_DELTA","description":"Value[168]modifierfunction->GetVisualZDelta","prefix":"MODIFIER_PROPERTY_VISUAL_Z_DELTA"},
"StopEffect":{"body":"StopEffect(${handle_1}, ${string_2})","description":"Pass entity and effect name, return void","prefix":"StopEffect"},
"CDOTAGamerules_SetHeroMinimapIconScale":{"body":"SetHeroMinimapIconScale(${float_1})","description":"CDOTAGamerules:\n(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap., return void","prefix":"SetHeroMinimapIconScale"},
"CDOTA_Buff_GetDieTime":{"body":"GetDieTime()","description":"CDOTA_Buff:\n, return float","prefix":"GetDieTime"},
"CBaseEntity_GetBoundingMins":{"body":"GetBoundingMins()","description":"CBaseEntity:\nGet a vector containing min bounds, centered on object., return Vector","prefix":"GetBoundingMins"},
"CDOTA_BaseNPC_SetMoveCapability":{"body":"SetMoveCapability(${iMoveCapabilities})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetMoveCapability"},
"PATTACH_RENDERORIGIN_FOLLOW":{"body":"PATTACH_RENDERORIGIN_FOLLOW","description":"","prefix":"PATTACH_RENDERORIGIN_FOLLOW"},
"SetRenderingEnabled":{"body":"SetRenderingEnabled(${ehandle_1}, ${bool_2})","description":"Set rendering on/off for an ehandle, return void","prefix":"SetRenderingEnabled"},
"CDOTAGamerules_SetHideKillMessageHeaders":{"body":"SetHideKillMessageHeaders(${bool_1})","description":"CDOTAGamerules:\nSets whether the multikill, streak, and first-blood banners appear at the top of the screen., return void","prefix":"SetHideKillMessageHeaders"},
"DebugScreenTextPretty":{"body":"DebugScreenTextPretty(${float_1}, ${float_2}, ${int_3}, ${string_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9}, ${string_10}, ${int_11}, ${bool_12})","description":"Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold), return void","prefix":"DebugScreenTextPretty"},
"CPropVRHand_GetHandAttachment":{"body":"GetHandAttachment()","description":"CPropVRHand:\nGet the attachment on this hand, return handle","prefix":"GetHandAttachment"},
"CDOTABaseAbility_GetCursorPosition":{"body":"GetCursorPosition()","description":"CDOTABaseAbility:\n, return Vector","prefix":"GetCursorPosition"},
"CDOTA_BaseNPC_Hero_SetGold":{"body":"SetGold(${iGold}, ${bReliable})","description":"CDOTA_BaseNPC_Hero:\nSets the gold amount for the player owning this hero, return void","prefix":"SetGold"},
"DOTA_HUD_VISIBILITY_INVENTORY_COURIER":{"body":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER","description":"","prefix":"DOTA_HUD_VISIBILITY_INVENTORY_COURIER"},
"DebugDrawScreenTextLine":{"body":"DebugDrawScreenTextLine(${float_1}, ${float_2}, ${int_3}, ${string_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${float_9})","description":"Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration), return void","prefix":"DebugDrawScreenTextLine"},
"CDOTAGamerules_SetTreeRegrowTime":{"body":"SetTreeRegrowTime(${float_1})","description":"CDOTAGamerules:\nSets the tree regrow time in seconds., return void","prefix":"SetTreeRegrowTime"},
"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT":{"body":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT","description":"Value[36]modifierfunction->GetModifierIncomingPhysicalDamageConstant","prefix":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_CONSTANT"},
"CDOTAPlayer_GetPlayerID":{"body":"GetPlayerID()","description":"CDOTAPlayer:\nGet the player's official PlayerID; notably is -1 when the player isn't yet on a team., return int","prefix":"GetPlayerID"},
"DOTA_LOADOUT_TYPE_TERRAIN":{"body":"DOTA_LOADOUT_TYPE_TERRAIN","description":"","prefix":"DOTA_LOADOUT_TYPE_TERRAIN"},
"CDOTAGamerules_SendCustomMessageToTeam":{"body":"SendCustomMessageToTeam(${string_1}, ${int_2}, ${int_3}, ${int_4})","description":"CDOTAGamerules:\nSends a message on behalf of a player to the specified team., return void","prefix":"SendCustomMessageToTeam"},
"CBodyComponent_SetMaterialGroup":{"body":"SetMaterialGroup(${utlstringtoken_1})","description":"CBodyComponent:\n, return void","prefix":"SetMaterialGroup"},
"CDOTA_Item_IsPermanent":{"body":"IsPermanent()","description":"CDOTA_Item:\n, return bool","prefix":"IsPermanent"},
"QUEST_TEXT_REPLACE_VALUE_ROUND":{"body":"QUEST_TEXT_REPLACE_VALUE_ROUND","description":"","prefix":"QUEST_TEXT_REPLACE_VALUE_ROUND"},
"CDOTA_Item_GetInitialCharges":{"body":"GetInitialCharges()","description":"CDOTA_Item:\nGet the initial number of charges this item has., return int","prefix":"GetInitialCharges"},
"CDOTA_BaseNPC_Hero_GetBaseStrength":{"body":"GetBaseStrength()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetBaseStrength"},
"CDebugOverlayScriptHelper_VectorText3D":{"body":"VectorText3D(${Vector_1}, ${Quaternion_2}, ${string_3}, ${int_4}, ${int_5}, ${int_6}, ${int_7}, ${bool_8}, ${float_9})","description":"CDebugOverlayScriptHelper:\nDraws 3D text. Specify origin + orientation in world space., return void","prefix":"VectorText3D"},
"CDOTA_Ability_Lua_CastFilterResult":{"body":"CastFilterResult()","description":"CDOTA_Ability_Lua:\nDetermine whether an issued command with no target is valid., return int","prefix":"CastFilterResult"},
"ACT_DOTA_LIFESTEALER_INFEST":{"body":"ACT_DOTA_LIFESTEALER_INFEST","description":"","prefix":"ACT_DOTA_LIFESTEALER_INFEST"},
"CDOTABaseAbility_ToggleAutoCast":{"body":"ToggleAutoCast()","description":"CDOTABaseAbility:\n, return void","prefix":"ToggleAutoCast"},
"CDOTA_Ability_Lua_GetAssociatedSecondaryAbilities":{"body":"GetAssociatedSecondaryAbilities()","description":"CDOTA_Ability_Lua:\nReturns other abilities that are stolen simultaneously, or otherwise related in functionality.  Generally hidden abilities., return string","prefix":"GetAssociatedSecondaryAbilities"},
"CDOTA_Ability_Lua_GetCooldown":{"body":"GetCooldown(${iLevel})","description":"CDOTA_Ability_Lua:\nReturn cooldown of this ability., return float","prefix":"GetCooldown"},
"CDebugOverlayScriptHelper_SolidCone":{"body":"SolidCone(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${int_5}, ${int_6}, ${int_7}, ${int_8}, ${bool_9}, ${float_10})","description":"CDebugOverlayScriptHelper:\nDraws a solid cone. Specify endpoint and direction in world space., return void","prefix":"SolidCone"},
"CDOTA_BaseNPC_PickupRune":{"body":"PickupRune(${hItem})","description":"CDOTA_BaseNPC:\nPick up a rune., return void","prefix":"PickupRune"},
"CDOTAGamerules_GetNianTotalDamageTaken":{"body":"GetNianTotalDamageTaken()","description":"CDOTAGamerules:\nFor New Bloom, get total damage taken by the Nian / Year Beast, return int","prefix":"GetNianTotalDamageTaken"},
"ACT_DOTA_CAGED_CREEP_RAGE":{"body":"ACT_DOTA_CAGED_CREEP_RAGE","description":"","prefix":"ACT_DOTA_CAGED_CREEP_RAGE"},
"CDOTA_PlayerResource_GetAegisPickups":{"body":"GetAegisPickups(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetAegisPickups"},
"DOTA_GAMERULES_STATE_DISCONNECT":{"body":"DOTA_GAMERULES_STATE_DISCONNECT","description":"","prefix":"DOTA_GAMERULES_STATE_DISCONNECT"},
"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START":{"body":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_ES_ROLL_START"},
"CDOTA_Ability_Lua_OnHeroDiedNearby":{"body":"OnHeroDiedNearby(${unit}, ${attacker}, ${table})","description":"CDOTA_Ability_Lua:\nA hero has died in the vicinity (ie Urn), takes table of params., return void","prefix":"OnHeroDiedNearby"},
"ITEM_FULLY_SHAREABLE":{"body":"ITEM_FULLY_SHAREABLE","description":"","prefix":"ITEM_FULLY_SHAREABLE"},
"CDOTA_Ability_DataDriven_ApplyDataDrivenModifier":{"body":"ApplyDataDrivenModifier(${hCaster}, ${hTarget}, ${pszModifierName}, ${hModifierTable})","description":"CDOTA_Ability_DataDriven:\nApplies a data driven modifier to the target, return handle","prefix":"ApplyDataDrivenModifier"},
"DOTA_ITEM_SLOT_6":{"body":"DOTA_ITEM_SLOT_6","description":"","prefix":"DOTA_ITEM_SLOT_6"},
"PrecacheEntityFromTable":{"body":"PrecacheEntityFromTable(${string_1}, ${handle_2}, ${handle_3})","description":"Precache an entity from KeyValues in table, return void","prefix":"PrecacheEntityFromTable"},
"rr_CommitAIResponse":{"body":"rr_CommitAIResponse(${handle_1}, ${handle_2})","description":"Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse), return bool","prefix":"rr_CommitAIResponse"},
"CDOTA_Ability_Lua_OnUnStolen":{"body":"OnUnStolen()","description":"CDOTA_Ability_Lua:\nSpecial behavior when lost by Spell Steal., return void","prefix":"OnUnStolen"},
"CDOTABaseGameMode_SetBotsMaxPushTier":{"body":"SetBotsMaxPushTier(${nMaxTier})","description":"CDOTABaseGameMode:\nSet the max tier of tower that bots want to push. (-1 to disable), return void","prefix":"SetBotsMaxPushTier"},
"ACT_DOTA_DAGON":{"body":"ACT_DOTA_DAGON","description":"","prefix":"ACT_DOTA_DAGON"},
"ACT_DOTA_CAST_ABILITY_2_END":{"body":"ACT_DOTA_CAST_ABILITY_2_END","description":"","prefix":"ACT_DOTA_CAST_ABILITY_2_END"},
"CDOTAGamerules_SetSafeToLeave":{"body":"SetSafeToLeave(${bool_1})","description":"CDOTAGamerules:\n(bSafeToLeave) - Mark this game as safe to leave., return void","prefix":"SetSafeToLeave"},
"CBaseEntity_GetOwner":{"body":"GetOwner()","description":"CBaseEntity:\nGets this entity's owner, return handle","prefix":"GetOwner"},
"CDOTA_Ability_Lua_OnProjectileThink_ExtraData":{"body":"OnProjectileThink_ExtraData(${vLocation}, ${table})","description":"CDOTA_Ability_Lua:\n(Vector vLocation, table kv ) Projectile is actively moving., return void","prefix":"OnProjectileThink_ExtraData"},
"CDOTA_BaseNPC_GetNeverMoveToClearSpace":{"body":"GetNeverMoveToClearSpace()","description":"CDOTA_BaseNPC:\nIf set to true, we will never attempt to move this unit to clear space, even when it unphases., return bool","prefix":"GetNeverMoveToClearSpace"},
"CDOTA_BaseNPC_SetAbilityByIndex":{"body":"SetAbilityByIndex(${hAbility}, ${iIndex})","description":"CDOTA_BaseNPC:\nSet the ability by index., return void","prefix":"SetAbilityByIndex"},
"CDOTAGamerules_SetSameHeroSelectionEnabled":{"body":"SetSameHeroSelectionEnabled(${bool_1})","description":"CDOTAGamerules:\nWhen true, players can repeatedly pick the same hero., return void","prefix":"SetSameHeroSelectionEnabled"},
"DOTA_UNIT_TARGET_TEAM_FRIENDLY":{"body":"DOTA_UNIT_TARGET_TEAM_FRIENDLY","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_FRIENDLY"},
"MODIFIER_STATE_PASSIVES_DISABLED":{"body":"MODIFIER_STATE_PASSIVES_DISABLED","description":"","prefix":"MODIFIER_STATE_PASSIVES_DISABLED"},
"ACT_DOTA_SPAWN":{"body":"ACT_DOTA_SPAWN","description":"","prefix":"ACT_DOTA_SPAWN"},
"DOTA_RUNE_BOUNTY":{"body":"DOTA_RUNE_BOUNTY","description":"","prefix":"DOTA_RUNE_BOUNTY"},
"CDOTA_PlayerResource_GetTotalGoldSpent":{"body":"GetTotalGoldSpent(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetTotalGoldSpent"},
"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE","description":"Value[34]modifierfunction->GetModifierIncomingDamage_Percentage","prefix":"MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE"},
"CDOTABaseGameMode_GetCustomBuybackCooldownEnabled":{"body":"GetCustomBuybackCooldownEnabled()","description":"CDOTABaseGameMode:\nTurns on capability to define custom buyback cooldowns., return bool","prefix":"GetCustomBuybackCooldownEnabled"},
"CDOTAVoteSystem_StartVote":{"body":"StartVote(${handle_1})","description":"CDOTAVoteSystem:\nStarts a vote, based upon a table of parameters, return void","prefix":"StartVote"},
"CDOTA_BaseNPC_HasMovementCapability":{"body":"HasMovementCapability()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasMovementCapability"},
"MinimapEvent":{"body":"MinimapEvent(${int_1}, ${handle_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6})","description":"Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration)., return void","prefix":"MinimapEvent"},
"CDOTA_BaseNPC_GetAdditionalBattleMusicWeight":{"body":"GetAdditionalBattleMusicWeight()","description":"CDOTA_BaseNPC:\nCombat involving this creature will have this weight added to the music calcuations., return float","prefix":"GetAdditionalBattleMusicWeight"},
"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE":{"body":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE","description":"Value[27]modifierfunction->GetModifierDamageOutgoing_Percentage","prefix":"MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE"},
"CDOTA_BaseNPC_GetBaseHealthRegen":{"body":"GetBaseHealthRegen()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetBaseHealthRegen"},
"CDOTA_BaseNPC_GetBaseMagicalResistanceValue":{"body":"GetBaseMagicalResistanceValue()","description":"CDOTA_BaseNPC:\nReturns base magical armor value., return float","prefix":"GetBaseMagicalResistanceValue"},
"CDOTA_BaseNPC_GetBaseNightTimeVisionRange":{"body":"GetBaseNightTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return int","prefix":"GetBaseNightTimeVisionRange"},
"CDOTA_Modifier_Lua_Motion_Both_OnVerticalMotionInterrupted":{"body":"OnVerticalMotionInterrupted()","description":"CDOTA_Modifier_Lua_Motion_Both:\nCalled when the motion gets interrupted., return void","prefix":"OnVerticalMotionInterrupted"},
"CDOTA_BaseNPC_GetCollisionPadding":{"body":"GetCollisionPadding()","description":"CDOTA_BaseNPC:\nReturns the size of the collision padding around the hull., return float","prefix":"GetCollisionPadding"},
"CDOTAGamerules_SetUseCustomHeroXPValues":{"body":"SetUseCustomHeroXPValues(${bool_1})","description":"CDOTAGamerules:\nAllows heroes in the map to give a specific amount of XP (this value must be set)., return void","prefix":"SetUseCustomHeroXPValues"},
"CDOTA_Ability_Lua_OnChannelThink":{"body":"OnChannelThink(${flInterval})","description":"CDOTA_Ability_Lua:\n(float flInterval) Channeling is taking place., return void","prefix":"OnChannelThink"},
"CDOTA_BaseNPC_GetCursorTargetingNothing":{"body":"GetCursorTargetingNothing()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"GetCursorTargetingNothing"},
"ACT_DOTA_GREEVIL_HOOK_END":{"body":"ACT_DOTA_GREEVIL_HOOK_END","description":"","prefix":"ACT_DOTA_GREEVIL_HOOK_END"},
"CDOTAGamerules_SetFirstBloodActive":{"body":"SetFirstBloodActive(${bool_1})","description":"CDOTAGamerules:\nSets whether First Blood has been triggered., return void","prefix":"SetFirstBloodActive"},
"GridNav_IsTraversable":{"body":"IsTraversable(${Vector_1})","description":"GridNav:\nChecks whether the given position is traversable, return bool","prefix":"IsTraversable"},
"DOTA_HEROPICK_STATE_CD_BAN6":{"body":"DOTA_HEROPICK_STATE_CD_BAN6","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN6"},
"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE","description":"Value[48]modifierfunction->GetModifierMagicalResistanceItemUnique","prefix":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_ITEM_UNIQUE"},
"CDOTA_BaseNPC_GetInitialGoalEntity":{"body":"GetInitialGoalEntity()","description":"CDOTA_BaseNPC:\nReturns the initial waypoint goal for this NPC., return handle","prefix":"GetInitialGoalEntity"},
"CDOTA_BaseNPC_TakeItem":{"body":"TakeItem(${hItem})","description":"CDOTA_BaseNPC:\nRemoved the passed item from this unit's inventory., return handle","prefix":"TakeItem"},
"UTIL_RemoveImmediate":{"body":"UTIL_RemoveImmediate(${handle_1})","description":"Immediately removes the specified entity, return void","prefix":"UTIL_RemoveImmediate"},
"DOTA_STASH_SLOT_4":{"body":"DOTA_STASH_SLOT_4","description":"","prefix":"DOTA_STASH_SLOT_4"},
"MODIFIER_EVENT_ON_ABILITY_START":{"body":"MODIFIER_EVENT_ON_ABILITY_START","description":"Value[124]modifierfunction->OnAbilityStart","prefix":"MODIFIER_EVENT_ON_ABILITY_START"},
"CDOTA_PlayerResource_SetHasRandomed":{"body":"SetHasRandomed(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return void","prefix":"SetHasRandomed"},
"CDOTA_Ability_Lua_ProcsMagicStick":{"body":"ProcsMagicStick()","description":"CDOTA_Ability_Lua:\nReturns true if this ability will generate magic stick charges for nearby enemies., return bool","prefix":"ProcsMagicStick"},
"CDOTA_BaseNPC_GetMoveSpeedModifier":{"body":"GetMoveSpeedModifier(${flBaseSpeed})","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetMoveSpeedModifier"},
"CDOTA_BaseNPC_IsRealHero":{"body":"IsRealHero()","description":"CDOTA_BaseNPC:\nIs this a real hero?, return bool","prefix":"IsRealHero"},
"CDOTABaseAbility_RefundManaCost":{"body":"RefundManaCost()","description":"CDOTABaseAbility:\n, return void","prefix":"RefundManaCost"},
"CDOTA_BaseNPC_AddItem":{"body":"AddItem(${hItem})","description":"CDOTA_BaseNPC:\nAdd an item to this unit's inventory., return handle","prefix":"AddItem"},
"CDOTA_BaseNPC_GetNightTimeVisionRange":{"body":"GetNightTimeVisionRange()","description":"CDOTA_BaseNPC:\nReturns the vision range after modifiers., return int","prefix":"GetNightTimeVisionRange"},
"DOTA_SPEECH_BAD_TEAM":{"body":"DOTA_SPEECH_BAD_TEAM","description":"","prefix":"DOTA_SPEECH_BAD_TEAM"},
"MODIFIER_EVENT_ON_BREAK_INVISIBILITY":{"body":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY","description":"Value[127]modifierfunction->OnBreakInvisibility","prefix":"MODIFIER_EVENT_ON_BREAK_INVISIBILITY"},
"ACT_DOTA_JAKIRO_LIQUIDFIRE_START":{"body":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START","description":"","prefix":"ACT_DOTA_JAKIRO_LIQUIDFIRE_START"},
"CDOTA_PlayerResource_GetUnitShareMaskForPlayer":{"body":"GetUnitShareMaskForPlayer(${nPlayerID}, ${nOtherPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetUnitShareMaskForPlayer"},
"GetEntityIndexForTreeId":{"body":"GetEntityIndexForTreeId(${unsigned_1})","description":"Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE., return <unknown>","prefix":"GetEntityIndexForTreeId"},
"CDOTABaseAbility_GetChannelStartTime":{"body":"GetChannelStartTime()","description":"CDOTABaseAbility:\n, return float","prefix":"GetChannelStartTime"},
"CDOTA_PlayerResource_IncrementTotalEarnedXP":{"body":"IncrementTotalEarnedXP(${iPlayerID}, ${iXP}, ${nReason})","description":"CDOTA_PlayerResource:\n, return void","prefix":"IncrementTotalEarnedXP"},
"SplineQuaternions":{"body":"SplineQuaternions(${Quaternion_1}, ${Quaternion_2}, ${float_3})","description":"(quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1], return Quaternion","prefix":"SplineQuaternions"},
"CDOTA_BaseNPC_HasAbility":{"body":"HasAbility(${pszAbilityName})","description":"CDOTA_BaseNPC:\nSee whether this unit has an ability by name., return bool","prefix":"HasAbility"},
"CDOTA_BaseNPC_HasAnyActiveAbilities":{"body":"HasAnyActiveAbilities()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"HasAnyActiveAbilities"},
"DOTA_MINIMAP_EVENT_BASE_GLYPHED":{"body":"DOTA_MINIMAP_EVENT_BASE_GLYPHED","description":"","prefix":"DOTA_MINIMAP_EVENT_BASE_GLYPHED"},
"DOTA_HEROPICK_STATE_CM_PICK":{"body":"DOTA_HEROPICK_STATE_CM_PICK","description":"","prefix":"DOTA_HEROPICK_STATE_CM_PICK"},
"CDOTA_BaseNPC_GetMana":{"body":"GetMana()","description":"CDOTA_BaseNPC:\nGet the mana on this unit., return float","prefix":"GetMana"},
"CDOTA_BaseNPC_HasInventory":{"body":"HasInventory()","description":"CDOTA_BaseNPC:\nDoes this unit have an inventory., return bool","prefix":"HasInventory"},
"CDOTA_BaseNPC_SetBaseAttackTime":{"body":"SetBaseAttackTime(${flBaseAttackTime})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseAttackTime"},
"CDOTA_BaseNPC_Interrupt":{"body":"Interrupt()","description":"CDOTA_BaseNPC:\n, return void","prefix":"Interrupt"},
"CDOTA_PlayerResource_GetRunePickups":{"body":"GetRunePickups(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetRunePickups"},
"CDOTA_Ability_Lua_GetCastRange":{"body":"GetCastRange(${vLocation}, ${hTarget})","description":"CDOTA_Ability_Lua:\nReturn cast range of this ability., return int","prefix":"GetCastRange"},
"CDOTA_BaseNPC_IsAttacking":{"body":"IsAttacking()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsAttacking"},
"CDOTABaseAbility_PayGoldCostForUpgrade":{"body":"PayGoldCostForUpgrade()","description":"CDOTABaseAbility:\n, return void","prefix":"PayGoldCostForUpgrade"},
"CBaseEntity_GetTeam":{"body":"GetTeam()","description":"CBaseEntity:\nGet the team number of this entity., return int","prefix":"GetTeam"},
"RandomVector":{"body":"RandomVector(${float_1})","description":"Get a random 2D vector of the given length., return Vector","prefix":"RandomVector"},
"CDOTA_BaseNPC_IsEvadeDisabled":{"body":"IsEvadeDisabled()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsEvadeDisabled"},
"CDOTA_BaseNPC_SetBaseMoveSpeed":{"body":"SetBaseMoveSpeed(${iMoveSpeed})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetBaseMoveSpeed"},
"CScriptParticleManager_SetParticleControlEnt":{"body":"SetParticleControlEnt(${int_1}, ${int_2}, ${handle_3}, ${int_4}, ${string_5}, ${Vector_6}, ${bool_7})","description":"CScriptParticleManager:\n, return void","prefix":"SetParticleControlEnt"},
"CDOTA_BaseNPC_SwapAbilities":{"body":"SwapAbilities(${pAbilityName1}, ${pAbilityName2}, ${bEnable1}, ${bEnable2})","description":"CDOTA_BaseNPC:\nSwaps the slots of the two passed abilities and sets them enabled/disabled., return void","prefix":"SwapAbilities"},
"CDOTA_Ability_Lua_OnChannelFinish":{"body":"OnChannelFinish(${bInterrupted})","description":"CDOTA_Ability_Lua:\n(bool bInterrupted) Channel finished., return void","prefix":"OnChannelFinish"},
"CDOTAGamerules_AddMinimapDebugPointForTeam":{"body":"AddMinimapDebugPointForTeam(${int_1}, ${Vector_2}, ${int_3}, ${int_4}, ${int_5}, ${int_6}, ${float_7}, ${int_8})","description":"CDOTAGamerules:\nAdd a point on the minimap for a specific team., return void","prefix":"AddMinimapDebugPointForTeam"},
"CDOTAGamerules_IsDaytime":{"body":"IsDaytime()","description":"CDOTAGamerules:\nIs it day time., return bool","prefix":"IsDaytime"},
"CDOTA_PlayerResource_ReplaceHeroWith":{"body":"ReplaceHeroWith(${iPlayerID}, ${pszHeroClass}, ${nGold}, ${nXP})","description":"CDOTA_PlayerResource:\n(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP, return handle","prefix":"ReplaceHeroWith"},
"DOTA_MAX_PLAYER_TEAMS":{"body":"DOTA_MAX_PLAYER_TEAMS","description":"Value[10]DOTALimits_t->Max number of player teams supported.","prefix":"DOTA_MAX_PLAYER_TEAMS"},
"CDOTA_Item_IsSellable":{"body":"IsSellable()","description":"CDOTA_Item:\n, return bool","prefix":"IsSellable"},
"CDOTA_BaseNPC_IsNightmared":{"body":"IsNightmared()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsNightmared"},
"CDOTA_BaseNPC_BoundingRadius2D":{"body":"BoundingRadius2D()","description":"CDOTA_BaseNPC:\n, return float","prefix":"BoundingRadius2D"},
"CDOTA_BaseNPC_ForceKill":{"body":"ForceKill(${bReincarnate})","description":"CDOTA_BaseNPC:\nKill this unit immediately., return void","prefix":"ForceKill"},
"CDOTABaseAbility_GetAbilityTargetTeam":{"body":"GetAbilityTargetTeam()","description":"CDOTABaseAbility:\n, return int","prefix":"GetAbilityTargetTeam"},
"CDOTA_BaseNPC_IsPhantomBlocker":{"body":"IsPhantomBlocker()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsPhantomBlocker"},
"CDOTA_BaseNPC_IsPhased":{"body":"IsPhased()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsPhased"},
"CSceneEntity_Start":{"body":"Start(${handle_1})","description":"CSceneEntity:\nStart scene playback, takes activatorEntity as param, return void","prefix":"Start"},
"CDOTA_BaseNPC_IsSpeciallyDeniable":{"body":"IsSpeciallyDeniable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsSpeciallyDeniable"},
"MODIFIER_PROPERTY_HEALTH_BONUS":{"body":"MODIFIER_PROPERTY_HEALTH_BONUS","description":"Value[57]modifierfunction->GetModifierHealthBonus","prefix":"MODIFIER_PROPERTY_HEALTH_BONUS"},
"CDOTA_BaseNPC_IsStunned":{"body":"IsStunned()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsStunned"},
"CDOTA_Modifier_Lua_GetModifierAura":{"body":"GetModifierAura()","description":"CDOTA_Modifier_Lua:\nThe name of the secondary modifier that will be applied by this modifier (if it is an aura)., return string","prefix":"GetModifierAura"},
"CDOTA_BaseNPC_Creature_SetChampion":{"body":"SetChampion(${bIsChampion})","description":"CDOTA_BaseNPC_Creature:\nFlag this unit as a champion creature., return void","prefix":"SetChampion"},
"CDOTA_BaseNPC_IsUnselectable":{"body":"IsUnselectable()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"IsUnselectable"},
"CDOTA_BaseNPC_ModifyHealth":{"body":"ModifyHealth(${iDesiredHealthValue}, ${hAbility}, ${bLethal}, ${iAdditionalFlags})","description":"CDOTA_BaseNPC:\nSets the health to a specific value, with optional flags or inflictors., return void","prefix":"ModifyHealth"},
"CDOTABaseAbility_SetHidden":{"body":"SetHidden(${bHidden})","description":"CDOTABaseAbility:\n, return void","prefix":"SetHidden"},
"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS":{"body":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS","description":"Value[67]modifierfunction->GetModifierAttackRangeBonus","prefix":"MODIFIER_PROPERTY_ATTACK_RANGE_BONUS"},
"CDOTA_PlayerResource_GetSteamID":{"body":"GetSteamID(${iPlayerID})","description":"CDOTA_PlayerResource:\nGet the 64 bit steam ID for a given player., return <unknown>","prefix":"GetSteamID"},
"CDOTAGamerules_Playtesting_UpdateAddOnKeyValues":{"body":"Playtesting_UpdateAddOnKeyValues()","description":"CDOTAGamerules:\nUpdates custom hero, unit and ability KeyValues in memory with the latest values from disk, return void","prefix":"Playtesting_UpdateAddOnKeyValues"},
"CDOTA_BaseNPC_GetAttackRange":{"body":"GetAttackRange()","description":"CDOTA_BaseNPC:\nGets this unit's attack range after all modifiers., return float","prefix":"GetAttackRange"},
"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET":{"body":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"},
"CDOTA_BaseNPC_ProvidesVision":{"body":"ProvidesVision()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"ProvidesVision"},
"CDOTA_BaseNPC_ReduceMana":{"body":"ReduceMana(${flAmount})","description":"CDOTA_BaseNPC:\nRemove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent., return void","prefix":"ReduceMana"},
"DOTA_HEROPICK_STATE_CM_BAN10":{"body":"DOTA_HEROPICK_STATE_CM_BAN10","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN10"},
"DOTA_HEROPICK_STATE_MO_SELECT":{"body":"DOTA_HEROPICK_STATE_MO_SELECT","description":"","prefix":"DOTA_HEROPICK_STATE_MO_SELECT"},
"CDOTA_BaseNPC_RemoveNoDraw":{"body":"RemoveNoDraw()","description":"CDOTA_BaseNPC:\nRemove the no draw flag., return void","prefix":"RemoveNoDraw"},
"CDOTA_BaseNPC_SetBaseDamageMin":{"body":"SetBaseDamageMin(${nMin})","description":"CDOTA_BaseNPC:\nSets the minimum base damage., return void","prefix":"SetBaseDamageMin"},
"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION":{"body":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION","description":"","prefix":"DOTA_MUSIC_STATUS_PRE_GAME_EXPLORATION"},
"ScreenShake":{"body":"ScreenShake(${Vector_1}, ${float_2}, ${float_3}, ${float_4}, ${float_5}, ${int_6}, ${bool_7})","description":"Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake, return void","prefix":"ScreenShake"},
"CDOTA_BaseNPC_Hero_SetRespawnsDisabled":{"body":"SetRespawnsDisabled(${bDisableRespawns})","description":"CDOTA_BaseNPC_Hero:\nPrevent this hero from respawning., return void","prefix":"SetRespawnsDisabled"},
"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE":{"body":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE","description":"Value[35]modifierfunction->GetModifierIncomingPhysicalDamage_Percentage","prefix":"MODIFIER_PROPERTY_INCOMING_PHYSICAL_DAMAGE_PERCENTAGE"},
"ACT_DOTA_PET_LEVEL":{"body":"ACT_DOTA_PET_LEVEL","description":"","prefix":"ACT_DOTA_PET_LEVEL"},
"CBaseEntity_SetOrigin":{"body":"SetOrigin(${v})","description":"CBaseEntity:\n, return void","prefix":"SetOrigin"},
"CDOTA_BaseNPC_SetIdleAcquire":{"body":"SetIdleAcquire(${bIdleAcquire})","description":"CDOTA_BaseNPC:\n, return void","prefix":"SetIdleAcquire"},
"CDOTABaseGameMode_SetRuneEnabled":{"body":"SetRuneEnabled(${nRune}, ${bEnabled})","description":"CDOTABaseGameMode:\nSet if a given type of rune is enabled., return void","prefix":"SetRuneEnabled"},
"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED":{"body":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED","description":"","prefix":"DOTA_UNIT_TARGET_FLAG_NOT_DOMINATED"},
"ShowGenericPopup":{"body":"ShowGenericPopup(${string_1}, ${string_2}, ${string_3}, ${string_4}, ${int_5})","description":"Show a generic popup dialog for all players., return void","prefix":"ShowGenericPopup"},
"GetSystemDate":{"body":"GetSystemDate()","description":"Get the current real world date, return string","prefix":"GetSystemDate"},
"CDOTA_BaseNPC_SwapItems":{"body":"SwapItems(${nSlot1}, ${nSlot2})","description":"CDOTA_BaseNPC:\nSwap the contents of two item slots (slot1, slot2), return void","prefix":"SwapItems"},
"CDOTATutorial_SetWhiteListEnabled":{"body":"SetWhiteListEnabled(${bool_1})","description":"CDOTATutorial:\nSet if we should whitelist shop items., return void","prefix":"SetWhiteListEnabled"},
"CDOTABaseGameMode_SetItemAddedToInventoryFilter":{"body":"SetItemAddedToInventoryFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control what happens to items that are added to an inventory, return false to cancel the event, return void","prefix":"SetItemAddedToInventoryFilter"},
"DebugDrawSphere":{"body":"DebugDrawSphere(${Vector_1}, ${Vector_2}, ${float_3}, ${float_4}, ${bool_5}, ${float_6})","description":"Draw a debug sphere (center, vRgb, a, rad, ztest, duration), return void","prefix":"DebugDrawSphere"},
"CDOTA_BaseNPC_UnitCanRespawn":{"body":"UnitCanRespawn()","description":"CDOTA_BaseNPC:\n, return bool","prefix":"UnitCanRespawn"},
"CDOTA_BaseNPC_Building_SetInvulnCount":{"body":"SetInvulnCount(${nInvulnCount})","description":"CDOTA_BaseNPC_Building:\nSet the invulnerability counter of this building., return void","prefix":"SetInvulnCount"},
"CDOTA_Modifier_Lua_AllowIllusionDuplicate":{"body":"AllowIllusionDuplicate()","description":"CDOTA_Modifier_Lua:\nTrue/false if this modifier is active on illusions., return bool","prefix":"AllowIllusionDuplicate"},
"ACT_DOTA_MEDUSA_STONE_GAZE":{"body":"ACT_DOTA_MEDUSA_STONE_GAZE","description":"","prefix":"ACT_DOTA_MEDUSA_STONE_GAZE"},
"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL":{"body":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL","description":"","prefix":"ABILITY_CANNOT_BE_UPGRADED_REQUIRES_LEVEL"},
"CDOTA_Item_Lua_GetIntrinsicModifierName":{"body":"GetIntrinsicModifierName()","description":"CDOTA_Item_Lua:\nReturns the name of the modifier applied passively by this ability., return string","prefix":"GetIntrinsicModifierName"},
"CDOTA_BaseNPC_Creature_SetAttackTimeGain":{"body":"SetAttackTimeGain(${flAttackTimeGain})","description":"CDOTA_BaseNPC_Creature:\nSet the attack time gained per level on this creature., return void","prefix":"SetAttackTimeGain"},
"CDOTABaseGameMode_SetAbilityTuningValueFilter":{"body":"SetAbilityTuningValueFilter(${hFunction}, ${hContext})","description":"CDOTABaseGameMode:\nSet a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values), return void","prefix":"SetAbilityTuningValueFilter"},
"CDOTA_BaseNPC_SetBaseMagicalResistanceValue":{"body":"SetBaseMagicalResistanceValue(${flMagicalResistanceValue})","description":"CDOTA_BaseNPC:\nSets base magical armor value., return void","prefix":"SetBaseMagicalResistanceValue"},
"ACT_DOTA_SWIM_IDLE":{"body":"ACT_DOTA_SWIM_IDLE","description":"","prefix":"ACT_DOTA_SWIM_IDLE"},
"LUA_MODIFIER_MOTION_NONE":{"body":"LUA_MODIFIER_MOTION_NONE","description":"","prefix":"LUA_MODIFIER_MOTION_NONE"},
"MODIFIER_PROPERTY_MAX_ATTACK_RANGE":{"body":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE","description":"Value[69]modifierfunction->GetModifierMaxAttackRange","prefix":"MODIFIER_PROPERTY_MAX_ATTACK_RANGE"},
"CDOTAGamerules_Defeated":{"body":"Defeated()","description":"CDOTAGamerules:\nKills the ancient, etc., return void","prefix":"Defeated"},
"CDOTA_BaseNPC_Hero_CanEarnGold":{"body":"CanEarnGold()","description":"CDOTA_BaseNPC_Hero:\nReturns boolean value result of buyback gold limit time less than game time., return bool","prefix":"CanEarnGold"},
"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS":{"body":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS","description":"Value[44]modifierfunction->GetModifierPhysicalArmorBonusIllusions","prefix":"MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS_ILLUSIONS"},
"CBaseAnimating_GetModelScale":{"body":"GetModelScale()","description":"CBaseAnimating:\nGet scale of entity's model., return float","prefix":"GetModelScale"},
"CDOTA_BaseNPC_Hero_GetAdditionalOwnedUnits":{"body":"GetAdditionalOwnedUnits()","description":"CDOTA_BaseNPC_Hero:\n, return table","prefix":"GetAdditionalOwnedUnits"},
"CDOTA_Item_Physical_GetContainedItem":{"body":"GetContainedItem()","description":"CDOTA_Item_Physical:\nReturned the contained item., return handle","prefix":"GetContainedItem"},
"CDOTA_BaseNPC_Hero_GetBaseAgility":{"body":"GetBaseAgility()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetBaseAgility"},
"ACT_DOTA_CAPTURE_RARE":{"body":"ACT_DOTA_CAPTURE_RARE","description":"","prefix":"ACT_DOTA_CAPTURE_RARE"},
"CDOTA_BaseNPC_Hero_GetBaseIntellect":{"body":"GetBaseIntellect()","description":"CDOTA_BaseNPC_Hero:\n, return float","prefix":"GetBaseIntellect"},
"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED":{"body":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED","description":"","prefix":"DOTA_ABILITY_BEHAVIOR_UNRESTRICTED"},
"CDOTABaseAbility_GetModifierValue":{"body":"GetModifierValue()","description":"CDOTABaseAbility:\n, return float","prefix":"GetModifierValue"},
"CDOTA_Item_GetPurchaseTime":{"body":"GetPurchaseTime()","description":"CDOTA_Item:\nGet the purchase time of this item, return float","prefix":"GetPurchaseTime"},
"CEntities_FindByTarget":{"body":"FindByTarget(${handle_1}, ${string_2})","description":"CEntities:\nFind entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search, return handle","prefix":"FindByTarget"},
"CInfoData_QueryVector":{"body":"QueryVector(${tok}, ${vDefault})","description":"CInfoData:\nQuery vector data for this key, return Vector","prefix":"QueryVector"},
"CDOTAGameManager_GetHeroNameForUnitName":{"body":"GetHeroNameForUnitName(${string_1})","description":"CDOTAGameManager:\nGet the hero name given a unit name., return string","prefix":"GetHeroNameForUnitName"},
"UF_FAIL_ILLUSION":{"body":"UF_FAIL_ILLUSION","description":"","prefix":"UF_FAIL_ILLUSION"},
"DOTA_SPEECH_USER_INVALID":{"body":"DOTA_SPEECH_USER_INVALID","description":"","prefix":"DOTA_SPEECH_USER_INVALID"},
"CDOTA_BaseNPC_Hero_GetPrimaryAttribute":{"body":"GetPrimaryAttribute()","description":"CDOTA_BaseNPC_Hero:\n0 = strength, 1 = agility, 2 = intelligence., return int","prefix":"GetPrimaryAttribute"},
"CDOTA_BaseNPC_SellItem":{"body":"SellItem(${hItem})","description":"CDOTA_BaseNPC:\nSells the passed item in this unit's inventory., return void","prefix":"SellItem"},
"CDOTA_BaseNPC_Hero_GetStatsBasedManaRegen":{"body":"GetStatsBasedManaRegen()","description":"CDOTA_BaseNPC_Hero:\nReturns only the regen based on Intelligence., return float","prefix":"GetStatsBasedManaRegen"},
"RandomFloat":{"body":"RandomFloat(${float_1}, ${float_2})","description":"Get a random float within a range, return float","prefix":"RandomFloat"},
"DOTA_HEROPICK_STATE_CM_BAN3":{"body":"DOTA_HEROPICK_STATE_CM_BAN3","description":"","prefix":"DOTA_HEROPICK_STATE_CM_BAN3"},
"PATTACH_WATERWAKE":{"body":"PATTACH_WATERWAKE","description":"","prefix":"PATTACH_WATERWAKE"},
"DOTA_RUNE_ARCANE":{"body":"DOTA_RUNE_ARCANE","description":"","prefix":"DOTA_RUNE_ARCANE"},
"CDOTA_BaseNPC_Hero_KilledHero":{"body":"KilledHero(${hHero}, ${hInflictor})","description":"CDOTA_BaseNPC_Hero:\nArgs: Hero, Inflictor, return void","prefix":"KilledHero"},
"CDOTA_BaseNPC_Hero_ModifyAgility":{"body":"ModifyAgility(${flNewAgility})","description":"CDOTA_BaseNPC_Hero:\nAdds passed value to base attribute value, then calls CalculateStatBonus., return void","prefix":"ModifyAgility"},
"CDOTA_BaseNPC_Hero_ModifyIntellect":{"body":"ModifyIntellect(${flNewIntellect})","description":"CDOTA_BaseNPC_Hero:\nAdds passed value to base attribute value, then calls CalculateStatBonus., return void","prefix":"ModifyIntellect"},
"CDOTA_BaseNPC_Hero_SetAbilityPoints":{"body":"SetAbilityPoints(${iPoints})","description":"CDOTA_BaseNPC_Hero:\nSets the current unspent ability points., return void","prefix":"SetAbilityPoints"},
"CDOTA_BaseNPC_Hero_UpgradeAbility":{"body":"UpgradeAbility(${hAbility})","description":"CDOTA_BaseNPC_Hero:\nThis upgrades the passed ability if it exists and the hero has enough ability points., return void","prefix":"UpgradeAbility"},
"CDOTABaseAbility_GetDuration":{"body":"GetDuration()","description":"CDOTABaseAbility:\n, return float","prefix":"GetDuration"},
"CEntityInstance_GetDebugName":{"body":"GetDebugName()","description":"CEntityInstance:\nGet the entity name w/help if not defined (i.e. classname/etc), return string","prefix":"GetDebugName"},
"CDOTAGamerules_SetTimeOfDay":{"body":"SetTimeOfDay(${float_1})","description":"CDOTAGamerules:\nSet the time of day., return void","prefix":"SetTimeOfDay"},
"DOTA_TEAM_CUSTOM_4":{"body":"DOTA_TEAM_CUSTOM_4","description":"","prefix":"DOTA_TEAM_CUSTOM_4"},
"DOTA_HEROPICK_STATE_CD_BAN2":{"body":"DOTA_HEROPICK_STATE_CD_BAN2","description":"","prefix":"DOTA_HEROPICK_STATE_CD_BAN2"},
"CDOTA_BaseNPC_GetAttacksPerSecond":{"body":"GetAttacksPerSecond()","description":"CDOTA_BaseNPC:\n, return float","prefix":"GetAttacksPerSecond"},
"SUBQUEST_NUM_TEXT_REPLACE_VALUES":{"body":"SUBQUEST_NUM_TEXT_REPLACE_VALUES","description":"","prefix":"SUBQUEST_NUM_TEXT_REPLACE_VALUES"},
"CDOTA_Item_Lua_OnHeroCalculateStatBonus":{"body":"OnHeroCalculateStatBonus()","description":"CDOTA_Item_Lua:\nCaster (hero only) gained a level, skilled an ability, or received a new stat bonus., return void","prefix":"OnHeroCalculateStatBonus"},
"CDOTA_Item_Lua_OnHeroDiedNearby":{"body":"OnHeroDiedNearby(${unit}, ${attacker}, ${table})","description":"CDOTA_Item_Lua:\nA hero has died in the vicinity (ie Urn), takes table of params., return void","prefix":"OnHeroDiedNearby"},
"CDOTABaseGameMode_SetRemoveIllusionsOnDeath":{"body":"SetRemoveIllusionsOnDeath(${bRemove})","description":"CDOTABaseGameMode:\nMake it so illusions are immediately removed upon death, rather than sticking around for a few seconds., return void","prefix":"SetRemoveIllusionsOnDeath"},
"ACT_DOTA_CAST_FORGE_SPIRIT":{"body":"ACT_DOTA_CAST_FORGE_SPIRIT","description":"","prefix":"ACT_DOTA_CAST_FORGE_SPIRIT"},
"CDOTA_Item_GetContainer":{"body":"GetContainer()","description":"CDOTA_Item:\nGet the container for this item., return handle","prefix":"GetContainer"},
"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS":{"body":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS","description":"Value[60]modifierfunction->GetModifierExtraHealthBonus","prefix":"MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS"},
"CDOTA_Modifier_Lua_Vertical_Motion_GetMotionPriority":{"body":"GetMotionPriority()","description":"CDOTA_Modifier_Lua_Vertical_Motion:\nGet the priority, return int","prefix":"GetMotionPriority"},
"CDOTA_Item_IsKillable":{"body":"IsKillable()","description":"CDOTA_Item:\n, return bool","prefix":"IsKillable"},
"CDOTA_Item_IsStackable":{"body":"IsStackable()","description":"CDOTA_Item:\n, return bool","prefix":"IsStackable"},
"CDOTA_Item_GetCurrentCharges":{"body":"GetCurrentCharges()","description":"CDOTA_Item:\nGet the number of charges this item currently has., return int","prefix":"GetCurrentCharges"},
"CDOTA_Item_SetItemState":{"body":"SetItemState(${iState})","description":"CDOTA_Item:\nSets whether item is unequipped or ready., return void","prefix":"SetItemState"},
"CDOTA_ItemSpawner_GetItemName":{"body":"GetItemName()","description":"CDOTA_ItemSpawner:\nReturns the item name, return string","prefix":"GetItemName"},
"CDOTA_BaseNPC_GetMaxMana":{"body":"GetMaxMana()","description":"CDOTA_BaseNPC:\nGet the maximum mana of this unit., return float","prefix":"GetMaxMana"},
"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE":{"body":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE","description":"Value[62]modifierfunction->GetModifierExtraHealthPercentage","prefix":"MODIFIER_PROPERTY_EXTRA_HEALTH_PERCENTAGE"},
"CDOTAGamerules_FinishCustomGameSetup":{"body":"FinishCustomGameSetup()","description":"CDOTAGamerules:\nIndicate that the custom game setup phase is complete, and advance to the game., return void","prefix":"FinishCustomGameSetup"},
"DOTA_UNIT_TARGET_TEAM_BOTH":{"body":"DOTA_UNIT_TARGET_TEAM_BOTH","description":"","prefix":"DOTA_UNIT_TARGET_TEAM_BOTH"},
"CBaseTrigger_IsTouching":{"body":"IsTouching(${hEnt})","description":"CBaseTrigger:\nChecks whether the passed entity is touching the trigger., return bool","prefix":"IsTouching"},
"CDOTA_Item_Lua_OnChannelFinish":{"body":"OnChannelFinish(${bInterrupted})","description":"CDOTA_Item_Lua:\n(bool bInterrupted) Channel finished., return void","prefix":"OnChannelFinish"},
"GetSystemTime":{"body":"GetSystemTime()","description":"Get the current real world time, return string","prefix":"GetSystemTime"},
"CDOTA_BaseNPC_Hero_GetAssists":{"body":"GetAssists()","description":"CDOTA_BaseNPC_Hero:\nValue is stored in PlayerResource., return int","prefix":"GetAssists"},
"CDOTA_BaseNPC_Creature_SetArmorGain":{"body":"SetArmorGain(${flArmorGain})","description":"CDOTA_BaseNPC_Creature:\nSet the armor gained per level on this creature., return void","prefix":"SetArmorGain"},
"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE":{"body":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE","description":"Value[49]modifierfunction->GetModifierMagicalResistanceDecrepifyUnique","prefix":"MODIFIER_PROPERTY_MAGICAL_RESISTANCE_DECREPIFY_UNIQUE"},
"UF_FAIL_INVULNERABLE":{"body":"UF_FAIL_INVULNERABLE","description":"","prefix":"UF_FAIL_INVULNERABLE"},
"MODIFIER_STATE_UNSELECTABLE":{"body":"MODIFIER_STATE_UNSELECTABLE","description":"","prefix":"MODIFIER_STATE_UNSELECTABLE"},
"CDOTA_BaseNPC_SetDayTimeVisionRange":{"body":"SetDayTimeVisionRange(${iRange})","description":"CDOTA_BaseNPC:\nSet the base vision range., return void","prefix":"SetDayTimeVisionRange"},
"CBaseEntity_SetMaxHealth":{"body":"SetMaxHealth(${amt})","description":"CBaseEntity:\nSet the maximum health of this entity., return void","prefix":"SetMaxHealth"},
"CDOTA_Modifier_Lua_Horizontal_Motion_GetPriority":{"body":"GetPriority()","description":"CDOTA_Modifier_Lua_Horizontal_Motion:\nGet the priority, return int","prefix":"GetPriority"},
"CDOTATutorial_SetShopOpen":{"body":"SetShopOpen(${bool_1})","description":"CDOTATutorial:\nSet the shop open or closed., return void","prefix":"SetShopOpen"},
"CDOTA_BaseNPC_Hero_HasRoomForItem":{"body":"HasRoomForItem(${pItemName}, ${bIncludeStashCombines}, ${bAllowSelling})","description":"CDOTA_BaseNPC_Hero:\nArgs: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling, return int","prefix":"HasRoomForItem"},
"CDOTA_PlayerResource_GetDeaths":{"body":"GetDeaths(${iPlayerID})","description":"CDOTA_PlayerResource:\n, return int","prefix":"GetDeaths"},
"CBaseEntity_AddEffects":{"body":"AddEffects(${nFlags})","description":"CBaseEntity:\nAddEffects( int ): Adds the render effect flag., return void","prefix":"AddEffects"}
}